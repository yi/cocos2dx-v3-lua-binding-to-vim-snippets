######### Cocos2d-x v3 MoonScript Snippets : START ######################

snippet Action\startWithTarget(node) "csxV3: Action::startWithTarget "
	Action\startWithTarget(${1:node})


snippet Action\setOriginalTarget(node) "csxV3: Action::setOriginalTarget "
	Action\setOriginalTarget(${1:node})


snippet Action\clone! "csxV3: Action::clone "
	Action\clone!


snippet Action\getOriginalTarget! "csxV3: Action::getOriginalTarget "
	Action\getOriginalTarget!


snippet Action\stop! "csxV3: Action::stop "
	Action\stop!


snippet Action\update(float) "csxV3: Action::update "
	Action\update(${1:float})


snippet Action\getTarget! "csxV3: Action::getTarget "
	Action\getTarget!


snippet Action\step(float) "csxV3: Action::step "
	Action\step(${1:float})


snippet Action\setTag(int) "csxV3: Action::setTag "
	Action\setTag(${1:int})


snippet Action\getTag! "csxV3: Action::getTag "
	Action\getTag!


snippet Action\setTarget(node) "csxV3: Action::setTarget "
	Action\setTarget(${1:node})


snippet Action\isDone! "csxV3: Action::isDone "
	Action\isDone!


snippet ActionCamera\setEye(float\,float\,float) "csxV3: ActionCamera::setEye "
	ActionCamera\setEye(${1:float}, ${2:float}, ${3:float})


snippet ActionCamera\getEye! "csxV3: ActionCamera::getEye "
	ActionCamera\getEye!


snippet ActionCamera\setUp(vec3) "csxV3: ActionCamera::setUp "
	ActionCamera\setUp(${1:vec3})


snippet ActionCamera\getCenter! "csxV3: ActionCamera::getCenter "
	ActionCamera\getCenter!


snippet ActionCamera\setCenter(vec3) "csxV3: ActionCamera::setCenter "
	ActionCamera\setCenter(${1:vec3})


snippet ActionCamera\getUp! "csxV3: ActionCamera::getUp "
	ActionCamera\getUp!


snippet ActionCamera\startWithTarget(node) "csxV3: ActionCamera::startWithTarget "
	ActionCamera\startWithTarget(${1:node})


snippet ActionCamera\clone! "csxV3: ActionCamera::clone "
	ActionCamera\clone!


snippet ActionCamera\reverse! "csxV3: ActionCamera::reverse "
	ActionCamera\reverse!


snippet ActionEase\getInnerAction! "csxV3: ActionEase::getInnerAction "
	ActionEase\getInnerAction!


snippet ActionEase\startWithTarget(node) "csxV3: ActionEase::startWithTarget "
	ActionEase\startWithTarget(${1:node})


snippet ActionEase\clone! "csxV3: ActionEase::clone "
	ActionEase\clone!


snippet ActionEase\stop! "csxV3: ActionEase::stop "
	ActionEase\stop!


snippet ActionEase\reverse! "csxV3: ActionEase::reverse "
	ActionEase\reverse!


snippet ActionInstant\step(float) "csxV3: ActionInstant::step "
	ActionInstant\step(${1:float})


snippet ActionInstant\clone! "csxV3: ActionInstant::clone "
	ActionInstant\clone!


snippet ActionInstant\reverse! "csxV3: ActionInstant::reverse "
	ActionInstant\reverse!


snippet ActionInstant\isDone! "csxV3: ActionInstant::isDone "
	ActionInstant\isDone!


snippet ActionInterval\getAmplitudeRate! "csxV3: ActionInterval::getAmplitudeRate "
	ActionInterval\getAmplitudeRate!


snippet ActionInterval\setAmplitudeRate(float) "csxV3: ActionInterval::setAmplitudeRate "
	ActionInterval\setAmplitudeRate(${1:float})


snippet ActionInterval\getElapsed! "csxV3: ActionInterval::getElapsed "
	ActionInterval\getElapsed!


snippet ActionInterval\startWithTarget(node) "csxV3: ActionInterval::startWithTarget "
	ActionInterval\startWithTarget(${1:node})


snippet ActionInterval\step(float) "csxV3: ActionInterval::step "
	ActionInterval\step(${1:float})


snippet ActionInterval\clone! "csxV3: ActionInterval::clone "
	ActionInterval\clone!


snippet ActionInterval\reverse! "csxV3: ActionInterval::reverse "
	ActionInterval\reverse!


snippet ActionManager\getActionByTag(int\,node) "csxV3: ActionManager::getActionByTag "
	ActionManager\getActionByTag(${1:int}, ${2:node})


snippet ActionManager\removeActionByTag(int\,node) "csxV3: ActionManager::removeActionByTag "
	ActionManager\removeActionByTag(${1:int}, ${2:node})


snippet ActionManager\removeAllActions! "csxV3: ActionManager::removeAllActions "
	ActionManager\removeAllActions!


snippet ActionManager\addAction(action\,node\,bool) "csxV3: ActionManager::addAction "
	ActionManager\addAction(${1:action}, ${2:node}, ${3:bool})


snippet ActionManager\resumeTarget(node) "csxV3: ActionManager::resumeTarget "
	ActionManager\resumeTarget(${1:node})


snippet ActionManager\update(float) "csxV3: ActionManager::update "
	ActionManager\update(${1:float})


snippet ActionManager\getNumberOfRunningActionsInTarget(node) "csxV3: ActionManager::getNumberOfRunningActionsInTarget "
	ActionManager\getNumberOfRunningActionsInTarget(${1:node})


snippet ActionManager\removeAllActionsFromTarget(node) "csxV3: ActionManager::removeAllActionsFromTarget "
	ActionManager\removeAllActionsFromTarget(${1:node})


snippet ActionManager\resumeTargets(array) "csxV3: ActionManager::resumeTargets "
	ActionManager\resumeTargets(${1:array})


snippet ActionManager\removeAction(action) "csxV3: ActionManager::removeAction "
	ActionManager\removeAction(${1:action})


snippet ActionManager\pauseTarget(node) "csxV3: ActionManager::pauseTarget "
	ActionManager\pauseTarget(${1:node})


snippet ActionManager\pauseAllRunningActions! "csxV3: ActionManager::pauseAllRunningActions "
	ActionManager\pauseAllRunningActions!


snippet ActionManagerEx\playActionByName(char\,char\,callfunc) "csxV3: ActionManagerEx::playActionByName "
	ActionManagerEx\playActionByName(${1:char}, ${2:char}, ${3:callfunc})


snippet ActionManagerEx\getActionByName(char\,char) "csxV3: ActionManagerEx::getActionByName "
	ActionManagerEx\getActionByName(${1:char}, ${2:char})


snippet ActionManagerEx\releaseActions! "csxV3: ActionManagerEx::releaseActions "
	ActionManagerEx\releaseActions!


snippet ActionManagerEx\destroyInstance! "csxV3: ActionManagerEx::destroyInstance "
	ActionManagerEx\destroyInstance!


snippet ActionObject\setCurrentTime(float) "csxV3: ActionObject::setCurrentTime "
	ActionObject\setCurrentTime(${1:float})


snippet ActionObject\pause! "csxV3: ActionObject::pause "
	ActionObject\pause!


snippet ActionObject\setName(char) "csxV3: ActionObject::setName "
	ActionObject\setName(${1:char})


snippet ActionObject\setUnitTime(float) "csxV3: ActionObject::setUnitTime "
	ActionObject\setUnitTime(${1:float})


snippet ActionObject\getTotalTime! "csxV3: ActionObject::getTotalTime "
	ActionObject\getTotalTime!


snippet ActionObject\getName! "csxV3: ActionObject::getName "
	ActionObject\getName!


snippet ActionObject\stop! "csxV3: ActionObject::stop "
	ActionObject\stop!


snippet ActionObject\play(callfunc) "csxV3: ActionObject::play "
	ActionObject\play(${1:callfunc})


snippet ActionObject\getCurrentTime! "csxV3: ActionObject::getCurrentTime "
	ActionObject\getCurrentTime!


snippet ActionObject\removeActionNode(actionnode) "csxV3: ActionObject::removeActionNode "
	ActionObject\removeActionNode(${1:actionnode})


snippet ActionObject\getLoop! "csxV3: ActionObject::getLoop "
	ActionObject\getLoop!


snippet ActionObject\addActionNode(actionnode) "csxV3: ActionObject::addActionNode "
	ActionObject\addActionNode(${1:actionnode})


snippet ActionObject\getUnitTime! "csxV3: ActionObject::getUnitTime "
	ActionObject\getUnitTime!


snippet ActionObject\isPlaying! "csxV3: ActionObject::isPlaying "
	ActionObject\isPlaying!


snippet ActionObject\updateToFrameByTime(float) "csxV3: ActionObject::updateToFrameByTime "
	ActionObject\updateToFrameByTime(${1:float})


snippet ActionObject\setLoop(bool) "csxV3: ActionObject::setLoop "
	ActionObject\setLoop(${1:bool})


snippet ActionObject\simulationActionUpdate(float) "csxV3: ActionObject::simulationActionUpdate "
	ActionObject\simulationActionUpdate(${1:float})


snippet ActionTween\create(float\,str\,float\,float) "csxV3: ActionTween::create "
	ActionTween\create(${1:float}, ${2:str}, ${3:float}, ${4:float})


snippet ActionTween\startWithTarget(node) "csxV3: ActionTween::startWithTarget "
	ActionTween\startWithTarget(${1:node})


snippet ActionTween\clone! "csxV3: ActionTween::clone "
	ActionTween\clone!


snippet ActionTween\update(float) "csxV3: ActionTween::update "
	ActionTween\update(${1:float})


snippet Animate\getAnimation! "csxV3: Animate::getAnimation "
	Animate\getAnimation!


snippet Animate\setAnimation(animation) "csxV3: Animate::setAnimation "
	Animate\setAnimation(${1:animation})


snippet Animate\create(animation) "csxV3: Animate::create "
	Animate\create(${1:animation})


snippet Animate\startWithTarget(node) "csxV3: Animate::startWithTarget "
	Animate\startWithTarget(${1:node})


snippet Animate\clone! "csxV3: Animate::clone "
	Animate\clone!


snippet Animate\stop! "csxV3: Animate::stop "
	Animate\stop!


snippet Animate\reverse! "csxV3: Animate::reverse "
	Animate\reverse!


snippet Animation\getLoops! "csxV3: Animation::getLoops "
	Animation\getLoops!


snippet Animation\addSpriteFrame(spriteframe) "csxV3: Animation::addSpriteFrame "
	Animation\addSpriteFrame(${1:spriteframe})


snippet Animation\setRestoreOriginalFrame(bool) "csxV3: Animation::setRestoreOriginalFrame "
	Animation\setRestoreOriginalFrame(${1:bool})


snippet Animation\clone! "csxV3: Animation::clone "
	Animation\clone!


snippet Animation\getDuration! "csxV3: Animation::getDuration "
	Animation\getDuration!


snippet Animation\setFrames(array) "csxV3: Animation::setFrames "
	Animation\setFrames(${1:array})


snippet Animation\getFrames! "csxV3: Animation::getFrames "
	Animation\getFrames!


snippet Animation\setLoops(int) "csxV3: Animation::setLoops "
	Animation\setLoops(${1:int})


snippet Animation\setDelayPerUnit(float) "csxV3: Animation::setDelayPerUnit "
	Animation\setDelayPerUnit(${1:float})


snippet Animation\addSpriteFrameWithFile(str) "csxV3: Animation::addSpriteFrameWithFile "
	Animation\addSpriteFrameWithFile(${1:str})


snippet Animation\getTotalDelayUnits! "csxV3: Animation::getTotalDelayUnits "
	Animation\getTotalDelayUnits!


snippet Animation\getDelayPerUnit! "csxV3: Animation::getDelayPerUnit "
	Animation\getDelayPerUnit!


snippet Animation\getRestoreOriginalFrame! "csxV3: Animation::getRestoreOriginalFrame "
	Animation\getRestoreOriginalFrame!


snippet Animation\addSpriteFrameWithTexture(texture2d\,rect) "csxV3: Animation::addSpriteFrameWithTexture "
	Animation\addSpriteFrameWithTexture(${1:texture2d}, ${2:rect})


snippet Animation\create(array\,float\,int) "csxV3: Animation::create "
	Animation\create(${1:array}, ${2:float}, ${3:int})


snippet AnimationCache\getAnimation(str) "csxV3: AnimationCache::getAnimation "
	AnimationCache\getAnimation(${1:str})


snippet AnimationCache\addAnimation(animation\,str) "csxV3: AnimationCache::addAnimation "
	AnimationCache\addAnimation(${1:animation}, ${2:str})


snippet AnimationCache\init! "csxV3: AnimationCache::init "
	AnimationCache\init!


snippet AnimationCache\addAnimationsWithDictionary(map\,str) "csxV3: AnimationCache::addAnimationsWithDictionary "
	AnimationCache\addAnimationsWithDictionary(${1:map}, ${2:str})


snippet AnimationCache\removeAnimation(str) "csxV3: AnimationCache::removeAnimation "
	AnimationCache\removeAnimation(${1:str})


snippet AnimationCache\addAnimationsWithFile(str) "csxV3: AnimationCache::addAnimationsWithFile "
	AnimationCache\addAnimationsWithFile(${1:str})


snippet AnimationCache\destroyInstance! "csxV3: AnimationCache::destroyInstance "
	AnimationCache\destroyInstance!


snippet AnimationCache\getInstance! "csxV3: AnimationCache::getInstance "
	AnimationCache\getInstance!


snippet AnimationData\getMovement(str) "csxV3: AnimationData::getMovement "
	AnimationData\getMovement(${1:str})


snippet AnimationData\getMovementCount! "csxV3: AnimationData::getMovementCount "
	AnimationData\getMovementCount!


snippet AnimationData\addMovement(movementdata) "csxV3: AnimationData::addMovement "
	AnimationData\addMovement(${1:movementdata})


snippet AnimationData\create! "csxV3: AnimationData::create "
	AnimationData\create!


snippet AnimationFrame\setSpriteFrame(spriteframe) "csxV3: AnimationFrame::setSpriteFrame "
	AnimationFrame\setSpriteFrame(${1:spriteframe})


snippet AnimationFrame\getUserInfo! "csxV3: AnimationFrame::getUserInfo "
	AnimationFrame\getUserInfo!


snippet AnimationFrame\setDelayUnits(float) "csxV3: AnimationFrame::setDelayUnits "
	AnimationFrame\setDelayUnits(${1:float})


snippet AnimationFrame\clone! "csxV3: AnimationFrame::clone "
	AnimationFrame\clone!


snippet AnimationFrame\getSpriteFrame! "csxV3: AnimationFrame::getSpriteFrame "
	AnimationFrame\getSpriteFrame!


snippet AnimationFrame\getDelayUnits! "csxV3: AnimationFrame::getDelayUnits "
	AnimationFrame\getDelayUnits!


snippet AnimationFrame\setUserInfo(map) "csxV3: AnimationFrame::setUserInfo "
	AnimationFrame\setUserInfo(${1:map})


snippet Application\getTargetPlatform! "csxV3: Application::getTargetPlatform "
	Application\getTargetPlatform!


snippet Application\getCurrentLanguageCode! "csxV3: Application::getCurrentLanguageCode "
	Application\getCurrentLanguageCode!


snippet Application\getCurrentLanguage! "csxV3: Application::getCurrentLanguage "
	Application\getCurrentLanguage!


snippet Application\setAnimationInterval(double) "csxV3: Application::setAnimationInterval "
	Application\setAnimationInterval(${1:double})


snippet Armature\getBone(str) "csxV3: Armature::getBone "
	Armature\getBone(${1:str})


snippet Armature\changeBoneParent(bone\,str) "csxV3: Armature::changeBoneParent "
	Armature\changeBoneParent(${1:bone}, ${2:str})


snippet Armature\setAnimation(armatureanimation) "csxV3: Armature::setAnimation "
	Armature\setAnimation(${1:armatureanimation})


snippet Armature\getBoneAtPoint(float\,float) "csxV3: Armature::getBoneAtPoint "
	Armature\getBoneAtPoint(${1:float}, ${2:float})


snippet Armature\getArmatureTransformDirty! "csxV3: Armature::getArmatureTransformDirty "
	Armature\getArmatureTransformDirty!


snippet Armature\setVersion(float) "csxV3: Armature::setVersion "
	Armature\setVersion(${1:float})


snippet Armature\updateOffsetPoint! "csxV3: Armature::updateOffsetPoint "
	Armature\updateOffsetPoint!


snippet Armature\getParentBone! "csxV3: Armature::getParentBone "
	Armature\getParentBone!


snippet Armature\setArmatureData(armaturedata) "csxV3: Armature::setArmatureData "
	Armature\setArmatureData(${1:armaturedata})


snippet Armature\removeBone(bone\,bool) "csxV3: Armature::removeBone "
	Armature\removeBone(${1:bone}, ${2:bool})


snippet Armature\getBatchNode! "csxV3: Armature::getBatchNode "
	Armature\getBatchNode!


snippet Armature\getName! "csxV3: Armature::getName "
	Armature\getName!


snippet Armature\init(str\,bone) "csxV3: Armature::init "
	Armature\init(${1:str}, ${2:bone})


snippet Armature\setParentBone(bone) "csxV3: Armature::setParentBone "
	Armature\setParentBone(${1:bone})


snippet Armature\drawContour! "csxV3: Armature::drawContour "
	Armature\drawContour!


snippet Armature\setBatchNode(batchnode) "csxV3: Armature::setBatchNode "
	Armature\setBatchNode(${1:batchnode})


snippet Armature\setName(str) "csxV3: Armature::setName "
	Armature\setName(${1:str})


snippet Armature\addBone(bone\,str) "csxV3: Armature::addBone "
	Armature\addBone(${1:bone}, ${2:str})


snippet Armature\getArmatureData! "csxV3: Armature::getArmatureData "
	Armature\getArmatureData!


snippet Armature\getVersion! "csxV3: Armature::getVersion "
	Armature\getVersion!


snippet Armature\getAnimation! "csxV3: Armature::getAnimation "
	Armature\getAnimation!


snippet Armature\getBoneDic! "csxV3: Armature::getBoneDic "
	Armature\getBoneDic!


snippet Armature\create(str\,bone) "csxV3: Armature::create "
	Armature\create(${1:str}, ${2:bone})


snippet Armature\setAnchorPoint(vec2) "csxV3: Armature::setAnchorPoint "
	Armature\setAnchorPoint(${1:vec2})


snippet Armature\draw(renderer\,mat4\,bool) "csxV3: Armature::draw "
	Armature\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet Armature\getAnchorPointInPoints! "csxV3: Armature::getAnchorPointInPoints "
	Armature\getAnchorPointInPoints!


snippet Armature\update(float) "csxV3: Armature::update "
	Armature\update(${1:float})


snippet Armature\getNodeToParentTransform! "csxV3: Armature::getNodeToParentTransform "
	Armature\getNodeToParentTransform!


snippet Armature\getBoundingBox! "csxV3: Armature::getBoundingBox "
	Armature\getBoundingBox!


snippet ArmatureAnimation\getSpeedScale! "csxV3: ArmatureAnimation::getSpeedScale "
	ArmatureAnimation\getSpeedScale!


snippet ArmatureAnimation\pause! "csxV3: ArmatureAnimation::pause "
	ArmatureAnimation\pause!


snippet ArmatureAnimation\setSpeedScale(float) "csxV3: ArmatureAnimation::setSpeedScale "
	ArmatureAnimation\setSpeedScale(${1:float})


snippet ArmatureAnimation\init(armature) "csxV3: ArmatureAnimation::init "
	ArmatureAnimation\init(${1:armature})


snippet ArmatureAnimation\playWithIndexes(array\,int\,bool) "csxV3: ArmatureAnimation::playWithIndexes "
	ArmatureAnimation\playWithIndexes(${1:array}, ${2:int}, ${3:bool})


snippet ArmatureAnimation\play(str\,int\,int) "csxV3: ArmatureAnimation::play "
	ArmatureAnimation\play(${1:str}, ${2:int}, ${3:int})


snippet ArmatureAnimation\gotoAndPause(int) "csxV3: ArmatureAnimation::gotoAndPause "
	ArmatureAnimation\gotoAndPause(${1:int})


snippet ArmatureAnimation\resume! "csxV3: ArmatureAnimation::resume "
	ArmatureAnimation\resume!


snippet ArmatureAnimation\stop! "csxV3: ArmatureAnimation::stop "
	ArmatureAnimation\stop!


snippet ArmatureAnimation\update(float) "csxV3: ArmatureAnimation::update "
	ArmatureAnimation\update(${1:float})


snippet ArmatureAnimation\getAnimationData! "csxV3: ArmatureAnimation::getAnimationData "
	ArmatureAnimation\getAnimationData!


snippet ArmatureAnimation\playWithIndex(int\,int\,int) "csxV3: ArmatureAnimation::playWithIndex "
	ArmatureAnimation\playWithIndex(${1:int}, ${2:int}, ${3:int})


snippet ArmatureAnimation\getCurrentMovementID! "csxV3: ArmatureAnimation::getCurrentMovementID "
	ArmatureAnimation\getCurrentMovementID!


snippet ArmatureAnimation\setAnimationData(animationdata) "csxV3: ArmatureAnimation::setAnimationData "
	ArmatureAnimation\setAnimationData(${1:animationdata})


snippet ArmatureAnimation\gotoAndPlay(int) "csxV3: ArmatureAnimation::gotoAndPlay "
	ArmatureAnimation\gotoAndPlay(${1:int})


snippet ArmatureAnimation\playWithNames(array\,int\,bool) "csxV3: ArmatureAnimation::playWithNames "
	ArmatureAnimation\playWithNames(${1:array}, ${2:int}, ${3:bool})


snippet ArmatureAnimation\getMovementCount! "csxV3: ArmatureAnimation::getMovementCount "
	ArmatureAnimation\getMovementCount!


snippet ArmatureAnimation\create(armature) "csxV3: ArmatureAnimation::create "
	ArmatureAnimation\create(${1:armature})


snippet ArmatureData\addBoneData(bonedata) "csxV3: ArmatureData::addBoneData "
	ArmatureData\addBoneData(${1:bonedata})


snippet ArmatureData\init! "csxV3: ArmatureData::init "
	ArmatureData\init!


snippet ArmatureData\getBoneData(str) "csxV3: ArmatureData::getBoneData "
	ArmatureData\getBoneData(${1:str})


snippet ArmatureData\create! "csxV3: ArmatureData::create "
	ArmatureData\create!


snippet ArmatureDataManager\getAnimationDatas! "csxV3: ArmatureDataManager::getAnimationDatas "
	ArmatureDataManager\getAnimationDatas!


snippet ArmatureDataManager\removeAnimationData(str) "csxV3: ArmatureDataManager::removeAnimationData "
	ArmatureDataManager\removeAnimationData(${1:str})


snippet ArmatureDataManager\addArmatureData(str\,armaturedata\,str) "csxV3: ArmatureDataManager::addArmatureData "
	ArmatureDataManager\addArmatureData(${1:str}, ${2:armaturedata}, ${3:str})


snippet ArmatureDataManager\addArmatureFileInfo(str\,str\,str) "csxV3: ArmatureDataManager::addArmatureFileInfo "
	ArmatureDataManager\addArmatureFileInfo(${1:str}, ${2:str}, ${3:str})


snippet ArmatureDataManager\removeArmatureFileInfo(str) "csxV3: ArmatureDataManager::removeArmatureFileInfo "
	ArmatureDataManager\removeArmatureFileInfo(${1:str})


snippet ArmatureDataManager\getTextureDatas! "csxV3: ArmatureDataManager::getTextureDatas "
	ArmatureDataManager\getTextureDatas!


snippet ArmatureDataManager\getTextureData(str) "csxV3: ArmatureDataManager::getTextureData "
	ArmatureDataManager\getTextureData(${1:str})


snippet ArmatureDataManager\getArmatureData(str) "csxV3: ArmatureDataManager::getArmatureData "
	ArmatureDataManager\getArmatureData(${1:str})


snippet ArmatureDataManager\getAnimationData(str) "csxV3: ArmatureDataManager::getAnimationData "
	ArmatureDataManager\getAnimationData(${1:str})


snippet ArmatureDataManager\addAnimationData(str\,animationdata\,str) "csxV3: ArmatureDataManager::addAnimationData "
	ArmatureDataManager\addAnimationData(${1:str}, ${2:animationdata}, ${3:str})


snippet ArmatureDataManager\init! "csxV3: ArmatureDataManager::init "
	ArmatureDataManager\init!


snippet ArmatureDataManager\removeArmatureData(str) "csxV3: ArmatureDataManager::removeArmatureData "
	ArmatureDataManager\removeArmatureData(${1:str})


snippet ArmatureDataManager\getArmatureDatas! "csxV3: ArmatureDataManager::getArmatureDatas "
	ArmatureDataManager\getArmatureDatas!


snippet ArmatureDataManager\removeTextureData(str) "csxV3: ArmatureDataManager::removeTextureData "
	ArmatureDataManager\removeTextureData(${1:str})


snippet ArmatureDataManager\addTextureData(str\,texturedata\,str) "csxV3: ArmatureDataManager::addTextureData "
	ArmatureDataManager\addTextureData(${1:str}, ${2:texturedata}, ${3:str})


snippet ArmatureDataManager\isAutoLoadSpriteFile! "csxV3: ArmatureDataManager::isAutoLoadSpriteFile "
	ArmatureDataManager\isAutoLoadSpriteFile!


snippet ArmatureDataManager\addSpriteFrameFromFile(str\,str\,str) "csxV3: ArmatureDataManager::addSpriteFrameFromFile "
	ArmatureDataManager\addSpriteFrameFromFile(${1:str}, ${2:str}, ${3:str})


snippet ArmatureDataManager\destroyInstance! "csxV3: ArmatureDataManager::destroyInstance "
	ArmatureDataManager\destroyInstance!


snippet ArmatureDisplayData\create! "csxV3: ArmatureDisplayData::create "
	ArmatureDisplayData\create!


snippet AssetsManager\setStoragePath(char) "csxV3: AssetsManager::setStoragePath "
	AssetsManager\setStoragePath(${1:char})


snippet AssetsManager\setPackageUrl(char) "csxV3: AssetsManager::setPackageUrl "
	AssetsManager\setPackageUrl(${1:char})


snippet AssetsManager\checkUpdate! "csxV3: AssetsManager::checkUpdate "
	AssetsManager\checkUpdate!


snippet AssetsManager\getStoragePath! "csxV3: AssetsManager::getStoragePath "
	AssetsManager\getStoragePath!


snippet AssetsManager\update! "csxV3: AssetsManager::update "
	AssetsManager\update!


snippet AssetsManager\setConnectionTimeout(int) "csxV3: AssetsManager::setConnectionTimeout "
	AssetsManager\setConnectionTimeout(${1:int})


snippet AssetsManager\setVersionFileUrl(char) "csxV3: AssetsManager::setVersionFileUrl "
	AssetsManager\setVersionFileUrl(${1:char})


snippet AssetsManager\getPackageUrl! "csxV3: AssetsManager::getPackageUrl "
	AssetsManager\getPackageUrl!


snippet AssetsManager\getConnectionTimeout! "csxV3: AssetsManager::getConnectionTimeout "
	AssetsManager\getConnectionTimeout!


snippet AssetsManager\getVersion! "csxV3: AssetsManager::getVersion "
	AssetsManager\getVersion!


snippet AssetsManager\getVersionFileUrl! "csxV3: AssetsManager::getVersionFileUrl "
	AssetsManager\getVersionFileUrl!


snippet AssetsManager\deleteVersion! "csxV3: AssetsManager::deleteVersion "
	AssetsManager\deleteVersion!


snippet AssetsManager\create(char\,char\,char\,func\,func\,func) "csxV3: AssetsManager::create "
	AssetsManager\create(${1:char}, ${2:char}, ${3:char}, ${4:func}, ${5:func}, ${6:func})


snippet AtlasNode\updateAtlasValues! "csxV3: AtlasNode::updateAtlasValues "
	AtlasNode\updateAtlasValues!


snippet AtlasNode\getTexture! "csxV3: AtlasNode::getTexture "
	AtlasNode\getTexture!


snippet AtlasNode\setTextureAtlas(textureatlas) "csxV3: AtlasNode::setTextureAtlas "
	AtlasNode\setTextureAtlas(${1:textureatlas})


snippet AtlasNode\getTextureAtlas! "csxV3: AtlasNode::getTextureAtlas "
	AtlasNode\getTextureAtlas!


snippet AtlasNode\getQuadsToDraw! "csxV3: AtlasNode::getQuadsToDraw "
	AtlasNode\getQuadsToDraw!


snippet AtlasNode\setTexture(texture2d) "csxV3: AtlasNode::setTexture "
	AtlasNode\setTexture(${1:texture2d})


snippet AtlasNode\setQuadsToDraw(long) "csxV3: AtlasNode::setQuadsToDraw "
	AtlasNode\setQuadsToDraw(${1:long})


snippet AtlasNode\create(str\,int\,int\,int) "csxV3: AtlasNode::create "
	AtlasNode\create(${1:str}, ${2:int}, ${3:int}, ${4:int})


snippet AtlasNode\draw(renderer\,mat4\,bool) "csxV3: AtlasNode::draw "
	AtlasNode\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet AtlasNode\isOpacityModifyRGB! "csxV3: AtlasNode::isOpacityModifyRGB "
	AtlasNode\isOpacityModifyRGB!


snippet AtlasNode\setColor(color3b) "csxV3: AtlasNode::setColor "
	AtlasNode\setColor(${1:color3b})


snippet AtlasNode\getColor! "csxV3: AtlasNode::getColor "
	AtlasNode\getColor!


snippet AtlasNode\setOpacityModifyRGB(bool) "csxV3: AtlasNode::setOpacityModifyRGB "
	AtlasNode\setOpacityModifyRGB(${1:bool})


snippet BaseData\getColor! "csxV3: BaseData::getColor "
	BaseData\getColor!


snippet BaseData\setColor(color4b) "csxV3: BaseData::setColor "
	BaseData\setColor(${1:color4b})


snippet BaseData\create! "csxV3: BaseData::create "
	BaseData\create!


snippet BatchNode\init! "csxV3: BatchNode::init "
	BatchNode\init!


snippet BatchNode\create! "csxV3: BatchNode::create "
	BatchNode\create!


snippet BatchNode\addChild(node\,int\,int) "csxV3: BatchNode::addChild "
	BatchNode\addChild(${1:node}, ${2:int}, ${3:int})


snippet BatchNode\draw(renderer\,mat4\,bool) "csxV3: BatchNode::draw "
	BatchNode\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet BezierBy\startWithTarget(node) "csxV3: BezierBy::startWithTarget "
	BezierBy\startWithTarget(${1:node})


snippet BezierBy\clone! "csxV3: BezierBy::clone "
	BezierBy\clone!


snippet BezierBy\reverse! "csxV3: BezierBy::reverse "
	BezierBy\reverse!


snippet BezierTo\startWithTarget(node) "csxV3: BezierTo::startWithTarget "
	BezierTo\startWithTarget(${1:node})


snippet BezierTo\clone! "csxV3: BezierTo::clone "
	BezierTo\clone!


snippet Blink\create(float\,int) "csxV3: Blink::create "
	Blink\create(${1:float}, ${2:int})


snippet Blink\startWithTarget(node) "csxV3: Blink::startWithTarget "
	Blink\startWithTarget(${1:node})


snippet Blink\clone! "csxV3: Blink::clone "
	Blink\clone!


snippet Blink\stop! "csxV3: Blink::stop "
	Blink\stop!


snippet Blink\reverse! "csxV3: Blink::reverse "
	Blink\reverse!


snippet Bone\isTransformDirty! "csxV3: Bone::isTransformDirty "
	Bone\isTransformDirty!


snippet Bone\isIgnoreMovementBoneData! "csxV3: Bone::isIgnoreMovementBoneData "
	Bone\isIgnoreMovementBoneData!


snippet Bone\updateZOrder! "csxV3: Bone::updateZOrder "
	Bone\updateZOrder!


snippet Bone\getDisplayRenderNode! "csxV3: Bone::getDisplayRenderNode "
	Bone\getDisplayRenderNode!


snippet Bone\isBlendDirty! "csxV3: Bone::isBlendDirty "
	Bone\isBlendDirty!


snippet Bone\addChildBone(bone) "csxV3: Bone::addChildBone "
	Bone\addChildBone(${1:bone})


snippet Bone\getWorldInfo! "csxV3: Bone::getWorldInfo "
	Bone\getWorldInfo!


snippet Bone\getTween! "csxV3: Bone::getTween "
	Bone\getTween!


snippet Bone\getParentBone! "csxV3: Bone::getParentBone "
	Bone\getParentBone!


snippet Bone\updateColor! "csxV3: Bone::updateColor "
	Bone\updateColor!


snippet Bone\getName! "csxV3: Bone::getName "
	Bone\getName!


snippet Bone\setTransformDirty(bool) "csxV3: Bone::setTransformDirty "
	Bone\setTransformDirty(${1:bool})


snippet Bone\getDisplayRenderNodeType! "csxV3: Bone::getDisplayRenderNodeType "
	Bone\getDisplayRenderNodeType!


snippet Bone\removeDisplay(int) "csxV3: Bone::removeDisplay "
	Bone\removeDisplay(${1:int})


snippet Bone\setBoneData(bonedata) "csxV3: Bone::setBoneData "
	Bone\setBoneData(${1:bonedata})


snippet Bone\init(str) "csxV3: Bone::init "
	Bone\init(${1:str})


snippet Bone\setParentBone(bone) "csxV3: Bone::setParentBone "
	Bone\setParentBone(${1:bone})


snippet Bone\addDisplay(displaydata\,int) "csxV3: Bone::addDisplay "
	Bone\addDisplay(${1:displaydata}, ${2:int})


snippet Bone\setName(str) "csxV3: Bone::setName "
	Bone\setName(${1:str})


snippet Bone\removeFromParent(bool) "csxV3: Bone::removeFromParent "
	Bone\removeFromParent(${1:bool})


snippet Bone\getColliderDetector! "csxV3: Bone::getColliderDetector "
	Bone\getColliderDetector!


snippet Bone\getChildArmature! "csxV3: Bone::getChildArmature "
	Bone\getChildArmature!


snippet Bone\getTweenData! "csxV3: Bone::getTweenData "
	Bone\getTweenData!


snippet Bone\changeDisplayWithIndex(int\,bool) "csxV3: Bone::changeDisplayWithIndex "
	Bone\changeDisplayWithIndex(${1:int}, ${2:bool})


snippet Bone\changeDisplayWithName(str\,bool) "csxV3: Bone::changeDisplayWithName "
	Bone\changeDisplayWithName(${1:str}, ${2:bool})


snippet Bone\setArmature(armature) "csxV3: Bone::setArmature "
	Bone\setArmature(${1:armature})


snippet Bone\setBlendDirty(bool) "csxV3: Bone::setBlendDirty "
	Bone\setBlendDirty(${1:bool})


snippet Bone\removeChildBone(bone\,bool) "csxV3: Bone::removeChildBone "
	Bone\removeChildBone(${1:bone}, ${2:bool})


snippet Bone\setChildArmature(armature) "csxV3: Bone::setChildArmature "
	Bone\setChildArmature(${1:armature})


snippet Bone\getNodeToArmatureTransform! "csxV3: Bone::getNodeToArmatureTransform "
	Bone\getNodeToArmatureTransform!


snippet Bone\getDisplayManager! "csxV3: Bone::getDisplayManager "
	Bone\getDisplayManager!


snippet Bone\getArmature! "csxV3: Bone::getArmature "
	Bone\getArmature!


snippet Bone\getBoneData! "csxV3: Bone::getBoneData "
	Bone\getBoneData!


snippet Bone\create(str) "csxV3: Bone::create "
	Bone\create(${1:str})


snippet Bone\updateDisplayedColor(color3b) "csxV3: Bone::updateDisplayedColor "
	Bone\updateDisplayedColor(${1:color3b})


snippet Bone\setLocalZOrder(int) "csxV3: Bone::setLocalZOrder "
	Bone\setLocalZOrder(${1:int})


snippet Bone\getNodeToWorldTransform! "csxV3: Bone::getNodeToWorldTransform "
	Bone\getNodeToWorldTransform!


snippet Bone\update(float) "csxV3: Bone::update "
	Bone\update(${1:float})


snippet Bone\updateDisplayedOpacity(char) "csxV3: Bone::updateDisplayedOpacity "
	Bone\updateDisplayedOpacity(${1:char})


snippet BoneData\getDisplayData(int) "csxV3: BoneData::getDisplayData "
	BoneData\getDisplayData(${1:int})


snippet BoneData\init! "csxV3: BoneData::init "
	BoneData\init!


snippet BoneData\addDisplayData(displaydata) "csxV3: BoneData::addDisplayData "
	BoneData\addDisplayData(${1:displaydata})


snippet BoneData\create! "csxV3: BoneData::create "
	BoneData\create!


snippet Button\getTitleText! "csxV3: Button::getTitleText "
	Button\getTitleText!


snippet Button\setTitleFontSize(float) "csxV3: Button::setTitleFontSize "
	Button\setTitleFontSize(${1:float})


snippet Button\setScale9Enabled(bool) "csxV3: Button::setScale9Enabled "
	Button\setScale9Enabled(${1:bool})


snippet Button\getCapInsetsDisabledRenderer! "csxV3: Button::getCapInsetsDisabledRenderer "
	Button\getCapInsetsDisabledRenderer!


snippet Button\setTitleColor(color3b) "csxV3: Button::setTitleColor "
	Button\setTitleColor(${1:color3b})


snippet Button\setCapInsetsDisabledRenderer(rect) "csxV3: Button::setCapInsetsDisabledRenderer "
	Button\setCapInsetsDisabledRenderer(${1:rect})


snippet Button\setCapInsets(rect) "csxV3: Button::setCapInsets "
	Button\setCapInsets(${1:rect})


snippet Button\loadTextureDisabled(str\,texturerestype) "csxV3: Button::loadTextureDisabled "
	Button\loadTextureDisabled(${1:str}, ${2:texturerestype})


snippet Button\setTitleText(str) "csxV3: Button::setTitleText "
	Button\setTitleText(${1:str})


snippet Button\setCapInsetsNormalRenderer(rect) "csxV3: Button::setCapInsetsNormalRenderer "
	Button\setCapInsetsNormalRenderer(${1:rect})


snippet Button\loadTexturePressed(str\,texturerestype) "csxV3: Button::loadTexturePressed "
	Button\loadTexturePressed(${1:str}, ${2:texturerestype})


snippet Button\setTitleFontName(str) "csxV3: Button::setTitleFontName "
	Button\setTitleFontName(${1:str})


snippet Button\getCapInsetsNormalRenderer! "csxV3: Button::getCapInsetsNormalRenderer "
	Button\getCapInsetsNormalRenderer!


snippet Button\getCapInsetsPressedRenderer! "csxV3: Button::getCapInsetsPressedRenderer "
	Button\getCapInsetsPressedRenderer!


snippet Button\loadTextures(str\,str\,str\,texturerestype) "csxV3: Button::loadTextures "
	Button\loadTextures(${1:str}, ${2:str}, ${3:str}, ${4:texturerestype})


snippet Button\isScale9Enabled! "csxV3: Button::isScale9Enabled "
	Button\isScale9Enabled!


snippet Button\loadTextureNormal(str\,texturerestype) "csxV3: Button::loadTextureNormal "
	Button\loadTextureNormal(${1:str}, ${2:texturerestype})


snippet Button\setCapInsetsPressedRenderer(rect) "csxV3: Button::setCapInsetsPressedRenderer "
	Button\setCapInsetsPressedRenderer(${1:rect})


snippet Button\getTitleFontSize! "csxV3: Button::getTitleFontSize "
	Button\getTitleFontSize!


snippet Button\getTitleFontName! "csxV3: Button::getTitleFontName "
	Button\getTitleFontName!


snippet Button\getTitleColor! "csxV3: Button::getTitleColor "
	Button\getTitleColor!


snippet Button\setPressedActionEnabled(bool) "csxV3: Button::setPressedActionEnabled "
	Button\setPressedActionEnabled(${1:bool})


snippet Button\create(str\,str\,str\,texturerestype) "csxV3: Button::create "
	Button\create(${1:str}, ${2:str}, ${3:str}, ${4:texturerestype})


snippet Button\createInstance! "csxV3: Button::createInstance "
	Button\createInstance!


snippet Button\getVirtualRenderer! "csxV3: Button::getVirtualRenderer "
	Button\getVirtualRenderer!


snippet Button\getDescription! "csxV3: Button::getDescription "
	Button\getDescription!


snippet Button\getVirtualRendererSize! "csxV3: Button::getVirtualRendererSize "
	Button\getVirtualRendererSize!


snippet Button\ignoreContentAdaptWithSize(bool) "csxV3: Button::ignoreContentAdaptWithSize "
	Button\ignoreContentAdaptWithSize(${1:bool})


snippet CCBAnimationManager\moveAnimationsFromNode(node\,node) "csxV3: CCBAnimationManager::moveAnimationsFromNode "
	CCBAnimationManager\moveAnimationsFromNode(${1:node}, ${2:node})


snippet CCBAnimationManager\setAutoPlaySequenceId(int) "csxV3: CCBAnimationManager::setAutoPlaySequenceId "
	CCBAnimationManager\setAutoPlaySequenceId(${1:int})


snippet CCBAnimationManager\getDocumentCallbackNames! "csxV3: CCBAnimationManager::getDocumentCallbackNames "
	CCBAnimationManager\getDocumentCallbackNames!


snippet CCBAnimationManager\actionForSoundChannel(ccbsequenceproperty) "csxV3: CCBAnimationManager::actionForSoundChannel "
	CCBAnimationManager\actionForSoundChannel(${1:ccbsequenceproperty})


snippet CCBAnimationManager\setBaseValue(value\,node\,str) "csxV3: CCBAnimationManager::setBaseValue "
	CCBAnimationManager\setBaseValue(${1:value}, ${2:node}, ${3:str})


snippet CCBAnimationManager\getDocumentOutletNodes! "csxV3: CCBAnimationManager::getDocumentOutletNodes "
	CCBAnimationManager\getDocumentOutletNodes!


snippet CCBAnimationManager\getLastCompletedSequenceName! "csxV3: CCBAnimationManager::getLastCompletedSequenceName "
	CCBAnimationManager\getLastCompletedSequenceName!


snippet CCBAnimationManager\setRootNode(node) "csxV3: CCBAnimationManager::setRootNode "
	CCBAnimationManager\setRootNode(${1:node})


snippet CCBAnimationManager\runAnimationsForSequenceNamedTweenDuration(char\,float) "csxV3: CCBAnimationManager::runAnimationsForSequenceNamedTweenDuration "
	CCBAnimationManager\runAnimationsForSequenceNamedTweenDuration(${1:char}, ${2:float})


snippet CCBAnimationManager\addDocumentOutletName(str) "csxV3: CCBAnimationManager::addDocumentOutletName "
	CCBAnimationManager\addDocumentOutletName(${1:str})


snippet CCBAnimationManager\getSequences! "csxV3: CCBAnimationManager::getSequences "
	CCBAnimationManager\getSequences!


snippet CCBAnimationManager\getRootContainerSize! "csxV3: CCBAnimationManager::getRootContainerSize "
	CCBAnimationManager\getRootContainerSize!


snippet CCBAnimationManager\setDocumentControllerName(str) "csxV3: CCBAnimationManager::setDocumentControllerName "
	CCBAnimationManager\setDocumentControllerName(${1:str})


snippet CCBAnimationManager\setObject(ref\,node\,str) "csxV3: CCBAnimationManager::setObject "
	CCBAnimationManager\setObject(${1:ref}, ${2:node}, ${3:str})


snippet CCBAnimationManager\getContainerSize(node) "csxV3: CCBAnimationManager::getContainerSize "
	CCBAnimationManager\getContainerSize(${1:node})


snippet CCBAnimationManager\actionForCallbackChannel(ccbsequenceproperty) "csxV3: CCBAnimationManager::actionForCallbackChannel "
	CCBAnimationManager\actionForCallbackChannel(${1:ccbsequenceproperty})


snippet CCBAnimationManager\getDocumentOutletNames! "csxV3: CCBAnimationManager::getDocumentOutletNames "
	CCBAnimationManager\getDocumentOutletNames!


snippet CCBAnimationManager\addDocumentCallbackControlEvents(eventtype) "csxV3: CCBAnimationManager::addDocumentCallbackControlEvents "
	CCBAnimationManager\addDocumentCallbackControlEvents(${1:eventtype})


snippet CCBAnimationManager\init! "csxV3: CCBAnimationManager::init "
	CCBAnimationManager\init!


snippet CCBAnimationManager\getKeyframeCallbacks! "csxV3: CCBAnimationManager::getKeyframeCallbacks "
	CCBAnimationManager\getKeyframeCallbacks!


snippet CCBAnimationManager\getDocumentCallbackControlEvents! "csxV3: CCBAnimationManager::getDocumentCallbackControlEvents "
	CCBAnimationManager\getDocumentCallbackControlEvents!


snippet CCBAnimationManager\setRootContainerSize(size) "csxV3: CCBAnimationManager::setRootContainerSize "
	CCBAnimationManager\setRootContainerSize(${1:size})


snippet CCBAnimationManager\runAnimationsForSequenceIdTweenDuration(int\,float) "csxV3: CCBAnimationManager::runAnimationsForSequenceIdTweenDuration "
	CCBAnimationManager\runAnimationsForSequenceIdTweenDuration(${1:int}, ${2:float})


snippet CCBAnimationManager\getRunningSequenceName! "csxV3: CCBAnimationManager::getRunningSequenceName "
	CCBAnimationManager\getRunningSequenceName!


snippet CCBAnimationManager\getAutoPlaySequenceId! "csxV3: CCBAnimationManager::getAutoPlaySequenceId "
	CCBAnimationManager\getAutoPlaySequenceId!


snippet CCBAnimationManager\addDocumentCallbackName(str) "csxV3: CCBAnimationManager::addDocumentCallbackName "
	CCBAnimationManager\addDocumentCallbackName(${1:str})


snippet CCBAnimationManager\getRootNode! "csxV3: CCBAnimationManager::getRootNode "
	CCBAnimationManager\getRootNode!


snippet CCBAnimationManager\addDocumentOutletNode(node) "csxV3: CCBAnimationManager::addDocumentOutletNode "
	CCBAnimationManager\addDocumentOutletNode(${1:node})


snippet CCBAnimationManager\getSequenceDuration(char) "csxV3: CCBAnimationManager::getSequenceDuration "
	CCBAnimationManager\getSequenceDuration(${1:char})


snippet CCBAnimationManager\addDocumentCallbackNode(node) "csxV3: CCBAnimationManager::addDocumentCallbackNode "
	CCBAnimationManager\addDocumentCallbackNode(${1:node})


snippet CCBAnimationManager\runAnimationsForSequenceNamed(char) "csxV3: CCBAnimationManager::runAnimationsForSequenceNamed "
	CCBAnimationManager\runAnimationsForSequenceNamed(${1:char})


snippet CCBAnimationManager\getSequenceId(char) "csxV3: CCBAnimationManager::getSequenceId "
	CCBAnimationManager\getSequenceId(${1:char})


snippet CCBAnimationManager\getDocumentCallbackNodes! "csxV3: CCBAnimationManager::getDocumentCallbackNodes "
	CCBAnimationManager\getDocumentCallbackNodes!


snippet CCBAnimationManager\setSequences(array) "csxV3: CCBAnimationManager::setSequences "
	CCBAnimationManager\setSequences(${1:array})


snippet CCBAnimationManager\debug! "csxV3: CCBAnimationManager::debug "
	CCBAnimationManager\debug!


snippet CCBAnimationManager\getDocumentControllerName! "csxV3: CCBAnimationManager::getDocumentControllerName "
	CCBAnimationManager\getDocumentControllerName!


snippet CCBReader\addOwnerOutletName(str) "csxV3: CCBReader::addOwnerOutletName "
	CCBReader\addOwnerOutletName(${1:str})


snippet CCBReader\getOwnerCallbackNames! "csxV3: CCBReader::getOwnerCallbackNames "
	CCBReader\getOwnerCallbackNames!


snippet CCBReader\addDocumentCallbackControlEvents(eventtype) "csxV3: CCBReader::addDocumentCallbackControlEvents "
	CCBReader\addDocumentCallbackControlEvents(${1:eventtype})


snippet CCBReader\setCCBRootPath(char) "csxV3: CCBReader::setCCBRootPath "
	CCBReader\setCCBRootPath(${1:char})


snippet CCBReader\addOwnerOutletNode(node) "csxV3: CCBReader::addOwnerOutletNode "
	CCBReader\addOwnerOutletNode(${1:node})


snippet CCBReader\getOwnerCallbackNodes! "csxV3: CCBReader::getOwnerCallbackNodes "
	CCBReader\getOwnerCallbackNodes!


snippet CCBReader\readSoundKeyframesForSeq(ccbsequence) "csxV3: CCBReader::readSoundKeyframesForSeq "
	CCBReader\readSoundKeyframesForSeq(${1:ccbsequence})


snippet CCBReader\getCCBRootPath! "csxV3: CCBReader::getCCBRootPath "
	CCBReader\getCCBRootPath!


snippet CCBReader\getOwnerCallbackControlEvents! "csxV3: CCBReader::getOwnerCallbackControlEvents "
	CCBReader\getOwnerCallbackControlEvents!


snippet CCBReader\getOwnerOutletNodes! "csxV3: CCBReader::getOwnerOutletNodes "
	CCBReader\getOwnerOutletNodes!


snippet CCBReader\readUTF8! "csxV3: CCBReader::readUTF8 "
	CCBReader\readUTF8!


snippet CCBReader\addOwnerCallbackControlEvents(eventtype) "csxV3: CCBReader::addOwnerCallbackControlEvents "
	CCBReader\addOwnerCallbackControlEvents(${1:eventtype})


snippet CCBReader\getOwnerOutletNames! "csxV3: CCBReader::getOwnerOutletNames "
	CCBReader\getOwnerOutletNames!


snippet CCBReader\setAnimationManager(ccbanimationmanager) "csxV3: CCBReader::setAnimationManager "
	CCBReader\setAnimationManager(${1:ccbanimationmanager})


snippet CCBReader\readCallbackKeyframesForSeq(ccbsequence) "csxV3: CCBReader::readCallbackKeyframesForSeq "
	CCBReader\readCallbackKeyframesForSeq(${1:ccbsequence})


snippet CCBReader\getAnimationManagersForNodes! "csxV3: CCBReader::getAnimationManagersForNodes "
	CCBReader\getAnimationManagersForNodes!


snippet CCBReader\getNodesWithAnimationManagers! "csxV3: CCBReader::getNodesWithAnimationManagers "
	CCBReader\getNodesWithAnimationManagers!


snippet CCBReader\getAnimationManager! "csxV3: CCBReader::getAnimationManager "
	CCBReader\getAnimationManager!


snippet CCBReader\setResolutionScale(float) "csxV3: CCBReader::setResolutionScale "
	CCBReader\setResolutionScale(${1:float})


snippet CallFunc\execute! "csxV3: CallFunc::execute "
	CallFunc\execute!


snippet CallFunc\getTargetCallback! "csxV3: CallFunc::getTargetCallback "
	CallFunc\getTargetCallback!


snippet CallFunc\setTargetCallback(ref) "csxV3: CallFunc::setTargetCallback "
	CallFunc\setTargetCallback(${1:ref})


snippet CallFunc\clone! "csxV3: CallFunc::clone "
	CallFunc\clone!


snippet CallFunc\update(float) "csxV3: CallFunc::update "
	CallFunc\update(${1:float})


snippet CardinalSplineBy\startWithTarget(node) "csxV3: CardinalSplineBy::startWithTarget "
	CardinalSplineBy\startWithTarget(${1:node})


snippet CardinalSplineBy\clone! "csxV3: CardinalSplineBy::clone "
	CardinalSplineBy\clone!


snippet CardinalSplineBy\updatePosition(vec2) "csxV3: CardinalSplineBy::updatePosition "
	CardinalSplineBy\updatePosition(${1:vec2})


snippet CardinalSplineBy\reverse! "csxV3: CardinalSplineBy::reverse "
	CardinalSplineBy\reverse!


snippet CardinalSplineTo\getPoints! "csxV3: CardinalSplineTo::getPoints "
	CardinalSplineTo\getPoints!


snippet CardinalSplineTo\updatePosition(vec2) "csxV3: CardinalSplineTo::updatePosition "
	CardinalSplineTo\updatePosition(${1:vec2})


snippet CardinalSplineTo\initWithDuration(float\,pointarray\,float) "csxV3: CardinalSplineTo::initWithDuration "
	CardinalSplineTo\initWithDuration(${1:float}, ${2:pointarray}, ${3:float})


snippet CardinalSplineTo\startWithTarget(node) "csxV3: CardinalSplineTo::startWithTarget "
	CardinalSplineTo\startWithTarget(${1:node})


snippet CardinalSplineTo\clone! "csxV3: CardinalSplineTo::clone "
	CardinalSplineTo\clone!


snippet CardinalSplineTo\reverse! "csxV3: CardinalSplineTo::reverse "
	CardinalSplineTo\reverse!


snippet CardinalSplineTo\update(float) "csxV3: CardinalSplineTo::update "
	CardinalSplineTo\update(${1:float})


snippet CatmullRomBy\initWithDuration(float\,pointarray) "csxV3: CatmullRomBy::initWithDuration "
	CatmullRomBy\initWithDuration(${1:float}, ${2:pointarray})


snippet CatmullRomBy\clone! "csxV3: CatmullRomBy::clone "
	CatmullRomBy\clone!


snippet CatmullRomTo\initWithDuration(float\,pointarray) "csxV3: CatmullRomTo::initWithDuration "
	CatmullRomTo\initWithDuration(${1:float}, ${2:pointarray})


snippet CatmullRomTo\clone! "csxV3: CatmullRomTo::clone "
	CatmullRomTo\clone!


snippet CheckBox\getSelectedState! "csxV3: CheckBox::getSelectedState "
	CheckBox\getSelectedState!


snippet CheckBox\loadTextureBackGroundSelected(str\,texturerestype) "csxV3: CheckBox::loadTextureBackGroundSelected "
	CheckBox\loadTextureBackGroundSelected(${1:str}, ${2:texturerestype})


snippet CheckBox\loadTextureBackGroundDisabled(str\,texturerestype) "csxV3: CheckBox::loadTextureBackGroundDisabled "
	CheckBox\loadTextureBackGroundDisabled(${1:str}, ${2:texturerestype})


snippet CheckBox\addEventListener(func) "csxV3: CheckBox::addEventListener "
	CheckBox\addEventListener(${1:func})


snippet CheckBox\loadTextureFrontCross(str\,texturerestype) "csxV3: CheckBox::loadTextureFrontCross "
	CheckBox\loadTextureFrontCross(${1:str}, ${2:texturerestype})


snippet CheckBox\loadTextures(str\,str\,str\,str\,str\,texturerestype) "csxV3: CheckBox::loadTextures "
	CheckBox\loadTextures(${1:str}, ${2:str}, ${3:str}, ${4:str}, ${5:str}, ${6:texturerestype})


snippet CheckBox\loadTextureBackGround(str\,texturerestype) "csxV3: CheckBox::loadTextureBackGround "
	CheckBox\loadTextureBackGround(${1:str}, ${2:texturerestype})


snippet CheckBox\setSelectedState(bool) "csxV3: CheckBox::setSelectedState "
	CheckBox\setSelectedState(${1:bool})


snippet CheckBox\loadTextureFrontCrossDisabled(str\,texturerestype) "csxV3: CheckBox::loadTextureFrontCrossDisabled "
	CheckBox\loadTextureFrontCrossDisabled(${1:str}, ${2:texturerestype})


snippet CheckBox\create(str\,str\,str\,str\,str\,texturerestype) "csxV3: CheckBox::create "
	CheckBox\create(${1:str}, ${2:str}, ${3:str}, ${4:str}, ${5:str}, ${6:texturerestype})


snippet CheckBox\createInstance! "csxV3: CheckBox::createInstance "
	CheckBox\createInstance!


snippet CheckBox\getVirtualRenderer! "csxV3: CheckBox::getVirtualRenderer "
	CheckBox\getVirtualRenderer!


snippet CheckBox\getDescription! "csxV3: CheckBox::getDescription "
	CheckBox\getDescription!


snippet CheckBox\getVirtualRendererSize! "csxV3: CheckBox::getVirtualRendererSize "
	CheckBox\getVirtualRendererSize!


snippet ClippingNode\isInverted! "csxV3: ClippingNode::isInverted "
	ClippingNode\isInverted!


snippet ClippingNode\setInverted(bool) "csxV3: ClippingNode::setInverted "
	ClippingNode\setInverted(${1:bool})


snippet ClippingNode\setStencil(node) "csxV3: ClippingNode::setStencil "
	ClippingNode\setStencil(${1:node})


snippet ClippingNode\getAlphaThreshold! "csxV3: ClippingNode::getAlphaThreshold "
	ClippingNode\getAlphaThreshold!


snippet ClippingNode\getStencil! "csxV3: ClippingNode::getStencil "
	ClippingNode\getStencil!


snippet ClippingNode\setAlphaThreshold(float) "csxV3: ClippingNode::setAlphaThreshold "
	ClippingNode\setAlphaThreshold(${1:float})


snippet ComAttribute\getFloat(str\,float) "csxV3: ComAttribute::getFloat "
	ComAttribute\getFloat(${1:str}, ${2:float})


snippet ComAttribute\getString(str\,str) "csxV3: ComAttribute::getString "
	ComAttribute\getString(${1:str}, ${2:str})


snippet ComAttribute\setFloat(str\,float) "csxV3: ComAttribute::setFloat "
	ComAttribute\setFloat(${1:str}, ${2:float})


snippet ComAttribute\setString(str\,str) "csxV3: ComAttribute::setString "
	ComAttribute\setString(${1:str}, ${2:str})


snippet ComAttribute\getBool(str\,bool) "csxV3: ComAttribute::getBool "
	ComAttribute\getBool(${1:str}, ${2:bool})


snippet ComAttribute\setInt(str\,int) "csxV3: ComAttribute::setInt "
	ComAttribute\setInt(${1:str}, ${2:int})


snippet ComAttribute\parse(str) "csxV3: ComAttribute::parse "
	ComAttribute\parse(${1:str})


snippet ComAttribute\getInt(str\,int) "csxV3: ComAttribute::getInt "
	ComAttribute\getInt(${1:str}, ${2:int})


snippet ComAttribute\setBool(str\,bool) "csxV3: ComAttribute::setBool "
	ComAttribute\setBool(${1:str}, ${2:bool})


snippet ComAttribute\create! "csxV3: ComAttribute::create "
	ComAttribute\create!


snippet ComAttribute\createInstance! "csxV3: ComAttribute::createInstance "
	ComAttribute\createInstance!


snippet ComAttribute\init! "csxV3: ComAttribute::init "
	ComAttribute\init!


snippet ComAudio\stopAllEffects! "csxV3: ComAudio::stopAllEffects "
	ComAudio\stopAllEffects!


snippet ComAudio\getEffectsVolume! "csxV3: ComAudio::getEffectsVolume "
	ComAudio\getEffectsVolume!


snippet ComAudio\stopEffect(int) "csxV3: ComAudio::stopEffect "
	ComAudio\stopEffect(${1:int})


snippet ComAudio\getBackgroundMusicVolume! "csxV3: ComAudio::getBackgroundMusicVolume "
	ComAudio\getBackgroundMusicVolume!


snippet ComAudio\willPlayBackgroundMusic! "csxV3: ComAudio::willPlayBackgroundMusic "
	ComAudio\willPlayBackgroundMusic!


snippet ComAudio\setBackgroundMusicVolume(float) "csxV3: ComAudio::setBackgroundMusicVolume "
	ComAudio\setBackgroundMusicVolume(${1:float})


snippet ComAudio\end! "csxV3: ComAudio::end "
	ComAudio\end!


snippet ComAudio\stopBackgroundMusic(bool) "csxV3: ComAudio::stopBackgroundMusic "
	ComAudio\stopBackgroundMusic(${1:bool})


snippet ComAudio\pauseBackgroundMusic! "csxV3: ComAudio::pauseBackgroundMusic "
	ComAudio\pauseBackgroundMusic!


snippet ComAudio\isBackgroundMusicPlaying! "csxV3: ComAudio::isBackgroundMusicPlaying "
	ComAudio\isBackgroundMusicPlaying!


snippet ComAudio\isLoop! "csxV3: ComAudio::isLoop "
	ComAudio\isLoop!


snippet ComAudio\resumeAllEffects! "csxV3: ComAudio::resumeAllEffects "
	ComAudio\resumeAllEffects!


snippet ComAudio\pauseAllEffects! "csxV3: ComAudio::pauseAllEffects "
	ComAudio\pauseAllEffects!


snippet ComAudio\preloadBackgroundMusic(char) "csxV3: ComAudio::preloadBackgroundMusic "
	ComAudio\preloadBackgroundMusic(${1:char})


snippet ComAudio\playBackgroundMusic(char\,bool) "csxV3: ComAudio::playBackgroundMusic "
	ComAudio\playBackgroundMusic(${1:char}, ${2:bool})


snippet ComAudio\playEffect(char\,bool) "csxV3: ComAudio::playEffect "
	ComAudio\playEffect(${1:char}, ${2:bool})


snippet ComAudio\preloadEffect(char) "csxV3: ComAudio::preloadEffect "
	ComAudio\preloadEffect(${1:char})


snippet ComAudio\setLoop(bool) "csxV3: ComAudio::setLoop "
	ComAudio\setLoop(${1:bool})


snippet ComAudio\unloadEffect(char) "csxV3: ComAudio::unloadEffect "
	ComAudio\unloadEffect(${1:char})


snippet ComAudio\rewindBackgroundMusic! "csxV3: ComAudio::rewindBackgroundMusic "
	ComAudio\rewindBackgroundMusic!


snippet ComAudio\pauseEffect(int) "csxV3: ComAudio::pauseEffect "
	ComAudio\pauseEffect(${1:int})


snippet ComAudio\resumeBackgroundMusic! "csxV3: ComAudio::resumeBackgroundMusic "
	ComAudio\resumeBackgroundMusic!


snippet ComAudio\setFile(char) "csxV3: ComAudio::setFile "
	ComAudio\setFile(${1:char})


snippet ComAudio\setEffectsVolume(float) "csxV3: ComAudio::setEffectsVolume "
	ComAudio\setEffectsVolume(${1:float})


snippet ComAudio\getFile! "csxV3: ComAudio::getFile "
	ComAudio\getFile!


snippet ComAudio\resumeEffect(int) "csxV3: ComAudio::resumeEffect "
	ComAudio\resumeEffect(${1:int})


snippet ComAudio\create! "csxV3: ComAudio::create "
	ComAudio\create!


snippet ComAudio\createInstance! "csxV3: ComAudio::createInstance "
	ComAudio\createInstance!


snippet ComAudio\setEnabled(bool) "csxV3: ComAudio::setEnabled "
	ComAudio\setEnabled(${1:bool})


snippet ComAudio\isEnabled! "csxV3: ComAudio::isEnabled "
	ComAudio\isEnabled!


snippet ComAudio\serialize(void) "csxV3: ComAudio::serialize "
	ComAudio\serialize(${1:void})


snippet ComController\create! "csxV3: ComController::create "
	ComController\create!


snippet ComController\createInstance! "csxV3: ComController::createInstance "
	ComController\createInstance!


snippet ComController\setEnabled(bool) "csxV3: ComController::setEnabled "
	ComController\setEnabled(${1:bool})


snippet ComController\isEnabled! "csxV3: ComController::isEnabled "
	ComController\isEnabled!


snippet ComController\update(float) "csxV3: ComController::update "
	ComController\update(${1:float})


snippet ComController\init! "csxV3: ComController::init "
	ComController\init!


snippet ComRender\setNode(node) "csxV3: ComRender::setNode "
	ComRender\setNode(${1:node})


snippet ComRender\getNode! "csxV3: ComRender::getNode "
	ComRender\getNode!


snippet ComRender\create(node\,char) "csxV3: ComRender::create "
	ComRender\create(${1:node}, ${2:char})


snippet ComRender\createInstance! "csxV3: ComRender::createInstance "
	ComRender\createInstance!


snippet Component\setEnabled(bool) "csxV3: Component::setEnabled "
	Component\setEnabled(${1:bool})


snippet Component\setName(str) "csxV3: Component::setName "
	Component\setName(${1:str})


snippet Component\isEnabled! "csxV3: Component::isEnabled "
	Component\isEnabled!


snippet Component\update(float) "csxV3: Component::update "
	Component\update(${1:float})


snippet Component\getOwner! "csxV3: Component::getOwner "
	Component\getOwner!


snippet Component\init! "csxV3: Component::init "
	Component\init!


snippet Component\setOwner(node) "csxV3: Component::setOwner "
	Component\setOwner(${1:node})


snippet Component\getName! "csxV3: Component::getName "
	Component\getName!


snippet Console\stop! "csxV3: Console::stop "
	Console\stop!


snippet Console\listenOnTCP(int) "csxV3: Console::listenOnTCP "
	Console\listenOnTCP(${1:int})


snippet Console\listenOnFileDescriptor(int) "csxV3: Console::listenOnFileDescriptor "
	Console\listenOnFileDescriptor(${1:int})


snippet ContourData\init! "csxV3: ContourData::init "
	ContourData\init!


snippet ContourData\addVertex(vec2) "csxV3: ContourData::addVertex "
	ContourData\addVertex(${1:vec2})


snippet ContourData\create! "csxV3: ContourData::create "
	ContourData\create!


snippet Control\setEnabled(bool) "csxV3: Control::setEnabled "
	Control\setEnabled(${1:bool})


snippet Control\onTouchMoved(touch\,event) "csxV3: Control::onTouchMoved "
	Control\onTouchMoved(${1:touch}, ${2:event})


snippet Control\getState! "csxV3: Control::getState "
	Control\getState!


snippet Control\onTouchEnded(touch\,event) "csxV3: Control::onTouchEnded "
	Control\onTouchEnded(${1:touch}, ${2:event})


snippet Control\sendActionsForControlEvents(eventtype) "csxV3: Control::sendActionsForControlEvents "
	Control\sendActionsForControlEvents(${1:eventtype})


snippet Control\setSelected(bool) "csxV3: Control::setSelected "
	Control\setSelected(${1:bool})


snippet Control\isEnabled! "csxV3: Control::isEnabled "
	Control\isEnabled!


snippet Control\onTouchCancelled(touch\,event) "csxV3: Control::onTouchCancelled "
	Control\onTouchCancelled(${1:touch}, ${2:event})


snippet Control\needsLayout! "csxV3: Control::needsLayout "
	Control\needsLayout!


snippet Control\onTouchBegan(touch\,event) "csxV3: Control::onTouchBegan "
	Control\onTouchBegan(${1:touch}, ${2:event})


snippet Control\hasVisibleParents! "csxV3: Control::hasVisibleParents "
	Control\hasVisibleParents!


snippet Control\isSelected! "csxV3: Control::isSelected "
	Control\isSelected!


snippet Control\isTouchInside(touch) "csxV3: Control::isTouchInside "
	Control\isTouchInside(${1:touch})


snippet Control\setHighlighted(bool) "csxV3: Control::setHighlighted "
	Control\setHighlighted(${1:bool})


snippet Control\getTouchLocation(touch) "csxV3: Control::getTouchLocation "
	Control\getTouchLocation(${1:touch})


snippet Control\isHighlighted! "csxV3: Control::isHighlighted "
	Control\isHighlighted!


snippet Control\create! "csxV3: Control::create "
	Control\create!


snippet Control\isOpacityModifyRGB! "csxV3: Control::isOpacityModifyRGB "
	Control\isOpacityModifyRGB!


snippet ControlButton\isPushed! "csxV3: ControlButton::isPushed "
	ControlButton\isPushed!


snippet ControlButton\setSelected(bool) "csxV3: ControlButton::setSelected "
	ControlButton\setSelected(${1:bool})


snippet ControlButton\setTitleLabelForState(node\,state) "csxV3: ControlButton::setTitleLabelForState "
	ControlButton\setTitleLabelForState(${1:node}, ${2:state})


snippet ControlButton\setAdjustBackgroundImage(bool) "csxV3: ControlButton::setAdjustBackgroundImage "
	ControlButton\setAdjustBackgroundImage(${1:bool})


snippet ControlButton\setHighlighted(bool) "csxV3: ControlButton::setHighlighted "
	ControlButton\setHighlighted(${1:bool})


snippet ControlButton\setZoomOnTouchDown(bool) "csxV3: ControlButton::setZoomOnTouchDown "
	ControlButton\setZoomOnTouchDown(${1:bool})


snippet ControlButton\setTitleForState(str\,state) "csxV3: ControlButton::setTitleForState "
	ControlButton\setTitleForState(${1:str}, ${2:state})


snippet ControlButton\setLabelAnchorPoint(vec2) "csxV3: ControlButton::setLabelAnchorPoint "
	ControlButton\setLabelAnchorPoint(${1:vec2})


snippet ControlButton\getLabelAnchorPoint! "csxV3: ControlButton::getLabelAnchorPoint "
	ControlButton\getLabelAnchorPoint!


snippet ControlButton\getTitleTTFSizeForState(state) "csxV3: ControlButton::getTitleTTFSizeForState "
	ControlButton\getTitleTTFSizeForState(${1:state})


snippet ControlButton\setTitleTTFForState(str\,state) "csxV3: ControlButton::setTitleTTFForState "
	ControlButton\setTitleTTFForState(${1:str}, ${2:state})


snippet ControlButton\setTitleTTFSizeForState(float\,state) "csxV3: ControlButton::setTitleTTFSizeForState "
	ControlButton\setTitleTTFSizeForState(${1:float}, ${2:state})


snippet ControlButton\setTitleLabel(node) "csxV3: ControlButton::setTitleLabel "
	ControlButton\setTitleLabel(${1:node})


snippet ControlButton\setPreferredSize(size) "csxV3: ControlButton::setPreferredSize "
	ControlButton\setPreferredSize(${1:size})


snippet ControlButton\getCurrentTitleColor! "csxV3: ControlButton::getCurrentTitleColor "
	ControlButton\getCurrentTitleColor!


snippet ControlButton\setEnabled(bool) "csxV3: ControlButton::setEnabled "
	ControlButton\setEnabled(${1:bool})


snippet ControlButton\getBackgroundSpriteForState(state) "csxV3: ControlButton::getBackgroundSpriteForState "
	ControlButton\getBackgroundSpriteForState(${1:state})


snippet ControlButton\getHorizontalOrigin! "csxV3: ControlButton::getHorizontalOrigin "
	ControlButton\getHorizontalOrigin!


snippet ControlButton\needsLayout! "csxV3: ControlButton::needsLayout "
	ControlButton\needsLayout!


snippet ControlButton\getCurrentTitle! "csxV3: ControlButton::getCurrentTitle "
	ControlButton\getCurrentTitle!


snippet ControlButton\getScaleRatio! "csxV3: ControlButton::getScaleRatio "
	ControlButton\getScaleRatio!


snippet ControlButton\getTitleTTFForState(state) "csxV3: ControlButton::getTitleTTFForState "
	ControlButton\getTitleTTFForState(${1:state})


snippet ControlButton\getBackgroundSprite! "csxV3: ControlButton::getBackgroundSprite "
	ControlButton\getBackgroundSprite!


snippet ControlButton\getTitleColorForState(state) "csxV3: ControlButton::getTitleColorForState "
	ControlButton\getTitleColorForState(${1:state})


snippet ControlButton\setTitleColorForState(color3b\,state) "csxV3: ControlButton::setTitleColorForState "
	ControlButton\setTitleColorForState(${1:color3b}, ${2:state})


snippet ControlButton\doesAdjustBackgroundImage! "csxV3: ControlButton::doesAdjustBackgroundImage "
	ControlButton\doesAdjustBackgroundImage!


snippet ControlButton\setBackgroundSpriteFrameForState(spriteframe\,state) "csxV3: ControlButton::setBackgroundSpriteFrameForState "
	ControlButton\setBackgroundSpriteFrameForState(${1:spriteframe}, ${2:state})


snippet ControlButton\setBackgroundSpriteForState(scale9sprite\,state) "csxV3: ControlButton::setBackgroundSpriteForState "
	ControlButton\setBackgroundSpriteForState(${1:scale9sprite}, ${2:state})


snippet ControlButton\setScaleRatio(float) "csxV3: ControlButton::setScaleRatio "
	ControlButton\setScaleRatio(${1:float})


snippet ControlButton\setBackgroundSprite(scale9sprite) "csxV3: ControlButton::setBackgroundSprite "
	ControlButton\setBackgroundSprite(${1:scale9sprite})


snippet ControlButton\getTitleLabel! "csxV3: ControlButton::getTitleLabel "
	ControlButton\getTitleLabel!


snippet ControlButton\getPreferredSize! "csxV3: ControlButton::getPreferredSize "
	ControlButton\getPreferredSize!


snippet ControlButton\getVerticalMargin! "csxV3: ControlButton::getVerticalMargin "
	ControlButton\getVerticalMargin!


snippet ControlButton\getTitleLabelForState(state) "csxV3: ControlButton::getTitleLabelForState "
	ControlButton\getTitleLabelForState(${1:state})


snippet ControlButton\setMargins(int\,int) "csxV3: ControlButton::setMargins "
	ControlButton\setMargins(${1:int}, ${2:int})


snippet ControlButton\setTitleBMFontForState(str\,state) "csxV3: ControlButton::setTitleBMFontForState "
	ControlButton\setTitleBMFontForState(${1:str}, ${2:state})


snippet ControlButton\getTitleBMFontForState(state) "csxV3: ControlButton::getTitleBMFontForState "
	ControlButton\getTitleBMFontForState(${1:state})


snippet ControlButton\getZoomOnTouchDown! "csxV3: ControlButton::getZoomOnTouchDown "
	ControlButton\getZoomOnTouchDown!


snippet ControlButton\getTitleForState(state) "csxV3: ControlButton::getTitleForState "
	ControlButton\getTitleForState(${1:state})


snippet ControlButton\create(str\,str\,float) "csxV3: ControlButton::create "
	ControlButton\create(${1:str}, ${2:str}, ${3:float})


snippet ControlButton\onTouchMoved(touch\,event) "csxV3: ControlButton::onTouchMoved "
	ControlButton\onTouchMoved(${1:touch}, ${2:event})


snippet ControlButton\onTouchEnded(touch\,event) "csxV3: ControlButton::onTouchEnded "
	ControlButton\onTouchEnded(${1:touch}, ${2:event})


snippet ControlButton\setColor(color3b) "csxV3: ControlButton::setColor "
	ControlButton\setColor(${1:color3b})


snippet ControlButton\onTouchCancelled(touch\,event) "csxV3: ControlButton::onTouchCancelled "
	ControlButton\onTouchCancelled(${1:touch}, ${2:event})


snippet ControlButton\setOpacity(char) "csxV3: ControlButton::setOpacity "
	ControlButton\setOpacity(${1:char})


snippet ControlButton\updateDisplayedOpacity(char) "csxV3: ControlButton::updateDisplayedOpacity "
	ControlButton\updateDisplayedOpacity(${1:char})


snippet ControlButton\updateDisplayedColor(color3b) "csxV3: ControlButton::updateDisplayedColor "
	ControlButton\updateDisplayedColor(${1:color3b})


snippet ControlColourPicker\setEnabled(bool) "csxV3: ControlColourPicker::setEnabled "
	ControlColourPicker\setEnabled(${1:bool})


snippet ControlColourPicker\getHuePicker! "csxV3: ControlColourPicker::getHuePicker "
	ControlColourPicker\getHuePicker!


snippet ControlColourPicker\setColor(color3b) "csxV3: ControlColourPicker::setColor "
	ControlColourPicker\setColor(${1:color3b})


snippet ControlColourPicker\hueSliderValueChanged(ref\,eventtype) "csxV3: ControlColourPicker::hueSliderValueChanged "
	ControlColourPicker\hueSliderValueChanged(${1:ref}, ${2:eventtype})


snippet ControlColourPicker\getcolourPicker! "csxV3: ControlColourPicker::getcolourPicker "
	ControlColourPicker\getcolourPicker!


snippet ControlColourPicker\setBackground(sprite) "csxV3: ControlColourPicker::setBackground "
	ControlColourPicker\setBackground(${1:sprite})


snippet ControlColourPicker\init! "csxV3: ControlColourPicker::init "
	ControlColourPicker\init!


snippet ControlColourPicker\setcolourPicker(controlsaturationbrightnesspicker) "csxV3: ControlColourPicker::setcolourPicker "
	ControlColourPicker\setcolourPicker(${1:controlsaturationbrightnesspicker})


snippet ControlColourPicker\colourSliderValueChanged(ref\,eventtype) "csxV3: ControlColourPicker::colourSliderValueChanged "
	ControlColourPicker\colourSliderValueChanged(${1:ref}, ${2:eventtype})


snippet ControlColourPicker\setHuePicker(controlhuepicker) "csxV3: ControlColourPicker::setHuePicker "
	ControlColourPicker\setHuePicker(${1:controlhuepicker})


snippet ControlColourPicker\getBackground! "csxV3: ControlColourPicker::getBackground "
	ControlColourPicker\getBackground!


snippet ControlColourPicker\create! "csxV3: ControlColourPicker::create "
	ControlColourPicker\create!


snippet ControlHuePicker\setEnabled(bool) "csxV3: ControlHuePicker::setEnabled "
	ControlHuePicker\setEnabled(${1:bool})


snippet ControlHuePicker\initWithTargetAndPos(node\,vec2) "csxV3: ControlHuePicker::initWithTargetAndPos "
	ControlHuePicker\initWithTargetAndPos(${1:node}, ${2:vec2})


snippet ControlHuePicker\setHue(float) "csxV3: ControlHuePicker::setHue "
	ControlHuePicker\setHue(${1:float})


snippet ControlHuePicker\getStartPos! "csxV3: ControlHuePicker::getStartPos "
	ControlHuePicker\getStartPos!


snippet ControlHuePicker\getHue! "csxV3: ControlHuePicker::getHue "
	ControlHuePicker\getHue!


snippet ControlHuePicker\getSlider! "csxV3: ControlHuePicker::getSlider "
	ControlHuePicker\getSlider!


snippet ControlHuePicker\setBackground(sprite) "csxV3: ControlHuePicker::setBackground "
	ControlHuePicker\setBackground(${1:sprite})


snippet ControlHuePicker\setHuePercentage(float) "csxV3: ControlHuePicker::setHuePercentage "
	ControlHuePicker\setHuePercentage(${1:float})


snippet ControlHuePicker\getBackground! "csxV3: ControlHuePicker::getBackground "
	ControlHuePicker\getBackground!


snippet ControlHuePicker\getHuePercentage! "csxV3: ControlHuePicker::getHuePercentage "
	ControlHuePicker\getHuePercentage!


snippet ControlHuePicker\setSlider(sprite) "csxV3: ControlHuePicker::setSlider "
	ControlHuePicker\setSlider(${1:sprite})


snippet ControlHuePicker\create(node\,vec2) "csxV3: ControlHuePicker::create "
	ControlHuePicker\create(${1:node}, ${2:vec2})


snippet ControlHuePicker\onTouchMoved(touch\,event) "csxV3: ControlHuePicker::onTouchMoved "
	ControlHuePicker\onTouchMoved(${1:touch}, ${2:event})


snippet ControlHuePicker\onTouchBegan(touch\,event) "csxV3: ControlHuePicker::onTouchBegan "
	ControlHuePicker\onTouchBegan(${1:touch}, ${2:event})


snippet ControlPotentiometer\setPreviousLocation(vec2) "csxV3: ControlPotentiometer::setPreviousLocation "
	ControlPotentiometer\setPreviousLocation(${1:vec2})


snippet ControlPotentiometer\setValue(float) "csxV3: ControlPotentiometer::setValue "
	ControlPotentiometer\setValue(${1:float})


snippet ControlPotentiometer\getProgressTimer! "csxV3: ControlPotentiometer::getProgressTimer "
	ControlPotentiometer\getProgressTimer!


snippet ControlPotentiometer\getMaximumValue! "csxV3: ControlPotentiometer::getMaximumValue "
	ControlPotentiometer\getMaximumValue!


snippet ControlPotentiometer\angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(vec2\,vec2\,vec2\,vec2) "csxV3: ControlPotentiometer::angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint "
	ControlPotentiometer\angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(${1:vec2}, ${2:vec2}, ${3:vec2}, ${4:vec2})


snippet ControlPotentiometer\potentiometerBegan(vec2) "csxV3: ControlPotentiometer::potentiometerBegan "
	ControlPotentiometer\potentiometerBegan(${1:vec2})


snippet ControlPotentiometer\setMaximumValue(float) "csxV3: ControlPotentiometer::setMaximumValue "
	ControlPotentiometer\setMaximumValue(${1:float})


snippet ControlPotentiometer\getMinimumValue! "csxV3: ControlPotentiometer::getMinimumValue "
	ControlPotentiometer\getMinimumValue!


snippet ControlPotentiometer\setThumbSprite(sprite) "csxV3: ControlPotentiometer::setThumbSprite "
	ControlPotentiometer\setThumbSprite(${1:sprite})


snippet ControlPotentiometer\getValue! "csxV3: ControlPotentiometer::getValue "
	ControlPotentiometer\getValue!


snippet ControlPotentiometer\getPreviousLocation! "csxV3: ControlPotentiometer::getPreviousLocation "
	ControlPotentiometer\getPreviousLocation!


snippet ControlPotentiometer\distanceBetweenPointAndPoint(vec2\,vec2) "csxV3: ControlPotentiometer::distanceBetweenPointAndPoint "
	ControlPotentiometer\distanceBetweenPointAndPoint(${1:vec2}, ${2:vec2})


snippet ControlPotentiometer\potentiometerEnded(vec2) "csxV3: ControlPotentiometer::potentiometerEnded "
	ControlPotentiometer\potentiometerEnded(${1:vec2})


snippet ControlPotentiometer\setProgressTimer(progresstimer) "csxV3: ControlPotentiometer::setProgressTimer "
	ControlPotentiometer\setProgressTimer(${1:progresstimer})


snippet ControlPotentiometer\setMinimumValue(float) "csxV3: ControlPotentiometer::setMinimumValue "
	ControlPotentiometer\setMinimumValue(${1:float})


snippet ControlPotentiometer\getThumbSprite! "csxV3: ControlPotentiometer::getThumbSprite "
	ControlPotentiometer\getThumbSprite!


snippet ControlPotentiometer\initWithTrackSprite_ProgressTimer_ThumbSprite(sprite\,progresstimer\,sprite) "csxV3: ControlPotentiometer::initWithTrackSprite_ProgressTimer_ThumbSprite "
	ControlPotentiometer\initWithTrackSprite_ProgressTimer_ThumbSprite(${1:sprite}, ${2:progresstimer}, ${3:sprite})


snippet ControlPotentiometer\potentiometerMoved(vec2) "csxV3: ControlPotentiometer::potentiometerMoved "
	ControlPotentiometer\potentiometerMoved(${1:vec2})


snippet ControlPotentiometer\create(char\,char\,char) "csxV3: ControlPotentiometer::create "
	ControlPotentiometer\create(${1:char}, ${2:char}, ${3:char})


snippet ControlPotentiometer\isTouchInside(touch) "csxV3: ControlPotentiometer::isTouchInside "
	ControlPotentiometer\isTouchInside(${1:touch})


snippet ControlPotentiometer\setEnabled(bool) "csxV3: ControlPotentiometer::setEnabled "
	ControlPotentiometer\setEnabled(${1:bool})


snippet ControlPotentiometer\onTouchMoved(touch\,event) "csxV3: ControlPotentiometer::onTouchMoved "
	ControlPotentiometer\onTouchMoved(${1:touch}, ${2:event})


snippet ControlPotentiometer\onTouchEnded(touch\,event) "csxV3: ControlPotentiometer::onTouchEnded "
	ControlPotentiometer\onTouchEnded(${1:touch}, ${2:event})


snippet ControlPotentiometer\onTouchBegan(touch\,event) "csxV3: ControlPotentiometer::onTouchBegan "
	ControlPotentiometer\onTouchBegan(${1:touch}, ${2:event})


snippet ControlSaturationBrightnessPicker\getShadow! "csxV3: ControlSaturationBrightnessPicker::getShadow "
	ControlSaturationBrightnessPicker\getShadow!


snippet ControlSaturationBrightnessPicker\initWithTargetAndPos(node\,vec2) "csxV3: ControlSaturationBrightnessPicker::initWithTargetAndPos "
	ControlSaturationBrightnessPicker\initWithTargetAndPos(${1:node}, ${2:vec2})


snippet ControlSaturationBrightnessPicker\getStartPos! "csxV3: ControlSaturationBrightnessPicker::getStartPos "
	ControlSaturationBrightnessPicker\getStartPos!


snippet ControlSaturationBrightnessPicker\getOverlay! "csxV3: ControlSaturationBrightnessPicker::getOverlay "
	ControlSaturationBrightnessPicker\getOverlay!


snippet ControlSaturationBrightnessPicker\setEnabled(bool) "csxV3: ControlSaturationBrightnessPicker::setEnabled "
	ControlSaturationBrightnessPicker\setEnabled(${1:bool})


snippet ControlSaturationBrightnessPicker\getSlider! "csxV3: ControlSaturationBrightnessPicker::getSlider "
	ControlSaturationBrightnessPicker\getSlider!


snippet ControlSaturationBrightnessPicker\getBackground! "csxV3: ControlSaturationBrightnessPicker::getBackground "
	ControlSaturationBrightnessPicker\getBackground!


snippet ControlSaturationBrightnessPicker\getSaturation! "csxV3: ControlSaturationBrightnessPicker::getSaturation "
	ControlSaturationBrightnessPicker\getSaturation!


snippet ControlSaturationBrightnessPicker\getBrightness! "csxV3: ControlSaturationBrightnessPicker::getBrightness "
	ControlSaturationBrightnessPicker\getBrightness!


snippet ControlSaturationBrightnessPicker\create(node\,vec2) "csxV3: ControlSaturationBrightnessPicker::create "
	ControlSaturationBrightnessPicker\create(${1:node}, ${2:vec2})


snippet ControlSlider\getSelectedThumbSprite! "csxV3: ControlSlider::getSelectedThumbSprite "
	ControlSlider\getSelectedThumbSprite!


snippet ControlSlider\locationFromTouch(touch) "csxV3: ControlSlider::locationFromTouch "
	ControlSlider\locationFromTouch(${1:touch})


snippet ControlSlider\setSelectedThumbSprite(sprite) "csxV3: ControlSlider::setSelectedThumbSprite "
	ControlSlider\setSelectedThumbSprite(${1:sprite})


snippet ControlSlider\setProgressSprite(sprite) "csxV3: ControlSlider::setProgressSprite "
	ControlSlider\setProgressSprite(${1:sprite})


snippet ControlSlider\getMaximumAllowedValue! "csxV3: ControlSlider::getMaximumAllowedValue "
	ControlSlider\getMaximumAllowedValue!


snippet ControlSlider\getMinimumAllowedValue! "csxV3: ControlSlider::getMinimumAllowedValue "
	ControlSlider\getMinimumAllowedValue!


snippet ControlSlider\getMinimumValue! "csxV3: ControlSlider::getMinimumValue "
	ControlSlider\getMinimumValue!


snippet ControlSlider\setThumbSprite(sprite) "csxV3: ControlSlider::setThumbSprite "
	ControlSlider\setThumbSprite(${1:sprite})


snippet ControlSlider\setMinimumValue(float) "csxV3: ControlSlider::setMinimumValue "
	ControlSlider\setMinimumValue(${1:float})


snippet ControlSlider\setMinimumAllowedValue(float) "csxV3: ControlSlider::setMinimumAllowedValue "
	ControlSlider\setMinimumAllowedValue(${1:float})


snippet ControlSlider\setEnabled(bool) "csxV3: ControlSlider::setEnabled "
	ControlSlider\setEnabled(${1:bool})


snippet ControlSlider\setValue(float) "csxV3: ControlSlider::setValue "
	ControlSlider\setValue(${1:float})


snippet ControlSlider\setMaximumValue(float) "csxV3: ControlSlider::setMaximumValue "
	ControlSlider\setMaximumValue(${1:float})


snippet ControlSlider\needsLayout! "csxV3: ControlSlider::needsLayout "
	ControlSlider\needsLayout!


snippet ControlSlider\getBackgroundSprite! "csxV3: ControlSlider::getBackgroundSprite "
	ControlSlider\getBackgroundSprite!


snippet ControlSlider\initWithSprites(sprite\,sprite\,sprite\,sprite) "csxV3: ControlSlider::initWithSprites "
	ControlSlider\initWithSprites(${1:sprite}, ${2:sprite}, ${3:sprite}, ${4:sprite})


snippet ControlSlider\getMaximumValue! "csxV3: ControlSlider::getMaximumValue "
	ControlSlider\getMaximumValue!


snippet ControlSlider\isTouchInside(touch) "csxV3: ControlSlider::isTouchInside "
	ControlSlider\isTouchInside(${1:touch})


snippet ControlSlider\getValue! "csxV3: ControlSlider::getValue "
	ControlSlider\getValue!


snippet ControlSlider\getThumbSprite! "csxV3: ControlSlider::getThumbSprite "
	ControlSlider\getThumbSprite!


snippet ControlSlider\getProgressSprite! "csxV3: ControlSlider::getProgressSprite "
	ControlSlider\getProgressSprite!


snippet ControlSlider\setBackgroundSprite(sprite) "csxV3: ControlSlider::setBackgroundSprite "
	ControlSlider\setBackgroundSprite(${1:sprite})


snippet ControlSlider\setMaximumAllowedValue(float) "csxV3: ControlSlider::setMaximumAllowedValue "
	ControlSlider\setMaximumAllowedValue(${1:float})


snippet ControlSlider\create(sprite\,sprite\,sprite\,sprite) "csxV3: ControlSlider::create "
	ControlSlider\create(${1:sprite}, ${2:sprite}, ${3:sprite}, ${4:sprite})


snippet ControlStepper\setMinusSprite(sprite) "csxV3: ControlStepper::setMinusSprite "
	ControlStepper\setMinusSprite(${1:sprite})


snippet ControlStepper\getMinusLabel! "csxV3: ControlStepper::getMinusLabel "
	ControlStepper\getMinusLabel!


snippet ControlStepper\setWraps(bool) "csxV3: ControlStepper::setWraps "
	ControlStepper\setWraps(${1:bool})


snippet ControlStepper\isContinuous! "csxV3: ControlStepper::isContinuous "
	ControlStepper\isContinuous!


snippet ControlStepper\getMinusSprite! "csxV3: ControlStepper::getMinusSprite "
	ControlStepper\getMinusSprite!


snippet ControlStepper\updateLayoutUsingTouchLocation(vec2) "csxV3: ControlStepper::updateLayoutUsingTouchLocation "
	ControlStepper\updateLayoutUsingTouchLocation(${1:vec2})


snippet ControlStepper\setValueWithSendingEvent(double\,bool) "csxV3: ControlStepper::setValueWithSendingEvent "
	ControlStepper\setValueWithSendingEvent(${1:double}, ${2:bool})


snippet ControlStepper\getPlusLabel! "csxV3: ControlStepper::getPlusLabel "
	ControlStepper\getPlusLabel!


snippet ControlStepper\stopAutorepeat! "csxV3: ControlStepper::stopAutorepeat "
	ControlStepper\stopAutorepeat!


snippet ControlStepper\setMinimumValue(double) "csxV3: ControlStepper::setMinimumValue "
	ControlStepper\setMinimumValue(${1:double})


snippet ControlStepper\getPlusSprite! "csxV3: ControlStepper::getPlusSprite "
	ControlStepper\getPlusSprite!


snippet ControlStepper\setPlusSprite(sprite) "csxV3: ControlStepper::setPlusSprite "
	ControlStepper\setPlusSprite(${1:sprite})


snippet ControlStepper\setMinusLabel(label) "csxV3: ControlStepper::setMinusLabel "
	ControlStepper\setMinusLabel(${1:label})


snippet ControlStepper\setValue(double) "csxV3: ControlStepper::setValue "
	ControlStepper\setValue(${1:double})


snippet ControlStepper\setStepValue(double) "csxV3: ControlStepper::setStepValue "
	ControlStepper\setStepValue(${1:double})


snippet ControlStepper\setMaximumValue(double) "csxV3: ControlStepper::setMaximumValue "
	ControlStepper\setMaximumValue(${1:double})


snippet ControlStepper\update(float) "csxV3: ControlStepper::update "
	ControlStepper\update(${1:float})


snippet ControlStepper\startAutorepeat! "csxV3: ControlStepper::startAutorepeat "
	ControlStepper\startAutorepeat!


snippet ControlStepper\initWithMinusSpriteAndPlusSprite(sprite\,sprite) "csxV3: ControlStepper::initWithMinusSpriteAndPlusSprite "
	ControlStepper\initWithMinusSpriteAndPlusSprite(${1:sprite}, ${2:sprite})


snippet ControlStepper\getValue! "csxV3: ControlStepper::getValue "
	ControlStepper\getValue!


snippet ControlStepper\setPlusLabel(label) "csxV3: ControlStepper::setPlusLabel "
	ControlStepper\setPlusLabel(${1:label})


snippet ControlStepper\create(sprite\,sprite) "csxV3: ControlStepper::create "
	ControlStepper\create(${1:sprite}, ${2:sprite})


snippet ControlStepper\onTouchMoved(touch\,event) "csxV3: ControlStepper::onTouchMoved "
	ControlStepper\onTouchMoved(${1:touch}, ${2:event})


snippet ControlStepper\onTouchEnded(touch\,event) "csxV3: ControlStepper::onTouchEnded "
	ControlStepper\onTouchEnded(${1:touch}, ${2:event})


snippet ControlStepper\onTouchBegan(touch\,event) "csxV3: ControlStepper::onTouchBegan "
	ControlStepper\onTouchBegan(${1:touch}, ${2:event})


snippet ControlSwitch\setEnabled(bool) "csxV3: ControlSwitch::setEnabled "
	ControlSwitch\setEnabled(${1:bool})


snippet ControlSwitch\setOn(bool\,bool) "csxV3: ControlSwitch::setOn "
	ControlSwitch\setOn(${1:bool}, ${2:bool})


snippet ControlSwitch\isOn! "csxV3: ControlSwitch::isOn "
	ControlSwitch\isOn!


snippet ControlSwitch\initWithMaskSprite(sprite\,sprite\,sprite\,sprite\,label\,label) "csxV3: ControlSwitch::initWithMaskSprite "
	ControlSwitch\initWithMaskSprite(${1:sprite}, ${2:sprite}, ${3:sprite}, ${4:sprite}, ${5:label}, ${6:label})


snippet ControlSwitch\hasMoved! "csxV3: ControlSwitch::hasMoved "
	ControlSwitch\hasMoved!


snippet ControlSwitch\locationFromTouch(touch) "csxV3: ControlSwitch::locationFromTouch "
	ControlSwitch\locationFromTouch(${1:touch})


snippet ControlSwitch\create(sprite\,sprite\,sprite\,sprite\,label\,label) "csxV3: ControlSwitch::create "
	ControlSwitch\create(${1:sprite}, ${2:sprite}, ${3:sprite}, ${4:sprite}, ${5:label}, ${6:label})


snippet ControlSwitch\onTouchMoved(touch\,event) "csxV3: ControlSwitch::onTouchMoved "
	ControlSwitch\onTouchMoved(${1:touch}, ${2:event})


snippet ControlSwitch\onTouchEnded(touch\,event) "csxV3: ControlSwitch::onTouchEnded "
	ControlSwitch\onTouchEnded(${1:touch}, ${2:event})


snippet ControlSwitch\onTouchCancelled(touch\,event) "csxV3: ControlSwitch::onTouchCancelled "
	ControlSwitch\onTouchCancelled(${1:touch}, ${2:event})


snippet ControlSwitch\onTouchBegan(touch\,event) "csxV3: ControlSwitch::onTouchBegan "
	ControlSwitch\onTouchBegan(${1:touch}, ${2:event})


snippet DelayTime\create(float) "csxV3: DelayTime::create "
	DelayTime\create(${1:float})


snippet DelayTime\clone! "csxV3: DelayTime::clone "
	DelayTime\clone!


snippet DelayTime\update(float) "csxV3: DelayTime::update "
	DelayTime\update(${1:float})


snippet Director\pause! "csxV3: Director::pause "
	Director\pause!


snippet Director\pushScene(scene) "csxV3: Director::pushScene "
	Director\pushScene(${1:scene})


snippet Director\getDeltaTime! "csxV3: Director::getDeltaTime "
	Director\getDeltaTime!


snippet Director\getContentScaleFactor! "csxV3: Director::getContentScaleFactor "
	Director\getContentScaleFactor!


snippet Director\getWinSizeInPixels! "csxV3: Director::getWinSizeInPixels "
	Director\getWinSizeInPixels!


snippet Director\getConsole! "csxV3: Director::getConsole "
	Director\getConsole!


snippet Director\pushMatrix(matrix_stack_type) "csxV3: Director::pushMatrix "
	Director\pushMatrix(${1:matrix_stack_type})


snippet Director\setGLDefaultValues! "csxV3: Director::setGLDefaultValues "
	Director\setGLDefaultValues!


snippet Director\setActionManager(actionmanager) "csxV3: Director::setActionManager "
	Director\setActionManager(${1:actionmanager})


snippet Director\setAlphaBlending(bool) "csxV3: Director::setAlphaBlending "
	Director\setAlphaBlending(${1:bool})


snippet Director\popToRootScene! "csxV3: Director::popToRootScene "
	Director\popToRootScene!


snippet Director\loadMatrix(matrix_stack_type\,mat4) "csxV3: Director::loadMatrix "
	Director\loadMatrix(${1:matrix_stack_type}, ${2:mat4})


snippet Director\getNotificationNode! "csxV3: Director::getNotificationNode "
	Director\getNotificationNode!


snippet Director\getWinSize! "csxV3: Director::getWinSize "
	Director\getWinSize!


snippet Director\getTextureCache! "csxV3: Director::getTextureCache "
	Director\getTextureCache!


snippet Director\isSendCleanupToScene! "csxV3: Director::isSendCleanupToScene "
	Director\isSendCleanupToScene!


snippet Director\getVisibleOrigin! "csxV3: Director::getVisibleOrigin "
	Director\getVisibleOrigin!


snippet Director\mainLoop! "csxV3: Director::mainLoop "
	Director\mainLoop!


snippet Director\setDepthTest(bool) "csxV3: Director::setDepthTest "
	Director\setDepthTest(${1:bool})


snippet Director\getFrameRate! "csxV3: Director::getFrameRate "
	Director\getFrameRate!


snippet Director\getSecondsPerFrame! "csxV3: Director::getSecondsPerFrame "
	Director\getSecondsPerFrame!


snippet Director\convertToUI(vec2) "csxV3: Director::convertToUI "
	Director\convertToUI(${1:vec2})


snippet Director\setDefaultValues! "csxV3: Director::setDefaultValues "
	Director\setDefaultValues!


snippet Director\init! "csxV3: Director::init "
	Director\init!


snippet Director\setScheduler(scheduler) "csxV3: Director::setScheduler "
	Director\setScheduler(${1:scheduler})


snippet Director\startAnimation! "csxV3: Director::startAnimation "
	Director\startAnimation!


snippet Director\getOpenGLView! "csxV3: Director::getOpenGLView "
	Director\getOpenGLView!


snippet Director\getRunningScene! "csxV3: Director::getRunningScene "
	Director\getRunningScene!


snippet Director\setViewport! "csxV3: Director::setViewport "
	Director\setViewport!


snippet Director\stopAnimation! "csxV3: Director::stopAnimation "
	Director\stopAnimation!


snippet Director\setContentScaleFactor(float) "csxV3: Director::setContentScaleFactor "
	Director\setContentScaleFactor(${1:float})


snippet Director\popToSceneStackLevel(int) "csxV3: Director::popToSceneStackLevel "
	Director\popToSceneStackLevel(${1:int})


snippet Director\resume! "csxV3: Director::resume "
	Director\resume!


snippet Director\isNextDeltaTimeZero! "csxV3: Director::isNextDeltaTimeZero "
	Director\isNextDeltaTimeZero!


snippet Director\end! "csxV3: Director::end "
	Director\end!


snippet Director\setOpenGLView(glview) "csxV3: Director::setOpenGLView "
	Director\setOpenGLView(${1:glview})


snippet Director\convertToGL(vec2) "csxV3: Director::convertToGL "
	Director\convertToGL(${1:vec2})


snippet Director\purgeCachedData! "csxV3: Director::purgeCachedData "
	Director\purgeCachedData!


snippet Director\getTotalFrames! "csxV3: Director::getTotalFrames "
	Director\getTotalFrames!


snippet Director\runWithScene(scene) "csxV3: Director::runWithScene "
	Director\runWithScene(${1:scene})


snippet Director\setNotificationNode(node) "csxV3: Director::setNotificationNode "
	Director\setNotificationNode(${1:node})


snippet Director\drawScene! "csxV3: Director::drawScene "
	Director\drawScene!


snippet Director\getZEye! "csxV3: Director::getZEye "
	Director\getZEye!


snippet Director\getMatrix(matrix_stack_type) "csxV3: Director::getMatrix "
	Director\getMatrix(${1:matrix_stack_type})


snippet Director\popScene! "csxV3: Director::popScene "
	Director\popScene!


snippet Director\isDisplayStats! "csxV3: Director::isDisplayStats "
	Director\isDisplayStats!


snippet Director\setProjection(projection) "csxV3: Director::setProjection "
	Director\setProjection(${1:projection})


snippet Director\loadIdentityMatrix(matrix_stack_type) "csxV3: Director::loadIdentityMatrix "
	Director\loadIdentityMatrix(${1:matrix_stack_type})


snippet Director\setNextDeltaTimeZero(bool) "csxV3: Director::setNextDeltaTimeZero "
	Director\setNextDeltaTimeZero(${1:bool})


snippet Director\resetMatrixStack! "csxV3: Director::resetMatrixStack "
	Director\resetMatrixStack!


snippet Director\popMatrix(matrix_stack_type) "csxV3: Director::popMatrix "
	Director\popMatrix(${1:matrix_stack_type})


snippet Director\getVisibleSize! "csxV3: Director::getVisibleSize "
	Director\getVisibleSize!


snippet Director\getScheduler! "csxV3: Director::getScheduler "
	Director\getScheduler!


snippet Director\setAnimationInterval(double) "csxV3: Director::setAnimationInterval "
	Director\setAnimationInterval(${1:double})


snippet Director\getAnimationInterval! "csxV3: Director::getAnimationInterval "
	Director\getAnimationInterval!


snippet Director\isPaused! "csxV3: Director::isPaused "
	Director\isPaused!


snippet Director\setDisplayStats(bool) "csxV3: Director::setDisplayStats "
	Director\setDisplayStats(${1:bool})


snippet Director\replaceScene(scene) "csxV3: Director::replaceScene "
	Director\replaceScene(${1:scene})


snippet Director\multiplyMatrix(matrix_stack_type\,mat4) "csxV3: Director::multiplyMatrix "
	Director\multiplyMatrix(${1:matrix_stack_type}, ${2:mat4})


snippet Director\getActionManager! "csxV3: Director::getActionManager "
	Director\getActionManager!


snippet DisplayData\copy(displaydata) "csxV3: DisplayData::copy "
	DisplayData\copy(${1:displaydata})


snippet DisplayData\changeDisplayToTexture(str) "csxV3: DisplayData::changeDisplayToTexture "
	DisplayData\changeDisplayToTexture(${1:str})


snippet DisplayData\create! "csxV3: DisplayData::create "
	DisplayData\create!


snippet DisplayManager\getDisplayRenderNode! "csxV3: DisplayManager::getDisplayRenderNode "
	DisplayManager\getDisplayRenderNode!


snippet DisplayManager\getAnchorPointInPoints! "csxV3: DisplayManager::getAnchorPointInPoints "
	DisplayManager\getAnchorPointInPoints!


snippet DisplayManager\getDisplayRenderNodeType! "csxV3: DisplayManager::getDisplayRenderNodeType "
	DisplayManager\getDisplayRenderNodeType!


snippet DisplayManager\removeDisplay(int) "csxV3: DisplayManager::removeDisplay "
	DisplayManager\removeDisplay(${1:int})


snippet DisplayManager\setForceChangeDisplay(bool) "csxV3: DisplayManager::setForceChangeDisplay "
	DisplayManager\setForceChangeDisplay(${1:bool})


snippet DisplayManager\init(bone) "csxV3: DisplayManager::init "
	DisplayManager\init(${1:bone})


snippet DisplayManager\getContentSize! "csxV3: DisplayManager::getContentSize "
	DisplayManager\getContentSize!


snippet DisplayManager\getBoundingBox! "csxV3: DisplayManager::getBoundingBox "
	DisplayManager\getBoundingBox!


snippet DisplayManager\addDisplay(displaydata\,int) "csxV3: DisplayManager::addDisplay "
	DisplayManager\addDisplay(${1:displaydata}, ${2:int})


snippet DisplayManager\containPoint(float\,float) "csxV3: DisplayManager::containPoint "
	DisplayManager\containPoint(${1:float}, ${2:float})


snippet DisplayManager\changeDisplayWithIndex(int\,bool) "csxV3: DisplayManager::changeDisplayWithIndex "
	DisplayManager\changeDisplayWithIndex(${1:int}, ${2:bool})


snippet DisplayManager\changeDisplayWithName(str\,bool) "csxV3: DisplayManager::changeDisplayWithName "
	DisplayManager\changeDisplayWithName(${1:str}, ${2:bool})


snippet DisplayManager\isForceChangeDisplay! "csxV3: DisplayManager::isForceChangeDisplay "
	DisplayManager\isForceChangeDisplay!


snippet DisplayManager\getCurrentDisplayIndex! "csxV3: DisplayManager::getCurrentDisplayIndex "
	DisplayManager\getCurrentDisplayIndex!


snippet DisplayManager\getAnchorPoint! "csxV3: DisplayManager::getAnchorPoint "
	DisplayManager\getAnchorPoint!


snippet DisplayManager\getDecorativeDisplayList! "csxV3: DisplayManager::getDecorativeDisplayList "
	DisplayManager\getDecorativeDisplayList!


snippet DisplayManager\isVisible! "csxV3: DisplayManager::isVisible "
	DisplayManager\isVisible!


snippet DisplayManager\setVisible(bool) "csxV3: DisplayManager::setVisible "
	DisplayManager\setVisible(${1:bool})


snippet DisplayManager\create(bone) "csxV3: DisplayManager::create "
	DisplayManager\create(${1:bone})


snippet DrawNode\drawQuadraticBezier(vec2\,vec2\,vec2\,int\,color4f) "csxV3: DrawNode::drawQuadraticBezier "
	DrawNode\drawQuadraticBezier(${1:vec2}, ${2:vec2}, ${3:vec2}, ${4:int}, ${5:color4f})


snippet DrawNode\onDraw(mat4\,bool) "csxV3: DrawNode::onDraw "
	DrawNode\onDraw(${1:mat4}, ${2:bool})


snippet DrawNode\clear! "csxV3: DrawNode::clear "
	DrawNode\clear!


snippet DrawNode\drawTriangle(vec2\,vec2\,vec2\,color4f) "csxV3: DrawNode::drawTriangle "
	DrawNode\drawTriangle(${1:vec2}, ${2:vec2}, ${3:vec2}, ${4:color4f})


snippet DrawNode\drawDot(vec2\,float\,color4f) "csxV3: DrawNode::drawDot "
	DrawNode\drawDot(${1:vec2}, ${2:float}, ${3:color4f})


snippet DrawNode\drawCubicBezier(vec2\,vec2\,vec2\,vec2\,int\,color4f) "csxV3: DrawNode::drawCubicBezier "
	DrawNode\drawCubicBezier(${1:vec2}, ${2:vec2}, ${3:vec2}, ${4:vec2}, ${5:int}, ${6:color4f})


snippet DrawNode\drawSegment(vec2\,vec2\,float\,color4f) "csxV3: DrawNode::drawSegment "
	DrawNode\drawSegment(${1:vec2}, ${2:vec2}, ${3:float}, ${4:color4f})


snippet DrawNode\create! "csxV3: DrawNode::create "
	DrawNode\create!


snippet EaseBackIn\create(actioninterval) "csxV3: EaseBackIn::create "
	EaseBackIn\create(${1:actioninterval})


snippet EaseBackIn\clone! "csxV3: EaseBackIn::clone "
	EaseBackIn\clone!


snippet EaseBackIn\update(float) "csxV3: EaseBackIn::update "
	EaseBackIn\update(${1:float})


snippet EaseBackInOut\create(actioninterval) "csxV3: EaseBackInOut::create "
	EaseBackInOut\create(${1:actioninterval})


snippet EaseBackInOut\clone! "csxV3: EaseBackInOut::clone "
	EaseBackInOut\clone!


snippet EaseBackInOut\update(float) "csxV3: EaseBackInOut::update "
	EaseBackInOut\update(${1:float})


snippet EaseBackOut\create(actioninterval) "csxV3: EaseBackOut::create "
	EaseBackOut\create(${1:actioninterval})


snippet EaseBackOut\clone! "csxV3: EaseBackOut::clone "
	EaseBackOut\clone!


snippet EaseBackOut\update(float) "csxV3: EaseBackOut::update "
	EaseBackOut\update(${1:float})


snippet EaseBezierAction\setBezierParamer(float\,float\,float\,float) "csxV3: EaseBezierAction::setBezierParamer "
	EaseBezierAction\setBezierParamer(${1:float}, ${2:float}, ${3:float}, ${4:float})


snippet EaseBezierAction\create(actioninterval) "csxV3: EaseBezierAction::create "
	EaseBezierAction\create(${1:actioninterval})


snippet EaseBezierAction\clone! "csxV3: EaseBezierAction::clone "
	EaseBezierAction\clone!


snippet EaseBezierAction\update(float) "csxV3: EaseBezierAction::update "
	EaseBezierAction\update(${1:float})


snippet EaseBounce\clone! "csxV3: EaseBounce::clone "
	EaseBounce\clone!


snippet EaseBounceIn\create(actioninterval) "csxV3: EaseBounceIn::create "
	EaseBounceIn\create(${1:actioninterval})


snippet EaseBounceIn\clone! "csxV3: EaseBounceIn::clone "
	EaseBounceIn\clone!


snippet EaseBounceIn\update(float) "csxV3: EaseBounceIn::update "
	EaseBounceIn\update(${1:float})


snippet EaseBounceInOut\create(actioninterval) "csxV3: EaseBounceInOut::create "
	EaseBounceInOut\create(${1:actioninterval})


snippet EaseBounceInOut\clone! "csxV3: EaseBounceInOut::clone "
	EaseBounceInOut\clone!


snippet EaseBounceInOut\update(float) "csxV3: EaseBounceInOut::update "
	EaseBounceInOut\update(${1:float})


snippet EaseBounceOut\create(actioninterval) "csxV3: EaseBounceOut::create "
	EaseBounceOut\create(${1:actioninterval})


snippet EaseBounceOut\clone! "csxV3: EaseBounceOut::clone "
	EaseBounceOut\clone!


snippet EaseBounceOut\update(float) "csxV3: EaseBounceOut::update "
	EaseBounceOut\update(${1:float})


snippet EaseCircleActionIn\create(actioninterval) "csxV3: EaseCircleActionIn::create "
	EaseCircleActionIn\create(${1:actioninterval})


snippet EaseCircleActionIn\clone! "csxV3: EaseCircleActionIn::clone "
	EaseCircleActionIn\clone!


snippet EaseCircleActionIn\update(float) "csxV3: EaseCircleActionIn::update "
	EaseCircleActionIn\update(${1:float})


snippet EaseCircleActionInOut\create(actioninterval) "csxV3: EaseCircleActionInOut::create "
	EaseCircleActionInOut\create(${1:actioninterval})


snippet EaseCircleActionInOut\clone! "csxV3: EaseCircleActionInOut::clone "
	EaseCircleActionInOut\clone!


snippet EaseCircleActionInOut\update(float) "csxV3: EaseCircleActionInOut::update "
	EaseCircleActionInOut\update(${1:float})


snippet EaseCircleActionOut\create(actioninterval) "csxV3: EaseCircleActionOut::create "
	EaseCircleActionOut\create(${1:actioninterval})


snippet EaseCircleActionOut\clone! "csxV3: EaseCircleActionOut::clone "
	EaseCircleActionOut\clone!


snippet EaseCircleActionOut\update(float) "csxV3: EaseCircleActionOut::update "
	EaseCircleActionOut\update(${1:float})


snippet EaseCubicActionIn\create(actioninterval) "csxV3: EaseCubicActionIn::create "
	EaseCubicActionIn\create(${1:actioninterval})


snippet EaseCubicActionIn\clone! "csxV3: EaseCubicActionIn::clone "
	EaseCubicActionIn\clone!


snippet EaseCubicActionIn\update(float) "csxV3: EaseCubicActionIn::update "
	EaseCubicActionIn\update(${1:float})


snippet EaseCubicActionInOut\create(actioninterval) "csxV3: EaseCubicActionInOut::create "
	EaseCubicActionInOut\create(${1:actioninterval})


snippet EaseCubicActionInOut\clone! "csxV3: EaseCubicActionInOut::clone "
	EaseCubicActionInOut\clone!


snippet EaseCubicActionInOut\update(float) "csxV3: EaseCubicActionInOut::update "
	EaseCubicActionInOut\update(${1:float})


snippet EaseCubicActionOut\create(actioninterval) "csxV3: EaseCubicActionOut::create "
	EaseCubicActionOut\create(${1:actioninterval})


snippet EaseCubicActionOut\clone! "csxV3: EaseCubicActionOut::clone "
	EaseCubicActionOut\clone!


snippet EaseCubicActionOut\update(float) "csxV3: EaseCubicActionOut::update "
	EaseCubicActionOut\update(${1:float})


snippet EaseElastic\setPeriod(float) "csxV3: EaseElastic::setPeriod "
	EaseElastic\setPeriod(${1:float})


snippet EaseElastic\getPeriod! "csxV3: EaseElastic::getPeriod "
	EaseElastic\getPeriod!


snippet EaseElastic\clone! "csxV3: EaseElastic::clone "
	EaseElastic\clone!


snippet EaseElasticIn\create(actioninterval\,float) "csxV3: EaseElasticIn::create "
	EaseElasticIn\create(${1:actioninterval}, ${2:float})


snippet EaseElasticIn\clone! "csxV3: EaseElasticIn::clone "
	EaseElasticIn\clone!


snippet EaseElasticIn\update(float) "csxV3: EaseElasticIn::update "
	EaseElasticIn\update(${1:float})


snippet EaseElasticInOut\create(actioninterval\,float) "csxV3: EaseElasticInOut::create "
	EaseElasticInOut\create(${1:actioninterval}, ${2:float})


snippet EaseElasticInOut\clone! "csxV3: EaseElasticInOut::clone "
	EaseElasticInOut\clone!


snippet EaseElasticInOut\update(float) "csxV3: EaseElasticInOut::update "
	EaseElasticInOut\update(${1:float})


snippet EaseElasticOut\create(actioninterval\,float) "csxV3: EaseElasticOut::create "
	EaseElasticOut\create(${1:actioninterval}, ${2:float})


snippet EaseElasticOut\clone! "csxV3: EaseElasticOut::clone "
	EaseElasticOut\clone!


snippet EaseElasticOut\update(float) "csxV3: EaseElasticOut::update "
	EaseElasticOut\update(${1:float})


snippet EaseExponentialIn\create(actioninterval) "csxV3: EaseExponentialIn::create "
	EaseExponentialIn\create(${1:actioninterval})


snippet EaseExponentialIn\clone! "csxV3: EaseExponentialIn::clone "
	EaseExponentialIn\clone!


snippet EaseExponentialIn\update(float) "csxV3: EaseExponentialIn::update "
	EaseExponentialIn\update(${1:float})


snippet EaseExponentialInOut\create(actioninterval) "csxV3: EaseExponentialInOut::create "
	EaseExponentialInOut\create(${1:actioninterval})


snippet EaseExponentialInOut\clone! "csxV3: EaseExponentialInOut::clone "
	EaseExponentialInOut\clone!


snippet EaseExponentialInOut\update(float) "csxV3: EaseExponentialInOut::update "
	EaseExponentialInOut\update(${1:float})


snippet EaseExponentialOut\create(actioninterval) "csxV3: EaseExponentialOut::create "
	EaseExponentialOut\create(${1:actioninterval})


snippet EaseExponentialOut\clone! "csxV3: EaseExponentialOut::clone "
	EaseExponentialOut\clone!


snippet EaseExponentialOut\update(float) "csxV3: EaseExponentialOut::update "
	EaseExponentialOut\update(${1:float})


snippet EaseIn\create(actioninterval\,float) "csxV3: EaseIn::create "
	EaseIn\create(${1:actioninterval}, ${2:float})


snippet EaseIn\clone! "csxV3: EaseIn::clone "
	EaseIn\clone!


snippet EaseIn\update(float) "csxV3: EaseIn::update "
	EaseIn\update(${1:float})


snippet EaseInOut\create(actioninterval\,float) "csxV3: EaseInOut::create "
	EaseInOut\create(${1:actioninterval}, ${2:float})


snippet EaseInOut\clone! "csxV3: EaseInOut::clone "
	EaseInOut\clone!


snippet EaseInOut\update(float) "csxV3: EaseInOut::update "
	EaseInOut\update(${1:float})


snippet EaseOut\create(actioninterval\,float) "csxV3: EaseOut::create "
	EaseOut\create(${1:actioninterval}, ${2:float})


snippet EaseOut\clone! "csxV3: EaseOut::clone "
	EaseOut\clone!


snippet EaseOut\update(float) "csxV3: EaseOut::update "
	EaseOut\update(${1:float})


snippet EaseQuadraticActionIn\create(actioninterval) "csxV3: EaseQuadraticActionIn::create "
	EaseQuadraticActionIn\create(${1:actioninterval})


snippet EaseQuadraticActionIn\clone! "csxV3: EaseQuadraticActionIn::clone "
	EaseQuadraticActionIn\clone!


snippet EaseQuadraticActionIn\update(float) "csxV3: EaseQuadraticActionIn::update "
	EaseQuadraticActionIn\update(${1:float})


snippet EaseQuadraticActionInOut\create(actioninterval) "csxV3: EaseQuadraticActionInOut::create "
	EaseQuadraticActionInOut\create(${1:actioninterval})


snippet EaseQuadraticActionInOut\clone! "csxV3: EaseQuadraticActionInOut::clone "
	EaseQuadraticActionInOut\clone!


snippet EaseQuadraticActionInOut\update(float) "csxV3: EaseQuadraticActionInOut::update "
	EaseQuadraticActionInOut\update(${1:float})


snippet EaseQuadraticActionOut\create(actioninterval) "csxV3: EaseQuadraticActionOut::create "
	EaseQuadraticActionOut\create(${1:actioninterval})


snippet EaseQuadraticActionOut\clone! "csxV3: EaseQuadraticActionOut::clone "
	EaseQuadraticActionOut\clone!


snippet EaseQuadraticActionOut\update(float) "csxV3: EaseQuadraticActionOut::update "
	EaseQuadraticActionOut\update(${1:float})


snippet EaseQuarticActionIn\create(actioninterval) "csxV3: EaseQuarticActionIn::create "
	EaseQuarticActionIn\create(${1:actioninterval})


snippet EaseQuarticActionIn\clone! "csxV3: EaseQuarticActionIn::clone "
	EaseQuarticActionIn\clone!


snippet EaseQuarticActionIn\update(float) "csxV3: EaseQuarticActionIn::update "
	EaseQuarticActionIn\update(${1:float})


snippet EaseQuarticActionInOut\create(actioninterval) "csxV3: EaseQuarticActionInOut::create "
	EaseQuarticActionInOut\create(${1:actioninterval})


snippet EaseQuarticActionInOut\clone! "csxV3: EaseQuarticActionInOut::clone "
	EaseQuarticActionInOut\clone!


snippet EaseQuarticActionInOut\update(float) "csxV3: EaseQuarticActionInOut::update "
	EaseQuarticActionInOut\update(${1:float})


snippet EaseQuarticActionOut\create(actioninterval) "csxV3: EaseQuarticActionOut::create "
	EaseQuarticActionOut\create(${1:actioninterval})


snippet EaseQuarticActionOut\clone! "csxV3: EaseQuarticActionOut::clone "
	EaseQuarticActionOut\clone!


snippet EaseQuarticActionOut\update(float) "csxV3: EaseQuarticActionOut::update "
	EaseQuarticActionOut\update(${1:float})


snippet EaseQuinticActionIn\create(actioninterval) "csxV3: EaseQuinticActionIn::create "
	EaseQuinticActionIn\create(${1:actioninterval})


snippet EaseQuinticActionIn\clone! "csxV3: EaseQuinticActionIn::clone "
	EaseQuinticActionIn\clone!


snippet EaseQuinticActionIn\update(float) "csxV3: EaseQuinticActionIn::update "
	EaseQuinticActionIn\update(${1:float})


snippet EaseQuinticActionInOut\create(actioninterval) "csxV3: EaseQuinticActionInOut::create "
	EaseQuinticActionInOut\create(${1:actioninterval})


snippet EaseQuinticActionInOut\clone! "csxV3: EaseQuinticActionInOut::clone "
	EaseQuinticActionInOut\clone!


snippet EaseQuinticActionInOut\update(float) "csxV3: EaseQuinticActionInOut::update "
	EaseQuinticActionInOut\update(${1:float})


snippet EaseQuinticActionOut\create(actioninterval) "csxV3: EaseQuinticActionOut::create "
	EaseQuinticActionOut\create(${1:actioninterval})


snippet EaseQuinticActionOut\clone! "csxV3: EaseQuinticActionOut::clone "
	EaseQuinticActionOut\clone!


snippet EaseQuinticActionOut\update(float) "csxV3: EaseQuinticActionOut::update "
	EaseQuinticActionOut\update(${1:float})


snippet EaseRateAction\setRate(float) "csxV3: EaseRateAction::setRate "
	EaseRateAction\setRate(${1:float})


snippet EaseRateAction\getRate! "csxV3: EaseRateAction::getRate "
	EaseRateAction\getRate!


snippet EaseRateAction\clone! "csxV3: EaseRateAction::clone "
	EaseRateAction\clone!


snippet EaseSineIn\create(actioninterval) "csxV3: EaseSineIn::create "
	EaseSineIn\create(${1:actioninterval})


snippet EaseSineIn\clone! "csxV3: EaseSineIn::clone "
	EaseSineIn\clone!


snippet EaseSineIn\update(float) "csxV3: EaseSineIn::update "
	EaseSineIn\update(${1:float})


snippet EaseSineInOut\create(actioninterval) "csxV3: EaseSineInOut::create "
	EaseSineInOut\create(${1:actioninterval})


snippet EaseSineInOut\clone! "csxV3: EaseSineInOut::clone "
	EaseSineInOut\clone!


snippet EaseSineInOut\update(float) "csxV3: EaseSineInOut::update "
	EaseSineInOut\update(${1:float})


snippet EaseSineOut\create(actioninterval) "csxV3: EaseSineOut::create "
	EaseSineOut\create(${1:actioninterval})


snippet EaseSineOut\clone! "csxV3: EaseSineOut::clone "
	EaseSineOut\clone!


snippet EaseSineOut\update(float) "csxV3: EaseSineOut::update "
	EaseSineOut\update(${1:float})


snippet EditBox\getText! "csxV3: EditBox::getText "
	EditBox\getText!


snippet EditBox\setPlaceholderFontName(char) "csxV3: EditBox::setPlaceholderFontName "
	EditBox\setPlaceholderFontName(${1:char})


snippet EditBox\getPlaceHolder! "csxV3: EditBox::getPlaceHolder "
	EditBox\getPlaceHolder!


snippet EditBox\setFontName(char) "csxV3: EditBox::setFontName "
	EditBox\setFontName(${1:char})


snippet EditBox\setPlaceholderFontSize(int) "csxV3: EditBox::setPlaceholderFontSize "
	EditBox\setPlaceholderFontSize(${1:int})


snippet EditBox\setInputMode(inputmode) "csxV3: EditBox::setInputMode "
	EditBox\setInputMode(${1:inputmode})


snippet EditBox\setPlaceholderFontColor(color3b) "csxV3: EditBox::setPlaceholderFontColor "
	EditBox\setPlaceholderFontColor(${1:color3b})


snippet EditBox\setFontColor(color3b) "csxV3: EditBox::setFontColor "
	EditBox\setFontColor(${1:color3b})


snippet EditBox\setPlaceholderFont(char\,int) "csxV3: EditBox::setPlaceholderFont "
	EditBox\setPlaceholderFont(${1:char}, ${2:int})


snippet EditBox\setFontSize(int) "csxV3: EditBox::setFontSize "
	EditBox\setFontSize(${1:int})


snippet EditBox\initWithSizeAndBackgroundSprite(size\,scale9sprite) "csxV3: EditBox::initWithSizeAndBackgroundSprite "
	EditBox\initWithSizeAndBackgroundSprite(${1:size}, ${2:scale9sprite})


snippet EditBox\setPlaceHolder(char) "csxV3: EditBox::setPlaceHolder "
	EditBox\setPlaceHolder(${1:char})


snippet EditBox\setReturnType(keyboardreturntype) "csxV3: EditBox::setReturnType "
	EditBox\setReturnType(${1:keyboardreturntype})


snippet EditBox\setInputFlag(inputflag) "csxV3: EditBox::setInputFlag "
	EditBox\setInputFlag(${1:inputflag})


snippet EditBox\getMaxLength! "csxV3: EditBox::getMaxLength "
	EditBox\getMaxLength!


snippet EditBox\setText(char) "csxV3: EditBox::setText "
	EditBox\setText(${1:char})


snippet EditBox\setMaxLength(int) "csxV3: EditBox::setMaxLength "
	EditBox\setMaxLength(${1:int})


snippet EditBox\setFont(char\,int) "csxV3: EditBox::setFont "
	EditBox\setFont(${1:char}, ${2:int})


snippet EditBox\create(size\,scale9sprite\,scale9sprite\,scale9sprite) "csxV3: EditBox::create "
	EditBox\create(${1:size}, ${2:scale9sprite}, ${3:scale9sprite}, ${4:scale9sprite})


snippet EditBox\setAnchorPoint(vec2) "csxV3: EditBox::setAnchorPoint "
	EditBox\setAnchorPoint(${1:vec2})


snippet EditBox\setPosition(vec2) "csxV3: EditBox::setPosition "
	EditBox\setPosition(${1:vec2})


snippet EditBox\setVisible(bool) "csxV3: EditBox::setVisible "
	EditBox\setVisible(${1:bool})


snippet EditBox\setContentSize(size) "csxV3: EditBox::setContentSize "
	EditBox\setContentSize(${1:size})


snippet Event\isStopped! "csxV3: Event::isStopped "
	Event\isStopped!


snippet Event\getType! "csxV3: Event::getType "
	Event\getType!


snippet Event\getCurrentTarget! "csxV3: Event::getCurrentTarget "
	Event\getCurrentTarget!


snippet EventCustom\getEventName! "csxV3: EventCustom::getEventName "
	EventCustom\getEventName!


snippet EventDispatcher\pauseEventListenersForTarget(node\,bool) "csxV3: EventDispatcher::pauseEventListenersForTarget "
	EventDispatcher\pauseEventListenersForTarget(${1:node}, ${2:bool})


snippet EventDispatcher\addEventListenerWithSceneGraphPriority(eventlistener\,node) "csxV3: EventDispatcher::addEventListenerWithSceneGraphPriority "
	EventDispatcher\addEventListenerWithSceneGraphPriority(${1:eventlistener}, ${2:node})


snippet EventDispatcher\setEnabled(bool) "csxV3: EventDispatcher::setEnabled "
	EventDispatcher\setEnabled(${1:bool})


snippet EventDispatcher\addEventListenerWithFixedPriority(eventlistener\,int) "csxV3: EventDispatcher::addEventListenerWithFixedPriority "
	EventDispatcher\addEventListenerWithFixedPriority(${1:eventlistener}, ${2:int})


snippet EventDispatcher\removeEventListener(eventlistener) "csxV3: EventDispatcher::removeEventListener "
	EventDispatcher\removeEventListener(${1:eventlistener})


snippet EventDispatcher\resumeEventListenersForTarget(node\,bool) "csxV3: EventDispatcher::resumeEventListenersForTarget "
	EventDispatcher\resumeEventListenersForTarget(${1:node}, ${2:bool})


snippet EventDispatcher\removeEventListenersForTarget(node\,bool) "csxV3: EventDispatcher::removeEventListenersForTarget "
	EventDispatcher\removeEventListenersForTarget(${1:node}, ${2:bool})


snippet EventDispatcher\setPriority(eventlistener\,int) "csxV3: EventDispatcher::setPriority "
	EventDispatcher\setPriority(${1:eventlistener}, ${2:int})


snippet EventDispatcher\addCustomEventListener(str\,func) "csxV3: EventDispatcher::addCustomEventListener "
	EventDispatcher\addCustomEventListener(${1:str}, ${2:func})


snippet EventDispatcher\dispatchEvent(event) "csxV3: EventDispatcher::dispatchEvent "
	EventDispatcher\dispatchEvent(${1:event})


snippet EventDispatcher\removeAllEventListeners! "csxV3: EventDispatcher::removeAllEventListeners "
	EventDispatcher\removeAllEventListeners!


snippet EventDispatcher\removeCustomEventListeners(str) "csxV3: EventDispatcher::removeCustomEventListeners "
	EventDispatcher\removeCustomEventListeners(${1:str})


snippet EventDispatcher\isEnabled! "csxV3: EventDispatcher::isEnabled "
	EventDispatcher\isEnabled!


snippet EventDispatcher\removeEventListenersForType(type) "csxV3: EventDispatcher::removeEventListenersForType "
	EventDispatcher\removeEventListenersForType(${1:type})


snippet EventListener\setEnabled(bool) "csxV3: EventListener::setEnabled "
	EventListener\setEnabled(${1:bool})


snippet EventListener\clone! "csxV3: EventListener::clone "
	EventListener\clone!


snippet EventListener\isEnabled! "csxV3: EventListener::isEnabled "
	EventListener\isEnabled!


snippet EventListenerAcceleration\clone! "csxV3: EventListenerAcceleration::clone "
	EventListenerAcceleration\clone!


snippet EventListenerCustom\clone! "csxV3: EventListenerCustom::clone "
	EventListenerCustom\clone!


snippet EventListenerFocus\clone! "csxV3: EventListenerFocus::clone "
	EventListenerFocus\clone!


snippet EventListenerKeyboard\clone! "csxV3: EventListenerKeyboard::clone "
	EventListenerKeyboard\clone!


snippet EventListenerMouse\clone! "csxV3: EventListenerMouse::clone "
	EventListenerMouse\clone!


snippet EventListenerPhysicsContact\create! "csxV3: EventListenerPhysicsContact::create "
	EventListenerPhysicsContact\create!


snippet EventListenerPhysicsContact\clone! "csxV3: EventListenerPhysicsContact::clone "
	EventListenerPhysicsContact\clone!


snippet EventListenerPhysicsContactWithBodies\hitTest(physicsshape\,physicsshape) "csxV3: EventListenerPhysicsContactWithBodies::hitTest "
	EventListenerPhysicsContactWithBodies\hitTest(${1:physicsshape}, ${2:physicsshape})


snippet EventListenerPhysicsContactWithBodies\create(physicsbody\,physicsbody) "csxV3: EventListenerPhysicsContactWithBodies::create "
	EventListenerPhysicsContactWithBodies\create(${1:physicsbody}, ${2:physicsbody})


snippet EventListenerPhysicsContactWithGroup\hitTest(physicsshape\,physicsshape) "csxV3: EventListenerPhysicsContactWithGroup::hitTest "
	EventListenerPhysicsContactWithGroup\hitTest(${1:physicsshape}, ${2:physicsshape})


snippet EventListenerPhysicsContactWithGroup\create(int) "csxV3: EventListenerPhysicsContactWithGroup::create "
	EventListenerPhysicsContactWithGroup\create(${1:int})


snippet EventListenerPhysicsContactWithShapes\hitTest(physicsshape\,physicsshape) "csxV3: EventListenerPhysicsContactWithShapes::hitTest "
	EventListenerPhysicsContactWithShapes\hitTest(${1:physicsshape}, ${2:physicsshape})


snippet EventListenerPhysicsContactWithShapes\create(physicsshape\,physicsshape) "csxV3: EventListenerPhysicsContactWithShapes::create "
	EventListenerPhysicsContactWithShapes\create(${1:physicsshape}, ${2:physicsshape})


snippet EventListenerTouchAllAtOnce\clone! "csxV3: EventListenerTouchAllAtOnce::clone "
	EventListenerTouchAllAtOnce\clone!


snippet EventListenerTouchOneByOne\isSwallowTouches! "csxV3: EventListenerTouchOneByOne::isSwallowTouches "
	EventListenerTouchOneByOne\isSwallowTouches!


snippet EventListenerTouchOneByOne\setSwallowTouches(bool) "csxV3: EventListenerTouchOneByOne::setSwallowTouches "
	EventListenerTouchOneByOne\setSwallowTouches(${1:bool})


snippet EventListenerTouchOneByOne\clone! "csxV3: EventListenerTouchOneByOne::clone "
	EventListenerTouchOneByOne\clone!


snippet EventMouse\getMouseButton! "csxV3: EventMouse::getMouseButton "
	EventMouse\getMouseButton!


snippet EventMouse\setScrollData(float\,float) "csxV3: EventMouse::setScrollData "
	EventMouse\setScrollData(${1:float}, ${2:float})


snippet EventMouse\setMouseButton(int) "csxV3: EventMouse::setMouseButton "
	EventMouse\setMouseButton(${1:int})


snippet EventMouse\getScrollY! "csxV3: EventMouse::getScrollY "
	EventMouse\getScrollY!


snippet EventMouse\getScrollX! "csxV3: EventMouse::getScrollX "
	EventMouse\getScrollX!


snippet EventMouse\getCursorX! "csxV3: EventMouse::getCursorX "
	EventMouse\getCursorX!


snippet EventMouse\getCursorY! "csxV3: EventMouse::getCursorY "
	EventMouse\getCursorY!


snippet EventMouse\setCursorPosition(float\,float) "csxV3: EventMouse::setCursorPosition "
	EventMouse\setCursorPosition(${1:float}, ${2:float})


snippet EventTouch\getEventCode! "csxV3: EventTouch::getEventCode "
	EventTouch\getEventCode!


snippet EventTouch\setEventCode(eventcode) "csxV3: EventTouch::setEventCode "
	EventTouch\setEventCode(${1:eventcode})


snippet FadeIn\setReverseAction(fadeto) "csxV3: FadeIn::setReverseAction "
	FadeIn\setReverseAction(${1:fadeto})


snippet FadeIn\create(float) "csxV3: FadeIn::create "
	FadeIn\create(${1:float})


snippet FadeIn\startWithTarget(node) "csxV3: FadeIn::startWithTarget "
	FadeIn\startWithTarget(${1:node})


snippet FadeIn\clone! "csxV3: FadeIn::clone "
	FadeIn\clone!


snippet FadeOut\setReverseAction(fadeto) "csxV3: FadeOut::setReverseAction "
	FadeOut\setReverseAction(${1:fadeto})


snippet FadeOut\create(float) "csxV3: FadeOut::create "
	FadeOut\create(${1:float})


snippet FadeOut\startWithTarget(node) "csxV3: FadeOut::startWithTarget "
	FadeOut\startWithTarget(${1:node})


snippet FadeOut\clone! "csxV3: FadeOut::clone "
	FadeOut\clone!


snippet FadeOutBLTiles\create(float\,size) "csxV3: FadeOutBLTiles::create "
	FadeOutBLTiles\create(${1:float}, ${2:size})


snippet FadeOutBLTiles\clone! "csxV3: FadeOutBLTiles::clone "
	FadeOutBLTiles\clone!


snippet FadeOutDownTiles\create(float\,size) "csxV3: FadeOutDownTiles::create "
	FadeOutDownTiles\create(${1:float}, ${2:size})


snippet FadeOutDownTiles\clone! "csxV3: FadeOutDownTiles::clone "
	FadeOutDownTiles\clone!


snippet FadeOutTRTiles\turnOnTile(vec2) "csxV3: FadeOutTRTiles::turnOnTile "
	FadeOutTRTiles\turnOnTile(${1:vec2})


snippet FadeOutTRTiles\turnOffTile(vec2) "csxV3: FadeOutTRTiles::turnOffTile "
	FadeOutTRTiles\turnOffTile(${1:vec2})


snippet FadeOutTRTiles\transformTile(vec2\,float) "csxV3: FadeOutTRTiles::transformTile "
	FadeOutTRTiles\transformTile(${1:vec2}, ${2:float})


snippet FadeOutTRTiles\testFunc(size\,float) "csxV3: FadeOutTRTiles::testFunc "
	FadeOutTRTiles\testFunc(${1:size}, ${2:float})


snippet FadeOutTRTiles\create(float\,size) "csxV3: FadeOutTRTiles::create "
	FadeOutTRTiles\create(${1:float}, ${2:size})


snippet FadeOutTRTiles\clone! "csxV3: FadeOutTRTiles::clone "
	FadeOutTRTiles\clone!


snippet FadeOutUpTiles\transformTile(vec2\,float) "csxV3: FadeOutUpTiles::transformTile "
	FadeOutUpTiles\transformTile(${1:vec2}, ${2:float})


snippet FadeOutUpTiles\create(float\,size) "csxV3: FadeOutUpTiles::create "
	FadeOutUpTiles\create(${1:float}, ${2:size})


snippet FadeOutUpTiles\clone! "csxV3: FadeOutUpTiles::clone "
	FadeOutUpTiles\clone!


snippet FadeTo\create(float\,char) "csxV3: FadeTo::create "
	FadeTo\create(${1:float}, ${2:char})


snippet FadeTo\startWithTarget(node) "csxV3: FadeTo::startWithTarget "
	FadeTo\startWithTarget(${1:node})


snippet FadeTo\clone! "csxV3: FadeTo::clone "
	FadeTo\clone!


snippet FadeTo\reverse! "csxV3: FadeTo::reverse "
	FadeTo\reverse!


snippet FileUtils\fullPathForFilename(str) "csxV3: FileUtils::fullPathForFilename "
	FileUtils\fullPathForFilename(${1:str})


snippet FileUtils\getStringFromFile(str) "csxV3: FileUtils::getStringFromFile "
	FileUtils\getStringFromFile(${1:str})


snippet FileUtils\setFilenameLookupDictionary(map) "csxV3: FileUtils::setFilenameLookupDictionary "
	FileUtils\setFilenameLookupDictionary(${1:map})


snippet FileUtils\isAbsolutePath(str) "csxV3: FileUtils::isAbsolutePath "
	FileUtils\isAbsolutePath(${1:str})


snippet FileUtils\loadFilenameLookupDictionaryFromFile(str) "csxV3: FileUtils::loadFilenameLookupDictionaryFromFile "
	FileUtils\loadFilenameLookupDictionaryFromFile(${1:str})


snippet FileUtils\isPopupNotify! "csxV3: FileUtils::isPopupNotify "
	FileUtils\isPopupNotify!


snippet FileUtils\getValueVectorFromFile(str) "csxV3: FileUtils::getValueVectorFromFile "
	FileUtils\getValueVectorFromFile(${1:str})


snippet FileUtils\writeToFile(map\,str) "csxV3: FileUtils::writeToFile "
	FileUtils\writeToFile(${1:map}, ${2:str})


snippet FileUtils\getValueMapFromFile(str) "csxV3: FileUtils::getValueMapFromFile "
	FileUtils\getValueMapFromFile(${1:str})


snippet FileUtils\addSearchResolutionsOrder(str) "csxV3: FileUtils::addSearchResolutionsOrder "
	FileUtils\addSearchResolutionsOrder(${1:str})


snippet FileUtils\addSearchPath(str) "csxV3: FileUtils::addSearchPath "
	FileUtils\addSearchPath(${1:str})


snippet FileUtils\isFileExist(str) "csxV3: FileUtils::isFileExist "
	FileUtils\isFileExist(${1:str})


snippet FileUtils\purgeCachedEntries! "csxV3: FileUtils::purgeCachedEntries "
	FileUtils\purgeCachedEntries!


snippet FileUtils\fullPathFromRelativeFile(str\,str) "csxV3: FileUtils::fullPathFromRelativeFile "
	FileUtils\fullPathFromRelativeFile(${1:str}, ${2:str})


snippet FileUtils\setPopupNotify(bool) "csxV3: FileUtils::setPopupNotify "
	FileUtils\setPopupNotify(${1:bool})


snippet FileUtils\getWritablePath! "csxV3: FileUtils::getWritablePath "
	FileUtils\getWritablePath!


snippet FileUtils\destroyInstance! "csxV3: FileUtils::destroyInstance "
	FileUtils\destroyInstance!


snippet FiniteTimeAction\setDuration(float) "csxV3: FiniteTimeAction::setDuration "
	FiniteTimeAction\setDuration(${1:float})


snippet FiniteTimeAction\getDuration! "csxV3: FiniteTimeAction::getDuration "
	FiniteTimeAction\getDuration!


snippet FiniteTimeAction\clone! "csxV3: FiniteTimeAction::clone "
	FiniteTimeAction\clone!


snippet FlipX\create(bool) "csxV3: FlipX::create "
	FlipX\create(${1:bool})


snippet FlipX\clone! "csxV3: FlipX::clone "
	FlipX\clone!


snippet FlipX\update(float) "csxV3: FlipX::update "
	FlipX\update(${1:float})


snippet FlipX3D\create(float) "csxV3: FlipX3D::create "
	FlipX3D\create(${1:float})


snippet FlipX3D\clone! "csxV3: FlipX3D::clone "
	FlipX3D\clone!


snippet FlipY\create(bool) "csxV3: FlipY::create "
	FlipY\create(${1:bool})


snippet FlipY\clone! "csxV3: FlipY::clone "
	FlipY\clone!


snippet FlipY\update(float) "csxV3: FlipY::update "
	FlipY\update(${1:float})


snippet FlipY3D\create(float) "csxV3: FlipY3D::create "
	FlipY3D\create(${1:float})


snippet FlipY3D\clone! "csxV3: FlipY3D::clone "
	FlipY3D\clone!


snippet Follow\setBoudarySet(bool) "csxV3: Follow::setBoudarySet "
	Follow\setBoudarySet(${1:bool})


snippet Follow\isBoundarySet! "csxV3: Follow::isBoundarySet "
	Follow\isBoundarySet!


snippet Follow\create(node\,rect) "csxV3: Follow::create "
	Follow\create(${1:node}, ${2:rect})


snippet Follow\step(float) "csxV3: Follow::step "
	Follow\step(${1:float})


snippet Follow\clone! "csxV3: Follow::clone "
	Follow\clone!


snippet Follow\stop! "csxV3: Follow::stop "
	Follow\stop!


snippet Follow\reverse! "csxV3: Follow::reverse "
	Follow\reverse!


snippet FrameData\copy(basedata) "csxV3: FrameData::copy "
	FrameData\copy(${1:basedata})


snippet FrameData\create! "csxV3: FrameData::create "
	FrameData\create!


snippet GLProgram\getFragmentShaderLog! "csxV3: GLProgram::getFragmentShaderLog "
	GLProgram\getFragmentShaderLog!


snippet GLProgram\initWithByteArrays(char\,char) "csxV3: GLProgram::initWithByteArrays "
	GLProgram\initWithByteArrays(${1:char}, ${2:char})


snippet GLProgram\setUniformLocationWithMatrix4fv(int\,float\,int) "csxV3: GLProgram::setUniformLocationWithMatrix4fv "
	GLProgram\setUniformLocationWithMatrix4fv(${1:int}, ${2:float}, ${3:int})


snippet GLProgram\initWithFilenames(str\,str) "csxV3: GLProgram::initWithFilenames "
	GLProgram\initWithFilenames(${1:str}, ${2:str})


snippet GLProgram\getUniformLocationForName(char) "csxV3: GLProgram::getUniformLocationForName "
	GLProgram\getUniformLocationForName(${1:char})


snippet GLProgram\use! "csxV3: GLProgram::use "
	GLProgram\use!


snippet GLProgram\getVertexShaderLog! "csxV3: GLProgram::getVertexShaderLog "
	GLProgram\getVertexShaderLog!


snippet GLProgram\getUniform(str) "csxV3: GLProgram::getUniform "
	GLProgram\getUniform(${1:str})


snippet GLProgram\setUniformsForBuiltins(mat4) "csxV3: GLProgram::setUniformsForBuiltins "
	GLProgram\setUniformsForBuiltins(${1:mat4})


snippet GLProgram\setUniformLocationWith3i(int\,int\,int\,int) "csxV3: GLProgram::setUniformLocationWith3i "
	GLProgram\setUniformLocationWith3i(${1:int}, ${2:int}, ${3:int}, ${4:int})


snippet GLProgram\setUniformLocationWith3iv(int\,int\,int) "csxV3: GLProgram::setUniformLocationWith3iv "
	GLProgram\setUniformLocationWith3iv(${1:int}, ${2:int}, ${3:int})


snippet GLProgram\updateUniforms! "csxV3: GLProgram::updateUniforms "
	GLProgram\updateUniforms!


snippet GLProgram\setUniformLocationWith4iv(int\,int\,int) "csxV3: GLProgram::setUniformLocationWith4iv "
	GLProgram\setUniformLocationWith4iv(${1:int}, ${2:int}, ${3:int})


snippet GLProgram\getUniformLocation(str) "csxV3: GLProgram::getUniformLocation "
	GLProgram\getUniformLocation(${1:str})


snippet GLProgram\setUniformLocationWith1i(int\,int) "csxV3: GLProgram::setUniformLocationWith1i "
	GLProgram\setUniformLocationWith1i(${1:int}, ${2:int})


snippet GLProgram\setUniformLocationWith2iv(int\,int\,int) "csxV3: GLProgram::setUniformLocationWith2iv "
	GLProgram\setUniformLocationWith2iv(${1:int}, ${2:int}, ${3:int})


snippet GLProgram\setUniformLocationWithMatrix3fv(int\,float\,int) "csxV3: GLProgram::setUniformLocationWithMatrix3fv "
	GLProgram\setUniformLocationWithMatrix3fv(${1:int}, ${2:float}, ${3:int})


snippet GLProgram\reset! "csxV3: GLProgram::reset "
	GLProgram\reset!


snippet GLProgram\bindAttribLocation(str\,int) "csxV3: GLProgram::bindAttribLocation "
	GLProgram\bindAttribLocation(${1:str}, ${2:int})


snippet GLProgram\getAttribLocation(str) "csxV3: GLProgram::getAttribLocation "
	GLProgram\getAttribLocation(${1:str})


snippet GLProgram\getVertexAttrib(str) "csxV3: GLProgram::getVertexAttrib "
	GLProgram\getVertexAttrib(${1:str})


snippet GLProgram\setUniformLocationWithMatrix2fv(int\,float\,int) "csxV3: GLProgram::setUniformLocationWithMatrix2fv "
	GLProgram\setUniformLocationWithMatrix2fv(${1:int}, ${2:float}, ${3:int})


snippet GLProgram\setUniformLocationWith4i(int\,int\,int\,int\,int) "csxV3: GLProgram::setUniformLocationWith4i "
	GLProgram\setUniformLocationWith4i(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int})


snippet GLProgram\link! "csxV3: GLProgram::link "
	GLProgram\link!


snippet GLProgram\setUniformLocationWith2i(int\,int\,int) "csxV3: GLProgram::setUniformLocationWith2i "
	GLProgram\setUniformLocationWith2i(${1:int}, ${2:int}, ${3:int})


snippet GLProgram\createWithByteArrays(char\,char) "csxV3: GLProgram::createWithByteArrays "
	GLProgram\createWithByteArrays(${1:char}, ${2:char})


snippet GLProgram\createWithFilenames(str\,str) "csxV3: GLProgram::createWithFilenames "
	GLProgram\createWithFilenames(${1:str}, ${2:str})


snippet GLView\createWithRect(str\,rect\,float) "csxV3: GLView::createWithRect "
	GLView\createWithRect(${1:str}, ${2:rect}, ${3:float})


snippet GLView\create(str) "csxV3: GLView::create "
	GLView\create(${1:str})


snippet GLView\createWithFullScreen(str) "csxV3: GLView::createWithFullScreen "
	GLView\createWithFullScreen(${1:str})


snippet GLView\setIMEKeyboardState(bool) "csxV3: GLView::setIMEKeyboardState "
	GLView\setIMEKeyboardState(${1:bool})


snippet GLViewProtocol\setFrameSize(float\,float) "csxV3: GLViewProtocol::setFrameSize "
	GLViewProtocol\setFrameSize(${1:float}, ${2:float})


snippet GLViewProtocol\getViewPortRect! "csxV3: GLViewProtocol::getViewPortRect "
	GLViewProtocol\getViewPortRect!


snippet GLViewProtocol\setIMEKeyboardState(bool) "csxV3: GLViewProtocol::setIMEKeyboardState "
	GLViewProtocol\setIMEKeyboardState(${1:bool})


snippet GLViewProtocol\setScissorInPoints(float\,float\,float\,float) "csxV3: GLViewProtocol::setScissorInPoints "
	GLViewProtocol\setScissorInPoints(${1:float}, ${2:float}, ${3:float}, ${4:float})


snippet GLViewProtocol\getViewName! "csxV3: GLViewProtocol::getViewName "
	GLViewProtocol\getViewName!


snippet GLViewProtocol\isOpenGLReady! "csxV3: GLViewProtocol::isOpenGLReady "
	GLViewProtocol\isOpenGLReady!


snippet GLViewProtocol\end! "csxV3: GLViewProtocol::end "
	GLViewProtocol\end!


snippet GLViewProtocol\getScaleY! "csxV3: GLViewProtocol::getScaleY "
	GLViewProtocol\getScaleY!


snippet GLViewProtocol\getScaleX! "csxV3: GLViewProtocol::getScaleX "
	GLViewProtocol\getScaleX!


snippet GLViewProtocol\getVisibleOrigin! "csxV3: GLViewProtocol::getVisibleOrigin "
	GLViewProtocol\getVisibleOrigin!


snippet GLViewProtocol\getFrameSize! "csxV3: GLViewProtocol::getFrameSize "
	GLViewProtocol\getFrameSize!


snippet GLViewProtocol\getDesignResolutionSize! "csxV3: GLViewProtocol::getDesignResolutionSize "
	GLViewProtocol\getDesignResolutionSize!


snippet GLViewProtocol\pollInputEvents! "csxV3: GLViewProtocol::pollInputEvents "
	GLViewProtocol\pollInputEvents!


snippet GLViewProtocol\swapBuffers! "csxV3: GLViewProtocol::swapBuffers "
	GLViewProtocol\swapBuffers!


snippet GLViewProtocol\setDesignResolutionSize(float\,float\,resolutionpolicy) "csxV3: GLViewProtocol::setDesignResolutionSize "
	GLViewProtocol\setDesignResolutionSize(${1:float}, ${2:float}, ${3:resolutionpolicy})


snippet GLViewProtocol\getResolutionPolicy! "csxV3: GLViewProtocol::getResolutionPolicy "
	GLViewProtocol\getResolutionPolicy!


snippet GLViewProtocol\setViewPortInPoints(float\,float\,float\,float) "csxV3: GLViewProtocol::setViewPortInPoints "
	GLViewProtocol\setViewPortInPoints(${1:float}, ${2:float}, ${3:float}, ${4:float})


snippet GLViewProtocol\getScissorRect! "csxV3: GLViewProtocol::getScissorRect "
	GLViewProtocol\getScissorRect!


snippet GLViewProtocol\setViewName(str) "csxV3: GLViewProtocol::setViewName "
	GLViewProtocol\setViewName(${1:str})


snippet GLViewProtocol\getVisibleRect! "csxV3: GLViewProtocol::getVisibleRect "
	GLViewProtocol\getVisibleRect!


snippet GLViewProtocol\getVisibleSize! "csxV3: GLViewProtocol::getVisibleSize "
	GLViewProtocol\getVisibleSize!


snippet GUIReader\widgetFromJsonFile(char) "csxV3: GUIReader::widgetFromJsonFile "
	GUIReader\widgetFromJsonFile(${1:char})


snippet GUIReader\getFilePath! "csxV3: GUIReader::getFilePath "
	GUIReader\getFilePath!


snippet GUIReader\getVersionInteger(char) "csxV3: GUIReader::getVersionInteger "
	GUIReader\getVersionInteger(${1:char})


snippet GUIReader\destroyInstance! "csxV3: GUIReader::destroyInstance "
	GUIReader\destroyInstance!


snippet Grid3D\create(size\,texture2d\,bool) "csxV3: Grid3D::create "
	Grid3D\create(${1:size}, ${2:texture2d}, ${3:bool})


snippet Grid3D\calculateVertexPoints! "csxV3: Grid3D::calculateVertexPoints "
	Grid3D\calculateVertexPoints!


snippet Grid3D\blit! "csxV3: Grid3D::blit "
	Grid3D\blit!


snippet Grid3D\reuse! "csxV3: Grid3D::reuse "
	Grid3D\reuse!


snippet Grid3DAction\getGrid! "csxV3: Grid3DAction::getGrid "
	Grid3DAction\getGrid!


snippet GridAction\getGrid! "csxV3: GridAction::getGrid "
	GridAction\getGrid!


snippet GridAction\startWithTarget(node) "csxV3: GridAction::startWithTarget "
	GridAction\startWithTarget(${1:node})


snippet GridAction\clone! "csxV3: GridAction::clone "
	GridAction\clone!


snippet GridBase\setGridSize(size) "csxV3: GridBase::setGridSize "
	GridBase\setGridSize(${1:size})


snippet GridBase\calculateVertexPoints! "csxV3: GridBase::calculateVertexPoints "
	GridBase\calculateVertexPoints!


snippet GridBase\afterDraw(node) "csxV3: GridBase::afterDraw "
	GridBase\afterDraw(${1:node})


snippet GridBase\beforeDraw! "csxV3: GridBase::beforeDraw "
	GridBase\beforeDraw!


snippet GridBase\isTextureFlipped! "csxV3: GridBase::isTextureFlipped "
	GridBase\isTextureFlipped!


snippet GridBase\getGridSize! "csxV3: GridBase::getGridSize "
	GridBase\getGridSize!


snippet GridBase\getStep! "csxV3: GridBase::getStep "
	GridBase\getStep!


snippet GridBase\set2DProjection! "csxV3: GridBase::set2DProjection "
	GridBase\set2DProjection!


snippet GridBase\setStep(vec2) "csxV3: GridBase::setStep "
	GridBase\setStep(${1:vec2})


snippet GridBase\setTextureFlipped(bool) "csxV3: GridBase::setTextureFlipped "
	GridBase\setTextureFlipped(${1:bool})


snippet GridBase\blit! "csxV3: GridBase::blit "
	GridBase\blit!


snippet GridBase\setActive(bool) "csxV3: GridBase::setActive "
	GridBase\setActive(${1:bool})


snippet GridBase\getReuseGrid! "csxV3: GridBase::getReuseGrid "
	GridBase\getReuseGrid!


snippet GridBase\initWithSize(size\,texture2d\,bool) "csxV3: GridBase::initWithSize "
	GridBase\initWithSize(${1:size}, ${2:texture2d}, ${3:bool})


snippet GridBase\setReuseGrid(int) "csxV3: GridBase::setReuseGrid "
	GridBase\setReuseGrid(${1:int})


snippet GridBase\isActive! "csxV3: GridBase::isActive "
	GridBase\isActive!


snippet GridBase\reuse! "csxV3: GridBase::reuse "
	GridBase\reuse!


snippet Helper\seekWidgetByTag(widget\,int) "csxV3: Helper::seekWidgetByTag "
	Helper\seekWidgetByTag(${1:widget}, ${2:int})


snippet Helper\seekActionWidgetByActionTag(widget\,int) "csxV3: Helper::seekActionWidgetByActionTag "
	Helper\seekActionWidgetByActionTag(${1:widget}, ${2:int})


snippet Hide\create! "csxV3: Hide::create "
	Hide\create!


snippet Hide\clone! "csxV3: Hide::clone "
	Hide\clone!


snippet Hide\update(float) "csxV3: Hide::update "
	Hide\update(${1:float})


snippet Image\hasPremultipliedAlpha! "csxV3: Image::hasPremultipliedAlpha "
	Image\hasPremultipliedAlpha!


snippet Image\saveToFile(str\,bool) "csxV3: Image::saveToFile "
	Image\saveToFile(${1:str}, ${2:bool})


snippet Image\getBitPerPixel! "csxV3: Image::getBitPerPixel "
	Image\getBitPerPixel!


snippet Image\hasAlpha! "csxV3: Image::hasAlpha "
	Image\hasAlpha!


snippet Image\isCompressed! "csxV3: Image::isCompressed "
	Image\isCompressed!


snippet Image\getHeight! "csxV3: Image::getHeight "
	Image\getHeight!


snippet Image\initWithImageFile(str) "csxV3: Image::initWithImageFile "
	Image\initWithImageFile(${1:str})


snippet Image\getWidth! "csxV3: Image::getWidth "
	Image\getWidth!


snippet Image\isPremultipliedAlpha! "csxV3: Image::isPremultipliedAlpha "
	Image\isPremultipliedAlpha!


snippet Image\getFileType! "csxV3: Image::getFileType "
	Image\getFileType!


snippet Image\getNumberOfMipmaps! "csxV3: Image::getNumberOfMipmaps "
	Image\getNumberOfMipmaps!


snippet Image\getRenderFormat! "csxV3: Image::getRenderFormat "
	Image\getRenderFormat!


snippet ImageView\loadTexture(str\,texturerestype) "csxV3: ImageView::loadTexture "
	ImageView\loadTexture(${1:str}, ${2:texturerestype})


snippet ImageView\setScale9Enabled(bool) "csxV3: ImageView::setScale9Enabled "
	ImageView\setScale9Enabled(${1:bool})


snippet ImageView\setTextureRect(rect) "csxV3: ImageView::setTextureRect "
	ImageView\setTextureRect(${1:rect})


snippet ImageView\setCapInsets(rect) "csxV3: ImageView::setCapInsets "
	ImageView\setCapInsets(${1:rect})


snippet ImageView\getCapInsets! "csxV3: ImageView::getCapInsets "
	ImageView\getCapInsets!


snippet ImageView\isScale9Enabled! "csxV3: ImageView::isScale9Enabled "
	ImageView\isScale9Enabled!


snippet ImageView\create(str\,texturerestype) "csxV3: ImageView::create "
	ImageView\create(${1:str}, ${2:texturerestype})


snippet ImageView\createInstance! "csxV3: ImageView::createInstance "
	ImageView\createInstance!


snippet ImageView\getVirtualRenderer! "csxV3: ImageView::getVirtualRenderer "
	ImageView\getVirtualRenderer!


snippet ImageView\getDescription! "csxV3: ImageView::getDescription "
	ImageView\getDescription!


snippet ImageView\getVirtualRendererSize! "csxV3: ImageView::getVirtualRendererSize "
	ImageView\getVirtualRendererSize!


snippet ImageView\ignoreContentAdaptWithSize(bool) "csxV3: ImageView::ignoreContentAdaptWithSize "
	ImageView\ignoreContentAdaptWithSize(${1:bool})


snippet JumpBy\create(float\,vec2\,float\,int) "csxV3: JumpBy::create "
	JumpBy\create(${1:float}, ${2:vec2}, ${3:float}, ${4:int})


snippet JumpBy\startWithTarget(node) "csxV3: JumpBy::startWithTarget "
	JumpBy\startWithTarget(${1:node})


snippet JumpBy\clone! "csxV3: JumpBy::clone "
	JumpBy\clone!


snippet JumpBy\reverse! "csxV3: JumpBy::reverse "
	JumpBy\reverse!


snippet JumpTiles3D\getAmplitudeRate! "csxV3: JumpTiles3D::getAmplitudeRate "
	JumpTiles3D\getAmplitudeRate!


snippet JumpTiles3D\setAmplitude(float) "csxV3: JumpTiles3D::setAmplitude "
	JumpTiles3D\setAmplitude(${1:float})


snippet JumpTiles3D\setAmplitudeRate(float) "csxV3: JumpTiles3D::setAmplitudeRate "
	JumpTiles3D\setAmplitudeRate(${1:float})


snippet JumpTiles3D\getAmplitude! "csxV3: JumpTiles3D::getAmplitude "
	JumpTiles3D\getAmplitude!


snippet JumpTiles3D\create(float\,size\,int\,float) "csxV3: JumpTiles3D::create "
	JumpTiles3D\create(${1:float}, ${2:size}, ${3:int}, ${4:float})


snippet JumpTiles3D\clone! "csxV3: JumpTiles3D::clone "
	JumpTiles3D\clone!


snippet JumpTo\create(float\,vec2\,float\,int) "csxV3: JumpTo::create "
	JumpTo\create(${1:float}, ${2:vec2}, ${3:float}, ${4:int})


snippet JumpTo\startWithTarget(node) "csxV3: JumpTo::startWithTarget "
	JumpTo\startWithTarget(${1:node})


snippet JumpTo\clone! "csxV3: JumpTo::clone "
	JumpTo\clone!


snippet Label\isClipMarginEnabled! "csxV3: Label::isClipMarginEnabled "
	Label\isClipMarginEnabled!


snippet Label\enableShadow! "csxV3: Label::enableShadow "
	Label\enableShadow!


snippet Label\setDimensions(int\,int) "csxV3: Label::setDimensions "
	Label\setDimensions(${1:int}, ${2:int})


snippet Label\getString! "csxV3: Label::getString "
	Label\getString!


snippet Label\getHeight! "csxV3: Label::getHeight "
	Label\getHeight!


snippet Label\disableEffect! "csxV3: Label::disableEffect "
	Label\disableEffect!


snippet Label\setTTFConfig(_ttfconfig) "csxV3: Label::setTTFConfig "
	Label\setTTFConfig(${1:_ttfconfig})


snippet Label\getTextColor! "csxV3: Label::getTextColor "
	Label\getTextColor!


snippet Label\getCommonLineHeight! "csxV3: Label::getCommonLineHeight "
	Label\getCommonLineHeight!


snippet Label\setWidth(int) "csxV3: Label::setWidth "
	Label\setWidth(${1:int})


snippet Label\getMaxLineWidth! "csxV3: Label::getMaxLineWidth "
	Label\getMaxLineWidth!


snippet Label\getHorizontalAlignment! "csxV3: Label::getHorizontalAlignment "
	Label\getHorizontalAlignment!


snippet Label\setClipMarginEnabled(bool) "csxV3: Label::setClipMarginEnabled "
	Label\setClipMarginEnabled(${1:bool})


snippet Label\setString(str) "csxV3: Label::setString "
	Label\setString(${1:str})


snippet Label\setSystemFontName(str) "csxV3: Label::setSystemFontName "
	Label\setSystemFontName(${1:str})


snippet Label\setBMFontFilePath(str\,vec2) "csxV3: Label::setBMFontFilePath "
	Label\setBMFontFilePath(${1:str}, ${2:vec2})


snippet Label\getFontAtlas! "csxV3: Label::getFontAtlas "
	Label\getFontAtlas!


snippet Label\setSystemFontSize(float) "csxV3: Label::setSystemFontSize "
	Label\setSystemFontSize(${1:float})


snippet Label\updateContent! "csxV3: Label::updateContent "
	Label\updateContent!


snippet Label\getStringLength! "csxV3: Label::getStringLength "
	Label\getStringLength!


snippet Label\setLineBreakWithoutSpace(bool) "csxV3: Label::setLineBreakWithoutSpace "
	Label\setLineBreakWithoutSpace(${1:bool})


snippet Label\getStringNumLines! "csxV3: Label::getStringNumLines "
	Label\getStringNumLines!


snippet Label\enableOutline(color4b\,int) "csxV3: Label::enableOutline "
	Label\enableOutline(${1:color4b}, ${2:int})


snippet Label\setCharMap(str\,int\,int\,int) "csxV3: Label::setCharMap "
	Label\setCharMap(${1:str}, ${2:int}, ${3:int}, ${4:int})


snippet Label\getDimensions! "csxV3: Label::getDimensions "
	Label\getDimensions!


snippet Label\setMaxLineWidth(int) "csxV3: Label::setMaxLineWidth "
	Label\setMaxLineWidth(${1:int})


snippet Label\getSystemFontName! "csxV3: Label::getSystemFontName "
	Label\getSystemFontName!


snippet Label\setVerticalAlignment(textvalignment) "csxV3: Label::setVerticalAlignment "
	Label\setVerticalAlignment(${1:textvalignment})


snippet Label\getTTFConfig! "csxV3: Label::getTTFConfig "
	Label\getTTFConfig!


snippet Label\getVerticalAlignment! "csxV3: Label::getVerticalAlignment "
	Label\getVerticalAlignment!


snippet Label\setTextColor(color4b) "csxV3: Label::setTextColor "
	Label\setTextColor(${1:color4b})


snippet Label\setHeight(int) "csxV3: Label::setHeight "
	Label\setHeight(${1:int})


snippet Label\getWidth! "csxV3: Label::getWidth "
	Label\getWidth!


snippet Label\enableGlow(color4b) "csxV3: Label::enableGlow "
	Label\enableGlow(${1:color4b})


snippet Label\getLetter(int) "csxV3: Label::getLetter "
	Label\getLetter(${1:int})


snippet Label\getSystemFontSize! "csxV3: Label::getSystemFontSize "
	Label\getSystemFontSize!


snippet Label\getTextAlignment! "csxV3: Label::getTextAlignment "
	Label\getTextAlignment!


snippet Label\getBMFontFilePath! "csxV3: Label::getBMFontFilePath "
	Label\getBMFontFilePath!


snippet Label\setHorizontalAlignment(texthalignment) "csxV3: Label::setHorizontalAlignment "
	Label\setHorizontalAlignment(${1:texthalignment})


snippet Label\setAlignment(texthalignment\,textvalignment) "csxV3: Label::setAlignment "
	Label\setAlignment(${1:texthalignment}, ${2:textvalignment})


snippet Label\createWithBMFont(str\,str\,texthalignment\,int\,vec2) "csxV3: Label::createWithBMFont "
	Label\createWithBMFont(${1:str}, ${2:str}, ${3:texthalignment}, ${4:int}, ${5:vec2})


snippet Label\create! "csxV3: Label::create "
	Label\create!


snippet Label\createWithCharMap(str\,int\,int\,int) "csxV3: Label::createWithCharMap "
	Label\createWithCharMap(${1:str}, ${2:int}, ${3:int}, ${4:int})


snippet Label\createWithSystemFont(str\,str\,float\,size\,texthalignment\,textvalignment) "csxV3: Label::createWithSystemFont "
	Label\createWithSystemFont(${1:str}, ${2:str}, ${3:float}, ${4:size}, ${5:texthalignment}, ${6:textvalignment})


snippet Label\draw(renderer\,mat4\,bool) "csxV3: Label::draw "
	Label\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet Label\addChild(node\,int\,int) "csxV3: Label::addChild "
	Label\addChild(${1:node}, ${2:int}, ${3:int})


snippet Label\setScaleY(float) "csxV3: Label::setScaleY "
	Label\setScaleY(${1:float})


snippet Label\setScaleX(float) "csxV3: Label::setScaleX "
	Label\setScaleX(${1:float})


snippet Label\isOpacityModifyRGB! "csxV3: Label::isOpacityModifyRGB "
	Label\isOpacityModifyRGB!


snippet Label\getScaleY! "csxV3: Label::getScaleY "
	Label\getScaleY!


snippet Label\setBlendFunc(blendfunc) "csxV3: Label::setBlendFunc "
	Label\setBlendFunc(${1:blendfunc})


snippet Label\getScaleX! "csxV3: Label::getScaleX "
	Label\getScaleX!


snippet Label\getDescription! "csxV3: Label::getDescription "
	Label\getDescription!


snippet Label\setOpacityModifyRGB(bool) "csxV3: Label::setOpacityModifyRGB "
	Label\setOpacityModifyRGB(${1:bool})


snippet Label\setScale(float) "csxV3: Label::setScale "
	Label\setScale(${1:float})


snippet Label\sortAllChildren! "csxV3: Label::sortAllChildren "
	Label\sortAllChildren!


snippet Label\updateDisplayedOpacity(char) "csxV3: Label::updateDisplayedOpacity "
	Label\updateDisplayedOpacity(${1:char})


snippet Label\getContentSize! "csxV3: Label::getContentSize "
	Label\getContentSize!


snippet Label\getBoundingBox! "csxV3: Label::getBoundingBox "
	Label\getBoundingBox!


snippet LabelAtlas\setString(str) "csxV3: LabelAtlas::setString "
	LabelAtlas\setString(${1:str})


snippet LabelAtlas\initWithString(str\,texture2d\,int\,int\,int) "csxV3: LabelAtlas::initWithString "
	LabelAtlas\initWithString(${1:str}, ${2:texture2d}, ${3:int}, ${4:int}, ${5:int})


snippet LabelAtlas\updateAtlasValues! "csxV3: LabelAtlas::updateAtlasValues "
	LabelAtlas\updateAtlasValues!


snippet LabelAtlas\getString! "csxV3: LabelAtlas::getString "
	LabelAtlas\getString!


snippet LabelAtlas\create(str\,str\,int\,int\,int) "csxV3: LabelAtlas::create "
	LabelAtlas\create(${1:str}, ${2:str}, ${3:int}, ${4:int}, ${5:int})


snippet LabelBMFont\setLineBreakWithoutSpace(bool) "csxV3: LabelBMFont::setLineBreakWithoutSpace "
	LabelBMFont\setLineBreakWithoutSpace(${1:bool})


snippet LabelBMFont\getBlendFunc! "csxV3: LabelBMFont::getBlendFunc "
	LabelBMFont\getBlendFunc!


snippet LabelBMFont\isOpacityModifyRGB! "csxV3: LabelBMFont::isOpacityModifyRGB "
	LabelBMFont\isOpacityModifyRGB!


snippet LabelBMFont\getLetter(int) "csxV3: LabelBMFont::getLetter "
	LabelBMFont\getLetter(${1:int})


snippet LabelBMFont\getString! "csxV3: LabelBMFont::getString "
	LabelBMFont\getString!


snippet LabelBMFont\setBlendFunc(blendfunc) "csxV3: LabelBMFont::setBlendFunc "
	LabelBMFont\setBlendFunc(${1:blendfunc})


snippet LabelBMFont\setString(str) "csxV3: LabelBMFont::setString "
	LabelBMFont\setString(${1:str})


snippet LabelBMFont\initWithString(str\,str\,float\,texthalignment\,vec2) "csxV3: LabelBMFont::initWithString "
	LabelBMFont\initWithString(${1:str}, ${2:str}, ${3:float}, ${4:texthalignment}, ${5:vec2})


snippet LabelBMFont\setOpacityModifyRGB(bool) "csxV3: LabelBMFont::setOpacityModifyRGB "
	LabelBMFont\setOpacityModifyRGB(${1:bool})


snippet LabelBMFont\getFntFile! "csxV3: LabelBMFont::getFntFile "
	LabelBMFont\getFntFile!


snippet LabelBMFont\setFntFile(str\,vec2) "csxV3: LabelBMFont::setFntFile "
	LabelBMFont\setFntFile(${1:str}, ${2:vec2})


snippet LabelBMFont\setAlignment(texthalignment) "csxV3: LabelBMFont::setAlignment "
	LabelBMFont\setAlignment(${1:texthalignment})


snippet LabelBMFont\setWidth(float) "csxV3: LabelBMFont::setWidth "
	LabelBMFont\setWidth(${1:float})


snippet LabelBMFont\create(str\,str\,float\,texthalignment\,vec2) "csxV3: LabelBMFont::create "
	LabelBMFont\create(${1:str}, ${2:str}, ${3:float}, ${4:texthalignment}, ${5:vec2})


snippet LabelBMFont\getBoundingBox! "csxV3: LabelBMFont::getBoundingBox "
	LabelBMFont\getBoundingBox!


snippet LabelBMFont\getDescription! "csxV3: LabelBMFont::getDescription "
	LabelBMFont\getDescription!


snippet LabelBMFont\setColor(color3b) "csxV3: LabelBMFont::setColor "
	LabelBMFont\setColor(${1:color3b})


snippet LabelBMFont\getChildByTag(int) "csxV3: LabelBMFont::getChildByTag "
	LabelBMFont\getChildByTag(${1:int})


snippet LabelBMFont\getContentSize! "csxV3: LabelBMFont::getContentSize "
	LabelBMFont\getContentSize!


snippet LabelTTF\enableShadow(size\,float\,float\,bool) "csxV3: LabelTTF::enableShadow "
	LabelTTF\enableShadow(${1:size}, ${2:float}, ${3:float}, ${4:bool})


snippet LabelTTF\setDimensions(size) "csxV3: LabelTTF::setDimensions "
	LabelTTF\setDimensions(${1:size})


snippet LabelTTF\getFontSize! "csxV3: LabelTTF::getFontSize "
	LabelTTF\getFontSize!


snippet LabelTTF\getString! "csxV3: LabelTTF::getString "
	LabelTTF\getString!


snippet LabelTTF\setFlippedY(bool) "csxV3: LabelTTF::setFlippedY "
	LabelTTF\setFlippedY(${1:bool})


snippet LabelTTF\setFlippedX(bool) "csxV3: LabelTTF::setFlippedX "
	LabelTTF\setFlippedX(${1:bool})


snippet LabelTTF\setTextDefinition(fontdefinition) "csxV3: LabelTTF::setTextDefinition "
	LabelTTF\setTextDefinition(${1:fontdefinition})


snippet LabelTTF\setFontName(str) "csxV3: LabelTTF::setFontName "
	LabelTTF\setFontName(${1:str})


snippet LabelTTF\getHorizontalAlignment! "csxV3: LabelTTF::getHorizontalAlignment "
	LabelTTF\getHorizontalAlignment!


snippet LabelTTF\initWithStringAndTextDefinition(str\,fontdefinition) "csxV3: LabelTTF::initWithStringAndTextDefinition "
	LabelTTF\initWithStringAndTextDefinition(${1:str}, ${2:fontdefinition})


snippet LabelTTF\setString(str) "csxV3: LabelTTF::setString "
	LabelTTF\setString(${1:str})


snippet LabelTTF\initWithString(str\,str\,float\,size\,texthalignment\,textvalignment) "csxV3: LabelTTF::initWithString "
	LabelTTF\initWithString(${1:str}, ${2:str}, ${3:float}, ${4:size}, ${5:texthalignment}, ${6:textvalignment})


snippet LabelTTF\setFontFillColor(color3b\,bool) "csxV3: LabelTTF::setFontFillColor "
	LabelTTF\setFontFillColor(${1:color3b}, ${2:bool})


snippet LabelTTF\getBlendFunc! "csxV3: LabelTTF::getBlendFunc "
	LabelTTF\getBlendFunc!


snippet LabelTTF\enableStroke(color3b\,float\,bool) "csxV3: LabelTTF::enableStroke "
	LabelTTF\enableStroke(${1:color3b}, ${2:float}, ${3:bool})


snippet LabelTTF\getDimensions! "csxV3: LabelTTF::getDimensions "
	LabelTTF\getDimensions!


snippet LabelTTF\setVerticalAlignment(textvalignment) "csxV3: LabelTTF::setVerticalAlignment "
	LabelTTF\setVerticalAlignment(${1:textvalignment})


snippet LabelTTF\setFontSize(float) "csxV3: LabelTTF::setFontSize "
	LabelTTF\setFontSize(${1:float})


snippet LabelTTF\getVerticalAlignment! "csxV3: LabelTTF::getVerticalAlignment "
	LabelTTF\getVerticalAlignment!


snippet LabelTTF\getTextDefinition! "csxV3: LabelTTF::getTextDefinition "
	LabelTTF\getTextDefinition!


snippet LabelTTF\setBlendFunc(blendfunc) "csxV3: LabelTTF::setBlendFunc "
	LabelTTF\setBlendFunc(${1:blendfunc})


snippet LabelTTF\getFontName! "csxV3: LabelTTF::getFontName "
	LabelTTF\getFontName!


snippet LabelTTF\setHorizontalAlignment(texthalignment) "csxV3: LabelTTF::setHorizontalAlignment "
	LabelTTF\setHorizontalAlignment(${1:texthalignment})


snippet LabelTTF\disableShadow! "csxV3: LabelTTF::disableShadow "
	LabelTTF\disableShadow!


snippet LabelTTF\disableStroke! "csxV3: LabelTTF::disableStroke "
	LabelTTF\disableStroke!


snippet LabelTTF\create(str\,str\,float\,size\,texthalignment\,textvalignment) "csxV3: LabelTTF::create "
	LabelTTF\create(${1:str}, ${2:str}, ${3:float}, ${4:size}, ${5:texthalignment}, ${6:textvalignment})


snippet LabelTTF\createWithFontDefinition(str\,fontdefinition) "csxV3: LabelTTF::createWithFontDefinition "
	LabelTTF\createWithFontDefinition(${1:str}, ${2:fontdefinition})


snippet LabelTTF\getBoundingBox! "csxV3: LabelTTF::getBoundingBox "
	LabelTTF\getBoundingBox!


snippet LabelTTF\getDescription! "csxV3: LabelTTF::getDescription "
	LabelTTF\getDescription!


snippet LabelTTF\getContentSize! "csxV3: LabelTTF::getContentSize "
	LabelTTF\getContentSize!


snippet Layer\create! "csxV3: Layer::create "
	Layer\create!


snippet LayerColor\changeWidthAndHeight(float\,float) "csxV3: LayerColor::changeWidthAndHeight "
	LayerColor\changeWidthAndHeight(${1:float}, ${2:float})


snippet LayerColor\changeHeight(float) "csxV3: LayerColor::changeHeight "
	LayerColor\changeHeight(${1:float})


snippet LayerColor\changeWidth(float) "csxV3: LayerColor::changeWidth "
	LayerColor\changeWidth(${1:float})


snippet LayerColor\create(color4b\,float\,float) "csxV3: LayerColor::create "
	LayerColor\create(${1:color4b}, ${2:float}, ${3:float})


snippet LayerColor\draw(renderer\,mat4\,bool) "csxV3: LayerColor::draw "
	LayerColor\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet LayerColor\getDescription! "csxV3: LayerColor::getDescription "
	LayerColor\getDescription!


snippet LayerGradient\getStartColor! "csxV3: LayerGradient::getStartColor "
	LayerGradient\getStartColor!


snippet LayerGradient\isCompressedInterpolation! "csxV3: LayerGradient::isCompressedInterpolation "
	LayerGradient\isCompressedInterpolation!


snippet LayerGradient\getStartOpacity! "csxV3: LayerGradient::getStartOpacity "
	LayerGradient\getStartOpacity!


snippet LayerGradient\setVector(vec2) "csxV3: LayerGradient::setVector "
	LayerGradient\setVector(${1:vec2})


snippet LayerGradient\setStartOpacity(char) "csxV3: LayerGradient::setStartOpacity "
	LayerGradient\setStartOpacity(${1:char})


snippet LayerGradient\setCompressedInterpolation(bool) "csxV3: LayerGradient::setCompressedInterpolation "
	LayerGradient\setCompressedInterpolation(${1:bool})


snippet LayerGradient\setEndOpacity(char) "csxV3: LayerGradient::setEndOpacity "
	LayerGradient\setEndOpacity(${1:char})


snippet LayerGradient\getVector! "csxV3: LayerGradient::getVector "
	LayerGradient\getVector!


snippet LayerGradient\setEndColor(color3b) "csxV3: LayerGradient::setEndColor "
	LayerGradient\setEndColor(${1:color3b})


snippet LayerGradient\getEndColor! "csxV3: LayerGradient::getEndColor "
	LayerGradient\getEndColor!


snippet LayerGradient\getEndOpacity! "csxV3: LayerGradient::getEndOpacity "
	LayerGradient\getEndOpacity!


snippet LayerGradient\setStartColor(color3b) "csxV3: LayerGradient::setStartColor "
	LayerGradient\setStartColor(${1:color3b})


snippet LayerGradient\create(color4b\,color4b\,vec2) "csxV3: LayerGradient::create "
	LayerGradient\create(${1:color4b}, ${2:color4b}, ${3:vec2})


snippet LayerMultiplex\switchToAndReleaseMe(int) "csxV3: LayerMultiplex::switchToAndReleaseMe "
	LayerMultiplex\switchToAndReleaseMe(${1:int})


snippet LayerMultiplex\addLayer(layer) "csxV3: LayerMultiplex::addLayer "
	LayerMultiplex\addLayer(${1:layer})


snippet LayerMultiplex\switchTo(int) "csxV3: LayerMultiplex::switchTo "
	LayerMultiplex\switchTo(${1:int})


snippet Layout\setBackGroundColorVector(vec2) "csxV3: Layout::setBackGroundColorVector "
	Layout\setBackGroundColorVector(${1:vec2})


snippet Layout\setClippingType(clippingtype) "csxV3: Layout::setClippingType "
	Layout\setClippingType(${1:clippingtype})


snippet Layout\setBackGroundColorType(backgroundcolortype) "csxV3: Layout::setBackGroundColorType "
	Layout\setBackGroundColorType(${1:backgroundcolortype})


snippet Layout\setLoopFocus(bool) "csxV3: Layout::setLoopFocus "
	Layout\setLoopFocus(${1:bool})


snippet Layout\setBackGroundImageColor(color3b) "csxV3: Layout::setBackGroundImageColor "
	Layout\setBackGroundImageColor(${1:color3b})


snippet Layout\getBackGroundColorVector! "csxV3: Layout::getBackGroundColorVector "
	Layout\getBackGroundColorVector!


snippet Layout\getClippingType! "csxV3: Layout::getClippingType "
	Layout\getClippingType!


snippet Layout\isLoopFocus! "csxV3: Layout::isLoopFocus "
	Layout\isLoopFocus!


snippet Layout\removeBackGroundImage! "csxV3: Layout::removeBackGroundImage "
	Layout\removeBackGroundImage!


snippet Layout\getBackGroundColorOpacity! "csxV3: Layout::getBackGroundColorOpacity "
	Layout\getBackGroundColorOpacity!


snippet Layout\isClippingEnabled! "csxV3: Layout::isClippingEnabled "
	Layout\isClippingEnabled!


snippet Layout\setBackGroundImageOpacity(char) "csxV3: Layout::setBackGroundImageOpacity "
	Layout\setBackGroundImageOpacity(${1:char})


snippet Layout\setBackGroundImage(str\,texturerestype) "csxV3: Layout::setBackGroundImage "
	Layout\setBackGroundImage(${1:str}, ${2:texturerestype})


snippet Layout\setBackGroundColor(color3b\,color3b) "csxV3: Layout::setBackGroundColor "
	Layout\setBackGroundColor(${1:color3b}, ${2:color3b})


snippet Layout\requestDoLayout! "csxV3: Layout::requestDoLayout "
	Layout\requestDoLayout!


snippet Layout\getBackGroundImageCapInsets! "csxV3: Layout::getBackGroundImageCapInsets "
	Layout\getBackGroundImageCapInsets!


snippet Layout\getBackGroundColor! "csxV3: Layout::getBackGroundColor "
	Layout\getBackGroundColor!


snippet Layout\setClippingEnabled(bool) "csxV3: Layout::setClippingEnabled "
	Layout\setClippingEnabled(${1:bool})


snippet Layout\getBackGroundImageColor! "csxV3: Layout::getBackGroundImageColor "
	Layout\getBackGroundImageColor!


snippet Layout\isBackGroundImageScale9Enabled! "csxV3: Layout::isBackGroundImageScale9Enabled "
	Layout\isBackGroundImageScale9Enabled!


snippet Layout\getBackGroundColorType! "csxV3: Layout::getBackGroundColorType "
	Layout\getBackGroundColorType!


snippet Layout\getBackGroundEndColor! "csxV3: Layout::getBackGroundEndColor "
	Layout\getBackGroundEndColor!


snippet Layout\setBackGroundColorOpacity(char) "csxV3: Layout::setBackGroundColorOpacity "
	Layout\setBackGroundColorOpacity(${1:char})


snippet Layout\getBackGroundImageOpacity! "csxV3: Layout::getBackGroundImageOpacity "
	Layout\getBackGroundImageOpacity!


snippet Layout\isPassFocusToChild! "csxV3: Layout::isPassFocusToChild "
	Layout\isPassFocusToChild!


snippet Layout\setBackGroundImageCapInsets(rect) "csxV3: Layout::setBackGroundImageCapInsets "
	Layout\setBackGroundImageCapInsets(${1:rect})


snippet Layout\getBackGroundImageTextureSize! "csxV3: Layout::getBackGroundImageTextureSize "
	Layout\getBackGroundImageTextureSize!


snippet Layout\getLayoutType! "csxV3: Layout::getLayoutType "
	Layout\getLayoutType!


snippet Layout\setPassFocusToChild(bool) "csxV3: Layout::setPassFocusToChild "
	Layout\setPassFocusToChild(${1:bool})


snippet Layout\getBackGroundStartColor! "csxV3: Layout::getBackGroundStartColor "
	Layout\getBackGroundStartColor!


snippet Layout\setBackGroundImageScale9Enabled(bool) "csxV3: Layout::setBackGroundImageScale9Enabled "
	Layout\setBackGroundImageScale9Enabled(${1:bool})


snippet Layout\setLayoutType(type) "csxV3: Layout::setLayoutType "
	Layout\setLayoutType(${1:type})


snippet Layout\create! "csxV3: Layout::create "
	Layout\create!


snippet Layout\createInstance! "csxV3: Layout::createInstance "
	Layout\createInstance!


snippet Layout\addChild(node\,int\,int) "csxV3: Layout::addChild "
	Layout\addChild(${1:node}, ${2:int}, ${3:int})


snippet Layout\getDescription! "csxV3: Layout::getDescription "
	Layout\getDescription!


snippet Layout\removeAllChildrenWithCleanup(bool) "csxV3: Layout::removeAllChildrenWithCleanup "
	Layout\removeAllChildrenWithCleanup(${1:bool})


snippet Layout\removeAllChildren! "csxV3: Layout::removeAllChildren "
	Layout\removeAllChildren!


snippet Layout\sortAllChildren! "csxV3: Layout::sortAllChildren "
	Layout\sortAllChildren!


snippet Layout\findNextFocusedWidget(focusdirection\,widget) "csxV3: Layout::findNextFocusedWidget "
	Layout\findNextFocusedWidget(${1:focusdirection}, ${2:widget})


snippet Layout\removeChild(node\,bool) "csxV3: Layout::removeChild "
	Layout\removeChild(${1:node}, ${2:bool})


snippet LayoutParameter\clone! "csxV3: LayoutParameter::clone "
	LayoutParameter\clone!


snippet LayoutParameter\getLayoutType! "csxV3: LayoutParameter::getLayoutType "
	LayoutParameter\getLayoutType!


snippet LayoutParameter\createCloneInstance! "csxV3: LayoutParameter::createCloneInstance "
	LayoutParameter\createCloneInstance!


snippet LayoutParameter\copyProperties(layoutparameter) "csxV3: LayoutParameter::copyProperties "
	LayoutParameter\copyProperties(${1:layoutparameter})


snippet LayoutParameter\create! "csxV3: LayoutParameter::create "
	LayoutParameter\create!


snippet Lens3D\setPosition(vec2) "csxV3: Lens3D::setPosition "
	Lens3D\setPosition(${1:vec2})


snippet Lens3D\setConcave(bool) "csxV3: Lens3D::setConcave "
	Lens3D\setConcave(${1:bool})


snippet Lens3D\setLensEffect(float) "csxV3: Lens3D::setLensEffect "
	Lens3D\setLensEffect(${1:float})


snippet Lens3D\getPosition! "csxV3: Lens3D::getPosition "
	Lens3D\getPosition!


snippet Lens3D\getLensEffect! "csxV3: Lens3D::getLensEffect "
	Lens3D\getLensEffect!


snippet Lens3D\create(float\,size\,vec2\,float) "csxV3: Lens3D::create "
	Lens3D\create(${1:float}, ${2:size}, ${3:vec2}, ${4:float})


snippet Lens3D\clone! "csxV3: Lens3D::clone "
	Lens3D\clone!


snippet LinearLayoutParameter\setGravity(lineargravity) "csxV3: LinearLayoutParameter::setGravity "
	LinearLayoutParameter\setGravity(${1:lineargravity})


snippet LinearLayoutParameter\getGravity! "csxV3: LinearLayoutParameter::getGravity "
	LinearLayoutParameter\getGravity!


snippet LinearLayoutParameter\create! "csxV3: LinearLayoutParameter::create "
	LinearLayoutParameter\create!


snippet LinearLayoutParameter\createCloneInstance! "csxV3: LinearLayoutParameter::createCloneInstance "
	LinearLayoutParameter\createCloneInstance!


snippet LinearLayoutParameter\copyProperties(layoutparameter) "csxV3: LinearLayoutParameter::copyProperties "
	LinearLayoutParameter\copyProperties(${1:layoutparameter})


snippet Liquid\getAmplitudeRate! "csxV3: Liquid::getAmplitudeRate "
	Liquid\getAmplitudeRate!


snippet Liquid\setAmplitude(float) "csxV3: Liquid::setAmplitude "
	Liquid\setAmplitude(${1:float})


snippet Liquid\setAmplitudeRate(float) "csxV3: Liquid::setAmplitudeRate "
	Liquid\setAmplitudeRate(${1:float})


snippet Liquid\getAmplitude! "csxV3: Liquid::getAmplitude "
	Liquid\getAmplitude!


snippet Liquid\create(float\,size\,int\,float) "csxV3: Liquid::create "
	Liquid\create(${1:float}, ${2:size}, ${3:int}, ${4:float})


snippet Liquid\clone! "csxV3: Liquid::clone "
	Liquid\clone!


snippet ListView\getIndex(widget) "csxV3: ListView::getIndex "
	ListView\getIndex(${1:widget})


snippet ListView\removeAllItems! "csxV3: ListView::removeAllItems "
	ListView\removeAllItems!


snippet ListView\setGravity(gravity) "csxV3: ListView::setGravity "
	ListView\setGravity(${1:gravity})


snippet ListView\pushBackCustomItem(widget) "csxV3: ListView::pushBackCustomItem "
	ListView\pushBackCustomItem(${1:widget})


snippet ListView\getItems! "csxV3: ListView::getItems "
	ListView\getItems!


snippet ListView\removeItem(long) "csxV3: ListView::removeItem "
	ListView\removeItem(${1:long})


snippet ListView\getCurSelectedIndex! "csxV3: ListView::getCurSelectedIndex "
	ListView\getCurSelectedIndex!


snippet ListView\insertDefaultItem(long) "csxV3: ListView::insertDefaultItem "
	ListView\insertDefaultItem(${1:long})


snippet ListView\setItemsMargin(float) "csxV3: ListView::setItemsMargin "
	ListView\setItemsMargin(${1:float})


snippet ListView\refreshView! "csxV3: ListView::refreshView "
	ListView\refreshView!


snippet ListView\removeLastItem! "csxV3: ListView::removeLastItem "
	ListView\removeLastItem!


snippet ListView\getItemsMargin! "csxV3: ListView::getItemsMargin "
	ListView\getItemsMargin!


snippet ListView\addEventListener(func) "csxV3: ListView::addEventListener "
	ListView\addEventListener(${1:func})


snippet ListView\getItem(long) "csxV3: ListView::getItem "
	ListView\getItem(${1:long})


snippet ListView\setItemModel(widget) "csxV3: ListView::setItemModel "
	ListView\setItemModel(${1:widget})


snippet ListView\requestRefreshView! "csxV3: ListView::requestRefreshView "
	ListView\requestRefreshView!


snippet ListView\pushBackDefaultItem! "csxV3: ListView::pushBackDefaultItem "
	ListView\pushBackDefaultItem!


snippet ListView\insertCustomItem(widget\,long) "csxV3: ListView::insertCustomItem "
	ListView\insertCustomItem(${1:widget}, ${2:long})


snippet ListView\create! "csxV3: ListView::create "
	ListView\create!


snippet ListView\createInstance! "csxV3: ListView::createInstance "
	ListView\createInstance!


snippet ListView\setDirection(direction) "csxV3: ListView::setDirection "
	ListView\setDirection(${1:direction})


snippet ListView\getDescription! "csxV3: ListView::getDescription "
	ListView\getDescription!


snippet ListView\sortAllChildren! "csxV3: ListView::sortAllChildren "
	ListView\sortAllChildren!


snippet LoadingBar\setPercent(float) "csxV3: LoadingBar::setPercent "
	LoadingBar\setPercent(${1:float})


snippet LoadingBar\loadTexture(str\,texturerestype) "csxV3: LoadingBar::loadTexture "
	LoadingBar\loadTexture(${1:str}, ${2:texturerestype})


snippet LoadingBar\setDirection(direction) "csxV3: LoadingBar::setDirection "
	LoadingBar\setDirection(${1:direction})


snippet LoadingBar\setScale9Enabled(bool) "csxV3: LoadingBar::setScale9Enabled "
	LoadingBar\setScale9Enabled(${1:bool})


snippet LoadingBar\setCapInsets(rect) "csxV3: LoadingBar::setCapInsets "
	LoadingBar\setCapInsets(${1:rect})


snippet LoadingBar\getDirection! "csxV3: LoadingBar::getDirection "
	LoadingBar\getDirection!


snippet LoadingBar\getCapInsets! "csxV3: LoadingBar::getCapInsets "
	LoadingBar\getCapInsets!


snippet LoadingBar\isScale9Enabled! "csxV3: LoadingBar::isScale9Enabled "
	LoadingBar\isScale9Enabled!


snippet LoadingBar\getPercent! "csxV3: LoadingBar::getPercent "
	LoadingBar\getPercent!


snippet LoadingBar\create(str\,float) "csxV3: LoadingBar::create "
	LoadingBar\create(${1:str}, ${2:float})


snippet LoadingBar\createInstance! "csxV3: LoadingBar::createInstance "
	LoadingBar\createInstance!


snippet LoadingBar\getVirtualRenderer! "csxV3: LoadingBar::getVirtualRenderer "
	LoadingBar\getVirtualRenderer!


snippet LoadingBar\getDescription! "csxV3: LoadingBar::getDescription "
	LoadingBar\getDescription!


snippet LoadingBar\getVirtualRendererSize! "csxV3: LoadingBar::getVirtualRendererSize "
	LoadingBar\getVirtualRendererSize!


snippet LoadingBar\ignoreContentAdaptWithSize(bool) "csxV3: LoadingBar::ignoreContentAdaptWithSize "
	LoadingBar\ignoreContentAdaptWithSize(${1:bool})


snippet Menu\setEnabled(bool) "csxV3: Menu::setEnabled "
	Menu\setEnabled(${1:bool})


snippet Menu\alignItemsVertically! "csxV3: Menu::alignItemsVertically "
	Menu\alignItemsVertically!


snippet Menu\isEnabled! "csxV3: Menu::isEnabled "
	Menu\isEnabled!


snippet Menu\alignItemsHorizontallyWithPadding(float) "csxV3: Menu::alignItemsHorizontallyWithPadding "
	Menu\alignItemsHorizontallyWithPadding(${1:float})


snippet Menu\alignItemsVerticallyWithPadding(float) "csxV3: Menu::alignItemsVerticallyWithPadding "
	Menu\alignItemsVerticallyWithPadding(${1:float})


snippet Menu\alignItemsHorizontally! "csxV3: Menu::alignItemsHorizontally "
	Menu\alignItemsHorizontally!


snippet Menu\addChild(node\,int\,int) "csxV3: Menu::addChild "
	Menu\addChild(${1:node}, ${2:int}, ${3:int})


snippet Menu\isOpacityModifyRGB! "csxV3: Menu::isOpacityModifyRGB "
	Menu\isOpacityModifyRGB!


snippet Menu\getDescription! "csxV3: Menu::getDescription "
	Menu\getDescription!


snippet Menu\setOpacityModifyRGB(bool) "csxV3: Menu::setOpacityModifyRGB "
	Menu\setOpacityModifyRGB(${1:bool})


snippet MenuItem\setEnabled(bool) "csxV3: MenuItem::setEnabled "
	MenuItem\setEnabled(${1:bool})


snippet MenuItem\activate! "csxV3: MenuItem::activate "
	MenuItem\activate!


snippet MenuItem\isEnabled! "csxV3: MenuItem::isEnabled "
	MenuItem\isEnabled!


snippet MenuItem\selected! "csxV3: MenuItem::selected "
	MenuItem\selected!


snippet MenuItem\isSelected! "csxV3: MenuItem::isSelected "
	MenuItem\isSelected!


snippet MenuItem\unselected! "csxV3: MenuItem::unselected "
	MenuItem\unselected!


snippet MenuItem\rect! "csxV3: MenuItem::rect "
	MenuItem\rect!


snippet MenuItemFont\getFontSizeObj! "csxV3: MenuItemFont::getFontSizeObj "
	MenuItemFont\getFontSizeObj!


snippet MenuItemFont\getFontNameObj! "csxV3: MenuItemFont::getFontNameObj "
	MenuItemFont\getFontNameObj!


snippet MenuItemFont\setFontSizeObj(int) "csxV3: MenuItemFont::setFontSizeObj "
	MenuItemFont\setFontSizeObj(${1:int})


snippet MenuItemFont\setFontNameObj(str) "csxV3: MenuItemFont::setFontNameObj "
	MenuItemFont\setFontNameObj(${1:str})


snippet MenuItemFont\setFontName(str) "csxV3: MenuItemFont::setFontName "
	MenuItemFont\setFontName(${1:str})


snippet MenuItemFont\getFontSize! "csxV3: MenuItemFont::getFontSize "
	MenuItemFont\getFontSize!


snippet MenuItemFont\getFontName! "csxV3: MenuItemFont::getFontName "
	MenuItemFont\getFontName!


snippet MenuItemImage\setDisabledSpriteFrame(spriteframe) "csxV3: MenuItemImage::setDisabledSpriteFrame "
	MenuItemImage\setDisabledSpriteFrame(${1:spriteframe})


snippet MenuItemImage\setSelectedSpriteFrame(spriteframe) "csxV3: MenuItemImage::setSelectedSpriteFrame "
	MenuItemImage\setSelectedSpriteFrame(${1:spriteframe})


snippet MenuItemLabel\getDisabledColor! "csxV3: MenuItemLabel::getDisabledColor "
	MenuItemLabel\getDisabledColor!


snippet MenuItemLabel\setString(str) "csxV3: MenuItemLabel::setString "
	MenuItemLabel\setString(${1:str})


snippet MenuItemLabel\setLabel(node) "csxV3: MenuItemLabel::setLabel "
	MenuItemLabel\setLabel(${1:node})


snippet MenuItemLabel\setDisabledColor(color3b) "csxV3: MenuItemLabel::setDisabledColor "
	MenuItemLabel\setDisabledColor(${1:color3b})


snippet MenuItemLabel\getLabel! "csxV3: MenuItemLabel::getLabel "
	MenuItemLabel\getLabel!


snippet MenuItemLabel\setEnabled(bool) "csxV3: MenuItemLabel::setEnabled "
	MenuItemLabel\setEnabled(${1:bool})


snippet MenuItemLabel\activate! "csxV3: MenuItemLabel::activate "
	MenuItemLabel\activate!


snippet MenuItemLabel\unselected! "csxV3: MenuItemLabel::unselected "
	MenuItemLabel\unselected!


snippet MenuItemSprite\setEnabled(bool) "csxV3: MenuItemSprite::setEnabled "
	MenuItemSprite\setEnabled(${1:bool})


snippet MenuItemSprite\selected! "csxV3: MenuItemSprite::selected "
	MenuItemSprite\selected!


snippet MenuItemSprite\setNormalImage(node) "csxV3: MenuItemSprite::setNormalImage "
	MenuItemSprite\setNormalImage(${1:node})


snippet MenuItemSprite\setDisabledImage(node) "csxV3: MenuItemSprite::setDisabledImage "
	MenuItemSprite\setDisabledImage(${1:node})


snippet MenuItemSprite\setSelectedImage(node) "csxV3: MenuItemSprite::setSelectedImage "
	MenuItemSprite\setSelectedImage(${1:node})


snippet MenuItemSprite\getDisabledImage! "csxV3: MenuItemSprite::getDisabledImage "
	MenuItemSprite\getDisabledImage!


snippet MenuItemSprite\getSelectedImage! "csxV3: MenuItemSprite::getSelectedImage "
	MenuItemSprite\getSelectedImage!


snippet MenuItemSprite\getNormalImage! "csxV3: MenuItemSprite::getNormalImage "
	MenuItemSprite\getNormalImage!


snippet MenuItemToggle\setSubItems(array) "csxV3: MenuItemToggle::setSubItems "
	MenuItemToggle\setSubItems(${1:array})


snippet MenuItemToggle\getSelectedIndex! "csxV3: MenuItemToggle::getSelectedIndex "
	MenuItemToggle\getSelectedIndex!


snippet MenuItemToggle\addSubItem(menuitem) "csxV3: MenuItemToggle::addSubItem "
	MenuItemToggle\addSubItem(${1:menuitem})


snippet MenuItemToggle\getSelectedItem! "csxV3: MenuItemToggle::getSelectedItem "
	MenuItemToggle\getSelectedItem!


snippet MenuItemToggle\setSelectedIndex(int) "csxV3: MenuItemToggle::setSelectedIndex "
	MenuItemToggle\setSelectedIndex(${1:int})


snippet MenuItemToggle\setEnabled(bool) "csxV3: MenuItemToggle::setEnabled "
	MenuItemToggle\setEnabled(${1:bool})


snippet MenuItemToggle\activate! "csxV3: MenuItemToggle::activate "
	MenuItemToggle\activate!


snippet MenuItemToggle\unselected! "csxV3: MenuItemToggle::unselected "
	MenuItemToggle\unselected!


snippet MotionStreak\reset! "csxV3: MotionStreak::reset "
	MotionStreak\reset!


snippet MotionStreak\setTexture(texture2d) "csxV3: MotionStreak::setTexture "
	MotionStreak\setTexture(${1:texture2d})


snippet MotionStreak\getTexture! "csxV3: MotionStreak::getTexture "
	MotionStreak\getTexture!


snippet MotionStreak\tintWithColor(color3b) "csxV3: MotionStreak::tintWithColor "
	MotionStreak\tintWithColor(${1:color3b})


snippet MotionStreak\setStartingPositionInitialized(bool) "csxV3: MotionStreak::setStartingPositionInitialized "
	MotionStreak\setStartingPositionInitialized(${1:bool})


snippet MotionStreak\isStartingPositionInitialized! "csxV3: MotionStreak::isStartingPositionInitialized "
	MotionStreak\isStartingPositionInitialized!


snippet MotionStreak\isFastMode! "csxV3: MotionStreak::isFastMode "
	MotionStreak\isFastMode!


snippet MotionStreak\setFastMode(bool) "csxV3: MotionStreak::setFastMode "
	MotionStreak\setFastMode(${1:bool})


snippet MotionStreak\create(float\,float\,float\,color3b\,str) "csxV3: MotionStreak::create "
	MotionStreak\create(${1:float}, ${2:float}, ${3:float}, ${4:color3b}, ${5:str})


snippet MotionStreak\isOpacityModifyRGB! "csxV3: MotionStreak::isOpacityModifyRGB "
	MotionStreak\isOpacityModifyRGB!


snippet MotionStreak\setPositionY(float) "csxV3: MotionStreak::setPositionY "
	MotionStreak\setPositionY(${1:float})


snippet MotionStreak\setPositionX(float) "csxV3: MotionStreak::setPositionX "
	MotionStreak\setPositionX(${1:float})


snippet MotionStreak\getPositionY! "csxV3: MotionStreak::getPositionY "
	MotionStreak\getPositionY!


snippet MotionStreak\getPositionX! "csxV3: MotionStreak::getPositionX "
	MotionStreak\getPositionX!


snippet MotionStreak\setOpacity(char) "csxV3: MotionStreak::setOpacity "
	MotionStreak\setOpacity(${1:char})


snippet MotionStreak\setOpacityModifyRGB(bool) "csxV3: MotionStreak::setOpacityModifyRGB "
	MotionStreak\setOpacityModifyRGB(${1:bool})


snippet MotionStreak\getOpacity! "csxV3: MotionStreak::getOpacity "
	MotionStreak\getOpacity!


snippet MotionStreak\setPosition(float\,float) "csxV3: MotionStreak::setPosition "
	MotionStreak\setPosition(${1:float}, ${2:float})


snippet MoveBy\create(float\,vec2) "csxV3: MoveBy::create "
	MoveBy\create(${1:float}, ${2:vec2})


snippet MoveBy\startWithTarget(node) "csxV3: MoveBy::startWithTarget "
	MoveBy\startWithTarget(${1:node})


snippet MoveBy\clone! "csxV3: MoveBy::clone "
	MoveBy\clone!


snippet MoveBy\reverse! "csxV3: MoveBy::reverse "
	MoveBy\reverse!


snippet MoveTo\create(float\,vec2) "csxV3: MoveTo::create "
	MoveTo\create(${1:float}, ${2:vec2})


snippet MoveTo\startWithTarget(node) "csxV3: MoveTo::startWithTarget "
	MoveTo\startWithTarget(${1:node})


snippet MovementBoneData\init! "csxV3: MovementBoneData::init "
	MovementBoneData\init!


snippet MovementBoneData\getFrameData(int) "csxV3: MovementBoneData::getFrameData "
	MovementBoneData\getFrameData(${1:int})


snippet MovementBoneData\addFrameData(framedata) "csxV3: MovementBoneData::addFrameData "
	MovementBoneData\addFrameData(${1:framedata})


snippet MovementBoneData\create! "csxV3: MovementBoneData::create "
	MovementBoneData\create!


snippet MovementData\getMovementBoneData(str) "csxV3: MovementData::getMovementBoneData "
	MovementData\getMovementBoneData(${1:str})


snippet MovementData\addMovementBoneData(movementbonedata) "csxV3: MovementData::addMovementBoneData "
	MovementData\addMovementBoneData(${1:movementbonedata})


snippet MovementData\create! "csxV3: MovementData::create "
	MovementData\create!


snippet Node\addChild(node\,int\,int) "csxV3: Node::addChild "
	Node\addChild(${1:node}, ${2:int}, ${3:int})


snippet Node\removeComponent(str) "csxV3: Node::removeComponent "
	Node\removeComponent(${1:str})


snippet Node\setPhysicsBody(physicsbody) "csxV3: Node::setPhysicsBody "
	Node\setPhysicsBody(${1:physicsbody})


snippet Node\getDescription! "csxV3: Node::getDescription "
	Node\getDescription!


snippet Node\setRotationSkewY(float) "csxV3: Node::setRotationSkewY "
	Node\setRotationSkewY(${1:float})


snippet Node\setOpacityModifyRGB(bool) "csxV3: Node::setOpacityModifyRGB "
	Node\setOpacityModifyRGB(${1:bool})


snippet Node\setCascadeOpacityEnabled(bool) "csxV3: Node::setCascadeOpacityEnabled "
	Node\setCascadeOpacityEnabled(${1:bool})


snippet Node\getChildren! "csxV3: Node::getChildren "
	Node\getChildren!


snippet Node\pause! "csxV3: Node::pause "
	Node\pause!


snippet Node\convertToWorldSpaceAR(vec2) "csxV3: Node::convertToWorldSpaceAR "
	Node\convertToWorldSpaceAR(${1:vec2})


snippet Node\isIgnoreAnchorPointForPosition! "csxV3: Node::isIgnoreAnchorPointForPosition "
	Node\isIgnoreAnchorPointForPosition!


snippet Node\updateDisplayedOpacity(char) "csxV3: Node::updateDisplayedOpacity "
	Node\updateDisplayedOpacity(${1:char})


snippet Node\setRotation(float) "csxV3: Node::setRotation "
	Node\setRotation(${1:float})


snippet Node\setScaleZ(float) "csxV3: Node::setScaleZ "
	Node\setScaleZ(${1:float})


snippet Node\setScaleY(float) "csxV3: Node::setScaleY "
	Node\setScaleY(${1:float})


snippet Node\setScaleX(float) "csxV3: Node::setScaleX "
	Node\setScaleX(${1:float})


snippet Node\setRotationSkewX(float) "csxV3: Node::setRotationSkewX "
	Node\setRotationSkewX(${1:float})


snippet Node\removeAllComponents! "csxV3: Node::removeAllComponents "
	Node\removeAllComponents!


snippet Node\_setLocalZOrder(int) "csxV3: Node::_setLocalZOrder "
	Node\_setLocalZOrder(${1:int})


snippet Node\getTag! "csxV3: Node::getTag "
	Node\getTag!


snippet Node\getGLProgram! "csxV3: Node::getGLProgram "
	Node\getGLProgram!


snippet Node\getNodeToWorldTransform! "csxV3: Node::getNodeToWorldTransform "
	Node\getNodeToWorldTransform!


snippet Node\getPosition3D! "csxV3: Node::getPosition3D "
	Node\getPosition3D!


snippet Node\removeChild(node\,bool) "csxV3: Node::removeChild "
	Node\removeChild(${1:node}, ${2:bool})


snippet Node\convertToWorldSpace(vec2) "csxV3: Node::convertToWorldSpace "
	Node\convertToWorldSpace(${1:vec2})


snippet Node\getScene! "csxV3: Node::getScene "
	Node\getScene!


snippet Node\getEventDispatcher! "csxV3: Node::getEventDispatcher "
	Node\getEventDispatcher!


snippet Node\setSkewX(float) "csxV3: Node::setSkewX "
	Node\setSkewX(${1:float})


snippet Node\setGLProgramState(glprogramstate) "csxV3: Node::setGLProgramState "
	Node\setGLProgramState(${1:glprogramstate})


snippet Node\getOpacity! "csxV3: Node::getOpacity "
	Node\getOpacity!


snippet Node\convertTouchToNodeSpace(touch) "csxV3: Node::convertTouchToNodeSpace "
	Node\convertTouchToNodeSpace(${1:touch})


snippet Node\removeAllChildrenWithCleanup(bool) "csxV3: Node::removeAllChildrenWithCleanup "
	Node\removeAllChildrenWithCleanup(${1:bool})


snippet Node\getNodeToParentAffineTransform! "csxV3: Node::getNodeToParentAffineTransform "
	Node\getNodeToParentAffineTransform!


snippet Node\isCascadeOpacityEnabled! "csxV3: Node::isCascadeOpacityEnabled "
	Node\isCascadeOpacityEnabled!


snippet Node\setParent(node) "csxV3: Node::setParent "
	Node\setParent(${1:node})


snippet Node\getRotation3D! "csxV3: Node::getRotation3D "
	Node\getRotation3D!


snippet Node\getNodeToParentTransform! "csxV3: Node::getNodeToParentTransform "
	Node\getNodeToParentTransform!


snippet Node\convertTouchToNodeSpaceAR(touch) "csxV3: Node::convertTouchToNodeSpaceAR "
	Node\convertTouchToNodeSpaceAR(${1:touch})


snippet Node\convertToNodeSpace(vec2) "csxV3: Node::convertToNodeSpace "
	Node\convertToNodeSpace(${1:vec2})


snippet Node\resume! "csxV3: Node::resume "
	Node\resume!


snippet Node\getPhysicsBody! "csxV3: Node::getPhysicsBody "
	Node\getPhysicsBody!


snippet Node\setPosition(float\,float) "csxV3: Node::setPosition "
	Node\setPosition(${1:float}, ${2:float})


snippet Node\stopActionByTag(int) "csxV3: Node::stopActionByTag "
	Node\stopActionByTag(${1:int})


snippet Node\reorderChild(node\,int) "csxV3: Node::reorderChild "
	Node\reorderChild(${1:node}, ${2:int})


snippet Node\ignoreAnchorPointForPosition(bool) "csxV3: Node::ignoreAnchorPointForPosition "
	Node\ignoreAnchorPointForPosition(${1:bool})


snippet Node\setSkewY(float) "csxV3: Node::setSkewY "
	Node\setSkewY(${1:float})


snippet Node\setPositionZ(float) "csxV3: Node::setPositionZ "
	Node\setPositionZ(${1:float})


snippet Node\setRotation3D(vec3) "csxV3: Node::setRotation3D "
	Node\setRotation3D(${1:vec3})


snippet Node\setPositionX(float) "csxV3: Node::setPositionX "
	Node\setPositionX(${1:float})


snippet Node\setNodeToParentTransform(mat4) "csxV3: Node::setNodeToParentTransform "
	Node\setNodeToParentTransform(${1:mat4})


snippet Node\getAnchorPoint! "csxV3: Node::getAnchorPoint "
	Node\getAnchorPoint!


snippet Node\getNumberOfRunningActions! "csxV3: Node::getNumberOfRunningActions "
	Node\getNumberOfRunningActions!


snippet Node\updateTransform! "csxV3: Node::updateTransform "
	Node\updateTransform!


snippet Node\isVisible! "csxV3: Node::isVisible "
	Node\isVisible!


snippet Node\getChildrenCount! "csxV3: Node::getChildrenCount "
	Node\getChildrenCount!


snippet Node\convertToNodeSpaceAR(vec2) "csxV3: Node::convertToNodeSpaceAR "
	Node\convertToNodeSpaceAR(${1:vec2})


snippet Node\addComponent(component) "csxV3: Node::addComponent "
	Node\addComponent(${1:component})


snippet Node\isOpacityModifyRGB! "csxV3: Node::isOpacityModifyRGB "
	Node\isOpacityModifyRGB!


snippet Node\getRotation! "csxV3: Node::getRotation "
	Node\getRotation!


snippet Node\getAnchorPointInPoints! "csxV3: Node::getAnchorPointInPoints "
	Node\getAnchorPointInPoints!


snippet Node\runAction(action) "csxV3: Node::runAction "
	Node\runAction(${1:action})


snippet Node\getGLProgramState! "csxV3: Node::getGLProgramState "
	Node\getGLProgramState!


snippet Node\setScheduler(scheduler) "csxV3: Node::setScheduler "
	Node\setScheduler(${1:scheduler})


snippet Node\stopAllActions! "csxV3: Node::stopAllActions "
	Node\stopAllActions!


snippet Node\getSkewX! "csxV3: Node::getSkewX "
	Node\getSkewX!


snippet Node\getSkewY! "csxV3: Node::getSkewY "
	Node\getSkewY!


snippet Node\getDisplayedColor! "csxV3: Node::getDisplayedColor "
	Node\getDisplayedColor!


snippet Node\getActionByTag(int) "csxV3: Node::getActionByTag "
	Node\getActionByTag(${1:int})


snippet Node\setAdditionalTransform(mat4) "csxV3: Node::setAdditionalTransform "
	Node\setAdditionalTransform(${1:mat4})


snippet Node\getDisplayedOpacity! "csxV3: Node::getDisplayedOpacity "
	Node\getDisplayedOpacity!


snippet Node\getLocalZOrder! "csxV3: Node::getLocalZOrder "
	Node\getLocalZOrder!


snippet Node\getScheduler! "csxV3: Node::getScheduler "
	Node\getScheduler!


snippet Node\getParentToNodeAffineTransform! "csxV3: Node::getParentToNodeAffineTransform "
	Node\getParentToNodeAffineTransform!


snippet Node\getOrderOfArrival! "csxV3: Node::getOrderOfArrival "
	Node\getOrderOfArrival!


snippet Node\setActionManager(actionmanager) "csxV3: Node::setActionManager "
	Node\setActionManager(${1:actionmanager})


snippet Node\setColor(color3b) "csxV3: Node::setColor "
	Node\setColor(${1:color3b})


snippet Node\isRunning! "csxV3: Node::isRunning "
	Node\isRunning!


snippet Node\getParent! "csxV3: Node::getParent "
	Node\getParent!


snippet Node\getPositionZ! "csxV3: Node::getPositionZ "
	Node\getPositionZ!


snippet Node\getPositionY! "csxV3: Node::getPositionY "
	Node\getPositionY!


snippet Node\getPositionX! "csxV3: Node::getPositionX "
	Node\getPositionX!


snippet Node\removeChildByTag(int\,bool) "csxV3: Node::removeChildByTag "
	Node\removeChildByTag(${1:int}, ${2:bool})


snippet Node\setPositionY(float) "csxV3: Node::setPositionY "
	Node\setPositionY(${1:float})


snippet Node\getNodeToWorldAffineTransform! "csxV3: Node::getNodeToWorldAffineTransform "
	Node\getNodeToWorldAffineTransform!


snippet Node\updateDisplayedColor(color3b) "csxV3: Node::updateDisplayedColor "
	Node\updateDisplayedColor(${1:color3b})


snippet Node\setVisible(bool) "csxV3: Node::setVisible "
	Node\setVisible(${1:bool})


snippet Node\getParentToNodeTransform! "csxV3: Node::getParentToNodeTransform "
	Node\getParentToNodeTransform!


snippet Node\setGlobalZOrder(float) "csxV3: Node::setGlobalZOrder "
	Node\setGlobalZOrder(${1:float})


snippet Node\setScale(float\,float) "csxV3: Node::setScale "
	Node\setScale(${1:float}, ${2:float})


snippet Node\getChildByTag(int) "csxV3: Node::getChildByTag "
	Node\getChildByTag(${1:int})


snippet Node\setOrderOfArrival(int) "csxV3: Node::setOrderOfArrival "
	Node\setOrderOfArrival(${1:int})


snippet Node\getScaleZ! "csxV3: Node::getScaleZ "
	Node\getScaleZ!


snippet Node\getScaleY! "csxV3: Node::getScaleY "
	Node\getScaleY!


snippet Node\getScaleX! "csxV3: Node::getScaleX "
	Node\getScaleX!


snippet Node\setLocalZOrder(int) "csxV3: Node::setLocalZOrder "
	Node\setLocalZOrder(${1:int})


snippet Node\getWorldToNodeAffineTransform! "csxV3: Node::getWorldToNodeAffineTransform "
	Node\getWorldToNodeAffineTransform!


snippet Node\setCascadeColorEnabled(bool) "csxV3: Node::setCascadeColorEnabled "
	Node\setCascadeColorEnabled(${1:bool})


snippet Node\setOpacity(char) "csxV3: Node::setOpacity "
	Node\setOpacity(${1:char})


snippet Node\cleanup! "csxV3: Node::cleanup "
	Node\cleanup!


snippet Node\getComponent(str) "csxV3: Node::getComponent "
	Node\getComponent(${1:str})


snippet Node\getContentSize! "csxV3: Node::getContentSize "
	Node\getContentSize!


snippet Node\getColor! "csxV3: Node::getColor "
	Node\getColor!


snippet Node\getBoundingBox! "csxV3: Node::getBoundingBox "
	Node\getBoundingBox!


snippet Node\setEventDispatcher(eventdispatcher) "csxV3: Node::setEventDispatcher "
	Node\setEventDispatcher(${1:eventdispatcher})


snippet Node\getGlobalZOrder! "csxV3: Node::getGlobalZOrder "
	Node\getGlobalZOrder!


snippet Node\draw(renderer\,mat4\,bool) "csxV3: Node::draw "
	Node\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet Node\setUserObject(ref) "csxV3: Node::setUserObject "
	Node\setUserObject(${1:ref})


snippet Node\removeFromParentAndCleanup(bool) "csxV3: Node::removeFromParentAndCleanup "
	Node\removeFromParentAndCleanup(${1:bool})


snippet Node\setPosition3D(vec3) "csxV3: Node::setPosition3D "
	Node\setPosition3D(${1:vec3})


snippet Node\update(float) "csxV3: Node::update "
	Node\update(${1:float})


snippet Node\sortAllChildren! "csxV3: Node::sortAllChildren "
	Node\sortAllChildren!


snippet Node\getWorldToNodeTransform! "csxV3: Node::getWorldToNodeTransform "
	Node\getWorldToNodeTransform!


snippet Node\setGLProgram(glprogram) "csxV3: Node::setGLProgram "
	Node\setGLProgram(${1:glprogram})


snippet Node\getScale! "csxV3: Node::getScale "
	Node\getScale!


snippet Node\getRotationSkewX! "csxV3: Node::getRotationSkewX "
	Node\getRotationSkewX!


snippet Node\getRotationSkewY! "csxV3: Node::getRotationSkewY "
	Node\getRotationSkewY!


snippet Node\setTag(int) "csxV3: Node::setTag "
	Node\setTag(${1:int})


snippet Node\isCascadeColorEnabled! "csxV3: Node::isCascadeColorEnabled "
	Node\isCascadeColorEnabled!


snippet Node\stopAction(action) "csxV3: Node::stopAction "
	Node\stopAction(${1:action})


snippet Node\getActionManager! "csxV3: Node::getActionManager "
	Node\getActionManager!


snippet NodeGrid\setTarget(node) "csxV3: NodeGrid::setTarget "
	NodeGrid\setTarget(${1:node})


snippet NodeGrid\getGrid! "csxV3: NodeGrid::getGrid "
	NodeGrid\getGrid!


snippet NodeGrid\setGrid(gridbase) "csxV3: NodeGrid::setGrid "
	NodeGrid\setGrid(${1:gridbase})


snippet OrbitCamera\sphericalRadius(float\,float\,float) "csxV3: OrbitCamera::sphericalRadius "
	OrbitCamera\sphericalRadius(${1:float}, ${2:float}, ${3:float})


snippet OrbitCamera\create(float\,float\,float\,float\,float\,float\,float) "csxV3: OrbitCamera::create "
	OrbitCamera\create(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float})


snippet OrbitCamera\startWithTarget(node) "csxV3: OrbitCamera::startWithTarget "
	OrbitCamera\startWithTarget(${1:node})


snippet OrbitCamera\clone! "csxV3: OrbitCamera::clone "
	OrbitCamera\clone!


snippet PageTurn3D\create(float\,size) "csxV3: PageTurn3D::create "
	PageTurn3D\create(${1:float}, ${2:size})


snippet PageTurn3D\clone! "csxV3: PageTurn3D::clone "
	PageTurn3D\clone!


snippet PageView\getCurPageIndex! "csxV3: PageView::getCurPageIndex "
	PageView\getCurPageIndex!


snippet PageView\addWidgetToPage(widget\,long\,bool) "csxV3: PageView::addWidgetToPage "
	PageView\addWidgetToPage(${1:widget}, ${2:long}, ${3:bool})


snippet PageView\getPage(long) "csxV3: PageView::getPage "
	PageView\getPage(${1:long})


snippet PageView\removePage(layout) "csxV3: PageView::removePage "
	PageView\removePage(${1:layout})


snippet PageView\addEventListener(func) "csxV3: PageView::addEventListener "
	PageView\addEventListener(${1:func})


snippet PageView\insertPage(layout\,int) "csxV3: PageView::insertPage "
	PageView\insertPage(${1:layout}, ${2:int})


snippet PageView\scrollToPage(long) "csxV3: PageView::scrollToPage "
	PageView\scrollToPage(${1:long})


snippet PageView\removePageAtIndex(long) "csxV3: PageView::removePageAtIndex "
	PageView\removePageAtIndex(${1:long})


snippet PageView\getPages! "csxV3: PageView::getPages "
	PageView\getPages!


snippet PageView\removeAllPages! "csxV3: PageView::removeAllPages "
	PageView\removeAllPages!


snippet PageView\addPage(layout) "csxV3: PageView::addPage "
	PageView\addPage(${1:layout})


snippet PageView\create! "csxV3: PageView::create "
	PageView\create!


snippet PageView\createInstance! "csxV3: PageView::createInstance "
	PageView\createInstance!


snippet PageView\getLayoutType! "csxV3: PageView::getLayoutType "
	PageView\getLayoutType!


snippet PageView\getDescription! "csxV3: PageView::getDescription "
	PageView\getDescription!


snippet PageView\update(float) "csxV3: PageView::update "
	PageView\update(${1:float})


snippet PageView\setLayoutType(type) "csxV3: PageView::setLayoutType "
	PageView\setLayoutType(${1:type})


snippet ParallaxNode\addChild(node\,int\,vec2\,vec2) "csxV3: ParallaxNode::addChild "
	ParallaxNode\addChild(${1:node}, ${2:int}, ${3:vec2}, ${4:vec2})


snippet ParallaxNode\removeAllChildrenWithCleanup(bool) "csxV3: ParallaxNode::removeAllChildrenWithCleanup "
	ParallaxNode\removeAllChildrenWithCleanup(${1:bool})


snippet ParallaxNode\setParallaxArray(_ccarray) "csxV3: ParallaxNode::setParallaxArray "
	ParallaxNode\setParallaxArray(${1:_ccarray})


snippet ParallaxNode\create! "csxV3: ParallaxNode::create "
	ParallaxNode\create!


snippet ParallaxNode\addChild(node\,int\,int) "csxV3: ParallaxNode::addChild "
	ParallaxNode\addChild(${1:node}, ${2:int}, ${3:int})


snippet ParticleBatchNode\setTexture(texture2d) "csxV3: ParticleBatchNode::setTexture "
	ParticleBatchNode\setTexture(${1:texture2d})


snippet ParticleBatchNode\disableParticle(int) "csxV3: ParticleBatchNode::disableParticle "
	ParticleBatchNode\disableParticle(${1:int})


snippet ParticleBatchNode\getTexture! "csxV3: ParticleBatchNode::getTexture "
	ParticleBatchNode\getTexture!


snippet ParticleBatchNode\setTextureAtlas(textureatlas) "csxV3: ParticleBatchNode::setTextureAtlas "
	ParticleBatchNode\setTextureAtlas(${1:textureatlas})


snippet ParticleBatchNode\removeAllChildrenWithCleanup(bool) "csxV3: ParticleBatchNode::removeAllChildrenWithCleanup "
	ParticleBatchNode\removeAllChildrenWithCleanup(${1:bool})


snippet ParticleBatchNode\getTextureAtlas! "csxV3: ParticleBatchNode::getTextureAtlas "
	ParticleBatchNode\getTextureAtlas!


snippet ParticleBatchNode\insertChild(particlesystem\,int) "csxV3: ParticleBatchNode::insertChild "
	ParticleBatchNode\insertChild(${1:particlesystem}, ${2:int})


snippet ParticleBatchNode\removeChildAtIndex(int\,bool) "csxV3: ParticleBatchNode::removeChildAtIndex "
	ParticleBatchNode\removeChildAtIndex(${1:int}, ${2:bool})


snippet ParticleBatchNode\create(str\,int) "csxV3: ParticleBatchNode::create "
	ParticleBatchNode\create(${1:str}, ${2:int})


snippet ParticleBatchNode\createWithTexture(texture2d\,int) "csxV3: ParticleBatchNode::createWithTexture "
	ParticleBatchNode\createWithTexture(${1:texture2d}, ${2:int})


snippet ParticleBatchNode\addChild(node\,int\,int) "csxV3: ParticleBatchNode::addChild "
	ParticleBatchNode\addChild(${1:node}, ${2:int}, ${3:int})


snippet ParticleBatchNode\draw(renderer\,mat4\,bool) "csxV3: ParticleBatchNode::draw "
	ParticleBatchNode\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet ParticleBatchNode\reorderChild(node\,int) "csxV3: ParticleBatchNode::reorderChild "
	ParticleBatchNode\reorderChild(${1:node}, ${2:int})


snippet ParticleDisplayData\create! "csxV3: ParticleDisplayData::create "
	ParticleDisplayData\create!


snippet ParticleExplosion\create! "csxV3: ParticleExplosion::create "
	ParticleExplosion\create!


snippet ParticleFire\create! "csxV3: ParticleFire::create "
	ParticleFire\create!


snippet ParticleFireworks\create! "csxV3: ParticleFireworks::create "
	ParticleFireworks\create!


snippet ParticleFlower\create! "csxV3: ParticleFlower::create "
	ParticleFlower\create!


snippet ParticleGalaxy\create! "csxV3: ParticleGalaxy::create "
	ParticleGalaxy\create!


snippet ParticleMeteor\create! "csxV3: ParticleMeteor::create "
	ParticleMeteor\create!


snippet ParticleRain\create! "csxV3: ParticleRain::create "
	ParticleRain\create!


snippet ParticleSmoke\create! "csxV3: ParticleSmoke::create "
	ParticleSmoke\create!


snippet ParticleSnow\create! "csxV3: ParticleSnow::create "
	ParticleSnow\create!


snippet ParticleSpiral\create! "csxV3: ParticleSpiral::create "
	ParticleSpiral\create!


snippet ParticleSun\create! "csxV3: ParticleSun::create "
	ParticleSun\create!


snippet ParticleSystem\getStartSizeVar! "csxV3: ParticleSystem::getStartSizeVar "
	ParticleSystem\getStartSizeVar!


snippet ParticleSystem\getTexture! "csxV3: ParticleSystem::getTexture "
	ParticleSystem\getTexture!


snippet ParticleSystem\isFull! "csxV3: ParticleSystem::isFull "
	ParticleSystem\isFull!


snippet ParticleSystem\getBatchNode! "csxV3: ParticleSystem::getBatchNode "
	ParticleSystem\getBatchNode!


snippet ParticleSystem\getStartColor! "csxV3: ParticleSystem::getStartColor "
	ParticleSystem\getStartColor!


snippet ParticleSystem\getPositionType! "csxV3: ParticleSystem::getPositionType "
	ParticleSystem\getPositionType!


snippet ParticleSystem\setPosVar(vec2) "csxV3: ParticleSystem::setPosVar "
	ParticleSystem\setPosVar(${1:vec2})


snippet ParticleSystem\getEndSpin! "csxV3: ParticleSystem::getEndSpin "
	ParticleSystem\getEndSpin!


snippet ParticleSystem\setRotatePerSecondVar(float) "csxV3: ParticleSystem::setRotatePerSecondVar "
	ParticleSystem\setRotatePerSecondVar(${1:float})


snippet ParticleSystem\getStartSpinVar! "csxV3: ParticleSystem::getStartSpinVar "
	ParticleSystem\getStartSpinVar!


snippet ParticleSystem\getRadialAccelVar! "csxV3: ParticleSystem::getRadialAccelVar "
	ParticleSystem\getRadialAccelVar!


snippet ParticleSystem\getEndSizeVar! "csxV3: ParticleSystem::getEndSizeVar "
	ParticleSystem\getEndSizeVar!


snippet ParticleSystem\setRotation(float) "csxV3: ParticleSystem::setRotation "
	ParticleSystem\setRotation(${1:float})


snippet ParticleSystem\setTangentialAccel(float) "csxV3: ParticleSystem::setTangentialAccel "
	ParticleSystem\setTangentialAccel(${1:float})


snippet ParticleSystem\setScaleY(float) "csxV3: ParticleSystem::setScaleY "
	ParticleSystem\setScaleY(${1:float})


snippet ParticleSystem\setScaleX(float) "csxV3: ParticleSystem::setScaleX "
	ParticleSystem\setScaleX(${1:float})


snippet ParticleSystem\getRadialAccel! "csxV3: ParticleSystem::getRadialAccel "
	ParticleSystem\getRadialAccel!


snippet ParticleSystem\setStartRadius(float) "csxV3: ParticleSystem::setStartRadius "
	ParticleSystem\setStartRadius(${1:float})


snippet ParticleSystem\setRotatePerSecond(float) "csxV3: ParticleSystem::setRotatePerSecond "
	ParticleSystem\setRotatePerSecond(${1:float})


snippet ParticleSystem\setEndSize(float) "csxV3: ParticleSystem::setEndSize "
	ParticleSystem\setEndSize(${1:float})


snippet ParticleSystem\getGravity! "csxV3: ParticleSystem::getGravity "
	ParticleSystem\getGravity!


snippet ParticleSystem\getTangentialAccel! "csxV3: ParticleSystem::getTangentialAccel "
	ParticleSystem\getTangentialAccel!


snippet ParticleSystem\setEndRadius(float) "csxV3: ParticleSystem::setEndRadius "
	ParticleSystem\setEndRadius(${1:float})


snippet ParticleSystem\getSpeed! "csxV3: ParticleSystem::getSpeed "
	ParticleSystem\getSpeed!


snippet ParticleSystem\getAngle! "csxV3: ParticleSystem::getAngle "
	ParticleSystem\getAngle!


snippet ParticleSystem\setEndColor(color4f) "csxV3: ParticleSystem::setEndColor "
	ParticleSystem\setEndColor(${1:color4f})


snippet ParticleSystem\setStartSpin(float) "csxV3: ParticleSystem::setStartSpin "
	ParticleSystem\setStartSpin(${1:float})


snippet ParticleSystem\setDuration(float) "csxV3: ParticleSystem::setDuration "
	ParticleSystem\setDuration(${1:float})


snippet ParticleSystem\setTexture(texture2d) "csxV3: ParticleSystem::setTexture "
	ParticleSystem\setTexture(${1:texture2d})


snippet ParticleSystem\getPosVar! "csxV3: ParticleSystem::getPosVar "
	ParticleSystem\getPosVar!


snippet ParticleSystem\updateWithNoTime! "csxV3: ParticleSystem::updateWithNoTime "
	ParticleSystem\updateWithNoTime!


snippet ParticleSystem\isBlendAdditive! "csxV3: ParticleSystem::isBlendAdditive "
	ParticleSystem\isBlendAdditive!


snippet ParticleSystem\getSpeedVar! "csxV3: ParticleSystem::getSpeedVar "
	ParticleSystem\getSpeedVar!


snippet ParticleSystem\setPositionType(positiontype) "csxV3: ParticleSystem::setPositionType "
	ParticleSystem\setPositionType(${1:positiontype})


snippet ParticleSystem\stopSystem! "csxV3: ParticleSystem::stopSystem "
	ParticleSystem\stopSystem!


snippet ParticleSystem\getSourcePosition! "csxV3: ParticleSystem::getSourcePosition "
	ParticleSystem\getSourcePosition!


snippet ParticleSystem\setLifeVar(float) "csxV3: ParticleSystem::setLifeVar "
	ParticleSystem\setLifeVar(${1:float})


snippet ParticleSystem\setTotalParticles(int) "csxV3: ParticleSystem::setTotalParticles "
	ParticleSystem\setTotalParticles(${1:int})


snippet ParticleSystem\setEndColorVar(color4f) "csxV3: ParticleSystem::setEndColorVar "
	ParticleSystem\setEndColorVar(${1:color4f})


snippet ParticleSystem\updateQuadWithParticle(sparticle\,vec2) "csxV3: ParticleSystem::updateQuadWithParticle "
	ParticleSystem\updateQuadWithParticle(${1:sparticle}, ${2:vec2})


snippet ParticleSystem\getAtlasIndex! "csxV3: ParticleSystem::getAtlasIndex "
	ParticleSystem\getAtlasIndex!


snippet ParticleSystem\getStartSize! "csxV3: ParticleSystem::getStartSize "
	ParticleSystem\getStartSize!


snippet ParticleSystem\setStartSpinVar(float) "csxV3: ParticleSystem::setStartSpinVar "
	ParticleSystem\setStartSpinVar(${1:float})


snippet ParticleSystem\resetSystem! "csxV3: ParticleSystem::resetSystem "
	ParticleSystem\resetSystem!


snippet ParticleSystem\setAtlasIndex(int) "csxV3: ParticleSystem::setAtlasIndex "
	ParticleSystem\setAtlasIndex(${1:int})


snippet ParticleSystem\setTangentialAccelVar(float) "csxV3: ParticleSystem::setTangentialAccelVar "
	ParticleSystem\setTangentialAccelVar(${1:float})


snippet ParticleSystem\setEndRadiusVar(float) "csxV3: ParticleSystem::setEndRadiusVar "
	ParticleSystem\setEndRadiusVar(${1:float})


snippet ParticleSystem\getEndRadius! "csxV3: ParticleSystem::getEndRadius "
	ParticleSystem\getEndRadius!


snippet ParticleSystem\isOpacityModifyRGB! "csxV3: ParticleSystem::isOpacityModifyRGB "
	ParticleSystem\isOpacityModifyRGB!


snippet ParticleSystem\isActive! "csxV3: ParticleSystem::isActive "
	ParticleSystem\isActive!


snippet ParticleSystem\setRadialAccelVar(float) "csxV3: ParticleSystem::setRadialAccelVar "
	ParticleSystem\setRadialAccelVar(${1:float})


snippet ParticleSystem\setStartSize(float) "csxV3: ParticleSystem::setStartSize "
	ParticleSystem\setStartSize(${1:float})


snippet ParticleSystem\setSpeed(float) "csxV3: ParticleSystem::setSpeed "
	ParticleSystem\setSpeed(${1:float})


snippet ParticleSystem\getStartSpin! "csxV3: ParticleSystem::getStartSpin "
	ParticleSystem\getStartSpin!


snippet ParticleSystem\getRotatePerSecond! "csxV3: ParticleSystem::getRotatePerSecond "
	ParticleSystem\getRotatePerSecond!


snippet ParticleSystem\initParticle(sparticle) "csxV3: ParticleSystem::initParticle "
	ParticleSystem\initParticle(${1:sparticle})


snippet ParticleSystem\setEmitterMode(mode) "csxV3: ParticleSystem::setEmitterMode "
	ParticleSystem\setEmitterMode(${1:mode})


snippet ParticleSystem\getDuration! "csxV3: ParticleSystem::getDuration "
	ParticleSystem\getDuration!


snippet ParticleSystem\setSourcePosition(vec2) "csxV3: ParticleSystem::setSourcePosition "
	ParticleSystem\setSourcePosition(${1:vec2})


snippet ParticleSystem\getEndSpinVar! "csxV3: ParticleSystem::getEndSpinVar "
	ParticleSystem\getEndSpinVar!


snippet ParticleSystem\setBlendAdditive(bool) "csxV3: ParticleSystem::setBlendAdditive "
	ParticleSystem\setBlendAdditive(${1:bool})


snippet ParticleSystem\setLife(float) "csxV3: ParticleSystem::setLife "
	ParticleSystem\setLife(${1:float})


snippet ParticleSystem\setAngleVar(float) "csxV3: ParticleSystem::setAngleVar "
	ParticleSystem\setAngleVar(${1:float})


snippet ParticleSystem\setRotationIsDir(bool) "csxV3: ParticleSystem::setRotationIsDir "
	ParticleSystem\setRotationIsDir(${1:bool})


snippet ParticleSystem\setEndSizeVar(float) "csxV3: ParticleSystem::setEndSizeVar "
	ParticleSystem\setEndSizeVar(${1:float})


snippet ParticleSystem\setAngle(float) "csxV3: ParticleSystem::setAngle "
	ParticleSystem\setAngle(${1:float})


snippet ParticleSystem\setBatchNode(particlebatchnode) "csxV3: ParticleSystem::setBatchNode "
	ParticleSystem\setBatchNode(${1:particlebatchnode})


snippet ParticleSystem\getTangentialAccelVar! "csxV3: ParticleSystem::getTangentialAccelVar "
	ParticleSystem\getTangentialAccelVar!


snippet ParticleSystem\getEmitterMode! "csxV3: ParticleSystem::getEmitterMode "
	ParticleSystem\getEmitterMode!


snippet ParticleSystem\setEndSpinVar(float) "csxV3: ParticleSystem::setEndSpinVar "
	ParticleSystem\setEndSpinVar(${1:float})


snippet ParticleSystem\getAngleVar! "csxV3: ParticleSystem::getAngleVar "
	ParticleSystem\getAngleVar!


snippet ParticleSystem\setStartColor(color4f) "csxV3: ParticleSystem::setStartColor "
	ParticleSystem\setStartColor(${1:color4f})


snippet ParticleSystem\getRotatePerSecondVar! "csxV3: ParticleSystem::getRotatePerSecondVar "
	ParticleSystem\getRotatePerSecondVar!


snippet ParticleSystem\getEndSize! "csxV3: ParticleSystem::getEndSize "
	ParticleSystem\getEndSize!


snippet ParticleSystem\getLife! "csxV3: ParticleSystem::getLife "
	ParticleSystem\getLife!


snippet ParticleSystem\setSpeedVar(float) "csxV3: ParticleSystem::setSpeedVar "
	ParticleSystem\setSpeedVar(${1:float})


snippet ParticleSystem\setAutoRemoveOnFinish(bool) "csxV3: ParticleSystem::setAutoRemoveOnFinish "
	ParticleSystem\setAutoRemoveOnFinish(${1:bool})


snippet ParticleSystem\setGravity(vec2) "csxV3: ParticleSystem::setGravity "
	ParticleSystem\setGravity(${1:vec2})


snippet ParticleSystem\postStep! "csxV3: ParticleSystem::postStep "
	ParticleSystem\postStep!


snippet ParticleSystem\setEmissionRate(float) "csxV3: ParticleSystem::setEmissionRate "
	ParticleSystem\setEmissionRate(${1:float})


snippet ParticleSystem\getEndColorVar! "csxV3: ParticleSystem::getEndColorVar "
	ParticleSystem\getEndColorVar!


snippet ParticleSystem\getRotationIsDir! "csxV3: ParticleSystem::getRotationIsDir "
	ParticleSystem\getRotationIsDir!


snippet ParticleSystem\setScale(float) "csxV3: ParticleSystem::setScale "
	ParticleSystem\setScale(${1:float})


snippet ParticleSystem\getEmissionRate! "csxV3: ParticleSystem::getEmissionRate "
	ParticleSystem\getEmissionRate!


snippet ParticleSystem\getEndColor! "csxV3: ParticleSystem::getEndColor "
	ParticleSystem\getEndColor!


snippet ParticleSystem\getLifeVar! "csxV3: ParticleSystem::getLifeVar "
	ParticleSystem\getLifeVar!


snippet ParticleSystem\setStartSizeVar(float) "csxV3: ParticleSystem::setStartSizeVar "
	ParticleSystem\setStartSizeVar(${1:float})


snippet ParticleSystem\setOpacityModifyRGB(bool) "csxV3: ParticleSystem::setOpacityModifyRGB "
	ParticleSystem\setOpacityModifyRGB(${1:bool})


snippet ParticleSystem\addParticle! "csxV3: ParticleSystem::addParticle "
	ParticleSystem\addParticle!


snippet ParticleSystem\getStartRadius! "csxV3: ParticleSystem::getStartRadius "
	ParticleSystem\getStartRadius!


snippet ParticleSystem\getParticleCount! "csxV3: ParticleSystem::getParticleCount "
	ParticleSystem\getParticleCount!


snippet ParticleSystem\getStartRadiusVar! "csxV3: ParticleSystem::getStartRadiusVar "
	ParticleSystem\getStartRadiusVar!


snippet ParticleSystem\setStartColorVar(color4f) "csxV3: ParticleSystem::setStartColorVar "
	ParticleSystem\setStartColorVar(${1:color4f})


snippet ParticleSystem\setEndSpin(float) "csxV3: ParticleSystem::setEndSpin "
	ParticleSystem\setEndSpin(${1:float})


snippet ParticleSystem\setRadialAccel(float) "csxV3: ParticleSystem::setRadialAccel "
	ParticleSystem\setRadialAccel(${1:float})


snippet ParticleSystem\isAutoRemoveOnFinish! "csxV3: ParticleSystem::isAutoRemoveOnFinish "
	ParticleSystem\isAutoRemoveOnFinish!


snippet ParticleSystem\getTotalParticles! "csxV3: ParticleSystem::getTotalParticles "
	ParticleSystem\getTotalParticles!


snippet ParticleSystem\setStartRadiusVar(float) "csxV3: ParticleSystem::setStartRadiusVar "
	ParticleSystem\setStartRadiusVar(${1:float})


snippet ParticleSystem\getEndRadiusVar! "csxV3: ParticleSystem::getEndRadiusVar "
	ParticleSystem\getEndRadiusVar!


snippet ParticleSystem\getStartColorVar! "csxV3: ParticleSystem::getStartColorVar "
	ParticleSystem\getStartColorVar!


snippet ParticleSystem\create(str) "csxV3: ParticleSystem::create "
	ParticleSystem\create(${1:str})


snippet ParticleSystem\createWithTotalParticles(int) "csxV3: ParticleSystem::createWithTotalParticles "
	ParticleSystem\createWithTotalParticles(${1:int})


snippet ParticleSystemQuad\setDisplayFrame(spriteframe) "csxV3: ParticleSystemQuad::setDisplayFrame "
	ParticleSystemQuad\setDisplayFrame(${1:spriteframe})


snippet ParticleSystemQuad\setTextureWithRect(texture2d\,rect) "csxV3: ParticleSystemQuad::setTextureWithRect "
	ParticleSystemQuad\setTextureWithRect(${1:texture2d}, ${2:rect})


snippet ParticleSystemQuad\create(map) "csxV3: ParticleSystemQuad::create "
	ParticleSystemQuad\create(${1:map})


snippet ParticleSystemQuad\createWithTotalParticles(int) "csxV3: ParticleSystemQuad::createWithTotalParticles "
	ParticleSystemQuad\createWithTotalParticles(${1:int})


snippet PhysicsBody\isGravityEnabled! "csxV3: PhysicsBody::isGravityEnabled "
	PhysicsBody\isGravityEnabled!


snippet PhysicsBody\resetForces! "csxV3: PhysicsBody::resetForces "
	PhysicsBody\resetForces!


snippet PhysicsBody\getVelocityLimit! "csxV3: PhysicsBody::getVelocityLimit "
	PhysicsBody\getVelocityLimit!


snippet PhysicsBody\setGroup(int) "csxV3: PhysicsBody::setGroup "
	PhysicsBody\setGroup(${1:int})


snippet PhysicsBody\getMass! "csxV3: PhysicsBody::getMass "
	PhysicsBody\getMass!


snippet PhysicsBody\getCollisionBitmask! "csxV3: PhysicsBody::getCollisionBitmask "
	PhysicsBody\getCollisionBitmask!


snippet PhysicsBody\getRotationOffset! "csxV3: PhysicsBody::getRotationOffset "
	PhysicsBody\getRotationOffset!


snippet PhysicsBody\getRotation! "csxV3: PhysicsBody::getRotation "
	PhysicsBody\getRotation!


snippet PhysicsBody\getMoment! "csxV3: PhysicsBody::getMoment "
	PhysicsBody\getMoment!


snippet PhysicsBody\applyImpulse(vec2\,vec2) "csxV3: PhysicsBody::applyImpulse "
	PhysicsBody\applyImpulse(${1:vec2}, ${2:vec2})


snippet PhysicsBody\setRotationOffset(float) "csxV3: PhysicsBody::setRotationOffset "
	PhysicsBody\setRotationOffset(${1:float})


snippet PhysicsBody\applyForce(vec2\,vec2) "csxV3: PhysicsBody::applyForce "
	PhysicsBody\applyForce(${1:vec2}, ${2:vec2})


snippet PhysicsBody\addShape(physicsshape\,bool) "csxV3: PhysicsBody::addShape "
	PhysicsBody\addShape(${1:physicsshape}, ${2:bool})


snippet PhysicsBody\applyTorque(float) "csxV3: PhysicsBody::applyTorque "
	PhysicsBody\applyTorque(${1:float})


snippet PhysicsBody\getAngularVelocityLimit! "csxV3: PhysicsBody::getAngularVelocityLimit "
	PhysicsBody\getAngularVelocityLimit!


snippet PhysicsBody\setAngularVelocityLimit(float) "csxV3: PhysicsBody::setAngularVelocityLimit "
	PhysicsBody\setAngularVelocityLimit(${1:float})


snippet PhysicsBody\getVelocity! "csxV3: PhysicsBody::getVelocity "
	PhysicsBody\getVelocity!


snippet PhysicsBody\getLinearDamping! "csxV3: PhysicsBody::getLinearDamping "
	PhysicsBody\getLinearDamping!


snippet PhysicsBody\removeAllShapes! "csxV3: PhysicsBody::removeAllShapes "
	PhysicsBody\removeAllShapes!


snippet PhysicsBody\setAngularDamping(float) "csxV3: PhysicsBody::setAngularDamping "
	PhysicsBody\setAngularDamping(${1:float})


snippet PhysicsBody\setVelocityLimit(float) "csxV3: PhysicsBody::setVelocityLimit "
	PhysicsBody\setVelocityLimit(${1:float})


snippet PhysicsBody\setResting(bool) "csxV3: PhysicsBody::setResting "
	PhysicsBody\setResting(${1:bool})


snippet PhysicsBody\getPositionOffset! "csxV3: PhysicsBody::getPositionOffset "
	PhysicsBody\getPositionOffset!


snippet PhysicsBody\setCategoryBitmask(int) "csxV3: PhysicsBody::setCategoryBitmask "
	PhysicsBody\setCategoryBitmask(${1:int})


snippet PhysicsBody\getWorld! "csxV3: PhysicsBody::getWorld "
	PhysicsBody\getWorld!


snippet PhysicsBody\getAngularVelocity! "csxV3: PhysicsBody::getAngularVelocity "
	PhysicsBody\getAngularVelocity!


snippet PhysicsBody\getPosition! "csxV3: PhysicsBody::getPosition "
	PhysicsBody\getPosition!


snippet PhysicsBody\setEnable(bool) "csxV3: PhysicsBody::setEnable "
	PhysicsBody\setEnable(${1:bool})


snippet PhysicsBody\setGravityEnable(bool) "csxV3: PhysicsBody::setGravityEnable "
	PhysicsBody\setGravityEnable(${1:bool})


snippet PhysicsBody\getGroup! "csxV3: PhysicsBody::getGroup "
	PhysicsBody\getGroup!


snippet PhysicsBody\setMoment(float) "csxV3: PhysicsBody::setMoment "
	PhysicsBody\setMoment(${1:float})


snippet PhysicsBody\getTag! "csxV3: PhysicsBody::getTag "
	PhysicsBody\getTag!


snippet PhysicsBody\local2World(vec2) "csxV3: PhysicsBody::local2World "
	PhysicsBody\local2World(${1:vec2})


snippet PhysicsBody\getCategoryBitmask! "csxV3: PhysicsBody::getCategoryBitmask "
	PhysicsBody\getCategoryBitmask!


snippet PhysicsBody\setDynamic(bool) "csxV3: PhysicsBody::setDynamic "
	PhysicsBody\setDynamic(${1:bool})


snippet PhysicsBody\getFirstShape! "csxV3: PhysicsBody::getFirstShape "
	PhysicsBody\getFirstShape!


snippet PhysicsBody\getShapes! "csxV3: PhysicsBody::getShapes "
	PhysicsBody\getShapes!


snippet PhysicsBody\getContactTestBitmask! "csxV3: PhysicsBody::getContactTestBitmask "
	PhysicsBody\getContactTestBitmask!


snippet PhysicsBody\setAngularVelocity(float) "csxV3: PhysicsBody::setAngularVelocity "
	PhysicsBody\setAngularVelocity(${1:float})


snippet PhysicsBody\world2Local(vec2) "csxV3: PhysicsBody::world2Local "
	PhysicsBody\world2Local(${1:vec2})


snippet PhysicsBody\isEnabled! "csxV3: PhysicsBody::isEnabled "
	PhysicsBody\isEnabled!


snippet PhysicsBody\removeShape(physicsshape\,bool) "csxV3: PhysicsBody::removeShape "
	PhysicsBody\removeShape(${1:physicsshape}, ${2:bool})


snippet PhysicsBody\setMass(float) "csxV3: PhysicsBody::setMass "
	PhysicsBody\setMass(${1:float})


snippet PhysicsBody\addMoment(float) "csxV3: PhysicsBody::addMoment "
	PhysicsBody\addMoment(${1:float})


snippet PhysicsBody\setVelocity(vec2) "csxV3: PhysicsBody::setVelocity "
	PhysicsBody\setVelocity(${1:vec2})


snippet PhysicsBody\setLinearDamping(float) "csxV3: PhysicsBody::setLinearDamping "
	PhysicsBody\setLinearDamping(${1:float})


snippet PhysicsBody\setCollisionBitmask(int) "csxV3: PhysicsBody::setCollisionBitmask "
	PhysicsBody\setCollisionBitmask(${1:int})


snippet PhysicsBody\setPositionOffset(vec2) "csxV3: PhysicsBody::setPositionOffset "
	PhysicsBody\setPositionOffset(${1:vec2})


snippet PhysicsBody\setRotationEnable(bool) "csxV3: PhysicsBody::setRotationEnable "
	PhysicsBody\setRotationEnable(${1:bool})


snippet PhysicsBody\isRotationEnabled! "csxV3: PhysicsBody::isRotationEnabled "
	PhysicsBody\isRotationEnabled!


snippet PhysicsBody\getAngularDamping! "csxV3: PhysicsBody::getAngularDamping "
	PhysicsBody\getAngularDamping!


snippet PhysicsBody\getVelocityAtLocalPoint(vec2) "csxV3: PhysicsBody::getVelocityAtLocalPoint "
	PhysicsBody\getVelocityAtLocalPoint(${1:vec2})


snippet PhysicsBody\isResting! "csxV3: PhysicsBody::isResting "
	PhysicsBody\isResting!


snippet PhysicsBody\addMass(float) "csxV3: PhysicsBody::addMass "
	PhysicsBody\addMass(${1:float})


snippet PhysicsBody\getShape(int) "csxV3: PhysicsBody::getShape "
	PhysicsBody\getShape(${1:int})


snippet PhysicsBody\setTag(int) "csxV3: PhysicsBody::setTag "
	PhysicsBody\setTag(${1:int})


snippet PhysicsBody\getVelocityAtWorldPoint(vec2) "csxV3: PhysicsBody::getVelocityAtWorldPoint "
	PhysicsBody\getVelocityAtWorldPoint(${1:vec2})


snippet PhysicsBody\setContactTestBitmask(int) "csxV3: PhysicsBody::setContactTestBitmask "
	PhysicsBody\setContactTestBitmask(${1:int})


snippet PhysicsBody\removeFromWorld! "csxV3: PhysicsBody::removeFromWorld "
	PhysicsBody\removeFromWorld!


snippet PhysicsBody\isDynamic! "csxV3: PhysicsBody::isDynamic "
	PhysicsBody\isDynamic!


snippet PhysicsBody\getNode! "csxV3: PhysicsBody::getNode "
	PhysicsBody\getNode!


snippet PhysicsBody\createBox(size\,physicsmaterial\,vec2) "csxV3: PhysicsBody::createBox "
	PhysicsBody\createBox(${1:size}, ${2:physicsmaterial}, ${3:vec2})


snippet PhysicsBody\createEdgeSegment(vec2\,vec2\,physicsmaterial\,float) "csxV3: PhysicsBody::createEdgeSegment "
	PhysicsBody\createEdgeSegment(${1:vec2}, ${2:vec2}, ${3:physicsmaterial}, ${4:float})


snippet PhysicsBody\create(float\,float) "csxV3: PhysicsBody::create "
	PhysicsBody\create(${1:float}, ${2:float})


snippet PhysicsBody\createEdgeBox(size\,physicsmaterial\,float\,vec2) "csxV3: PhysicsBody::createEdgeBox "
	PhysicsBody\createEdgeBox(${1:size}, ${2:physicsmaterial}, ${3:float}, ${4:vec2})


snippet PhysicsContact\getContactData! "csxV3: PhysicsContact::getContactData "
	PhysicsContact\getContactData!


snippet PhysicsContact\getEventCode! "csxV3: PhysicsContact::getEventCode "
	PhysicsContact\getEventCode!


snippet PhysicsContact\getPreContactData! "csxV3: PhysicsContact::getPreContactData "
	PhysicsContact\getPreContactData!


snippet PhysicsContact\getShapeA! "csxV3: PhysicsContact::getShapeA "
	PhysicsContact\getShapeA!


snippet PhysicsContactPostSolve\getFriction! "csxV3: PhysicsContactPostSolve::getFriction "
	PhysicsContactPostSolve\getFriction!


snippet PhysicsContactPostSolve\getSurfaceVelocity! "csxV3: PhysicsContactPostSolve::getSurfaceVelocity "
	PhysicsContactPostSolve\getSurfaceVelocity!


snippet PhysicsContactPreSolve\getFriction! "csxV3: PhysicsContactPreSolve::getFriction "
	PhysicsContactPreSolve\getFriction!


snippet PhysicsContactPreSolve\getRestitution! "csxV3: PhysicsContactPreSolve::getRestitution "
	PhysicsContactPreSolve\getRestitution!


snippet PhysicsContactPreSolve\setFriction(float) "csxV3: PhysicsContactPreSolve::setFriction "
	PhysicsContactPreSolve\setFriction(${1:float})


snippet PhysicsContactPreSolve\ignore! "csxV3: PhysicsContactPreSolve::ignore "
	PhysicsContactPreSolve\ignore!


snippet PhysicsContactPreSolve\getSurfaceVelocity! "csxV3: PhysicsContactPreSolve::getSurfaceVelocity "
	PhysicsContactPreSolve\getSurfaceVelocity!


snippet PhysicsContactPreSolve\setSurfaceVelocity(vec2) "csxV3: PhysicsContactPreSolve::setSurfaceVelocity "
	PhysicsContactPreSolve\setSurfaceVelocity(${1:vec2})


snippet PhysicsJoint\getBodyA! "csxV3: PhysicsJoint::getBodyA "
	PhysicsJoint\getBodyA!


snippet PhysicsJoint\getBodyB! "csxV3: PhysicsJoint::getBodyB "
	PhysicsJoint\getBodyB!


snippet PhysicsJoint\getMaxForce! "csxV3: PhysicsJoint::getMaxForce "
	PhysicsJoint\getMaxForce!


snippet PhysicsJoint\setMaxForce(float) "csxV3: PhysicsJoint::setMaxForce "
	PhysicsJoint\setMaxForce(${1:float})


snippet PhysicsJoint\isEnabled! "csxV3: PhysicsJoint::isEnabled "
	PhysicsJoint\isEnabled!


snippet PhysicsJoint\setEnable(bool) "csxV3: PhysicsJoint::setEnable "
	PhysicsJoint\setEnable(${1:bool})


snippet PhysicsJoint\setCollisionEnable(bool) "csxV3: PhysicsJoint::setCollisionEnable "
	PhysicsJoint\setCollisionEnable(${1:bool})


snippet PhysicsJoint\getWorld! "csxV3: PhysicsJoint::getWorld "
	PhysicsJoint\getWorld!


snippet PhysicsJoint\setTag(int) "csxV3: PhysicsJoint::setTag "
	PhysicsJoint\setTag(${1:int})


snippet PhysicsJoint\removeFormWorld! "csxV3: PhysicsJoint::removeFormWorld "
	PhysicsJoint\removeFormWorld!


snippet PhysicsJoint\isCollisionEnabled! "csxV3: PhysicsJoint::isCollisionEnabled "
	PhysicsJoint\isCollisionEnabled!


snippet PhysicsJoint\getTag! "csxV3: PhysicsJoint::getTag "
	PhysicsJoint\getTag!


snippet PhysicsJointDistance\setDistance(float) "csxV3: PhysicsJointDistance::setDistance "
	PhysicsJointDistance\setDistance(${1:float})


snippet PhysicsJointDistance\getDistance! "csxV3: PhysicsJointDistance::getDistance "
	PhysicsJointDistance\getDistance!


snippet PhysicsJointGear\setRatio(float) "csxV3: PhysicsJointGear::setRatio "
	PhysicsJointGear\setRatio(${1:float})


snippet PhysicsJointGear\getPhase! "csxV3: PhysicsJointGear::getPhase "
	PhysicsJointGear\getPhase!


snippet PhysicsJointGear\setPhase(float) "csxV3: PhysicsJointGear::setPhase "
	PhysicsJointGear\setPhase(${1:float})


snippet PhysicsJointGear\getRatio! "csxV3: PhysicsJointGear::getRatio "
	PhysicsJointGear\getRatio!


snippet PhysicsJointGroove\setAnchr2(vec2) "csxV3: PhysicsJointGroove::setAnchr2 "
	PhysicsJointGroove\setAnchr2(${1:vec2})


snippet PhysicsJointGroove\setGrooveA(vec2) "csxV3: PhysicsJointGroove::setGrooveA "
	PhysicsJointGroove\setGrooveA(${1:vec2})


snippet PhysicsJointGroove\setGrooveB(vec2) "csxV3: PhysicsJointGroove::setGrooveB "
	PhysicsJointGroove\setGrooveB(${1:vec2})


snippet PhysicsJointGroove\getGrooveA! "csxV3: PhysicsJointGroove::getGrooveA "
	PhysicsJointGroove\getGrooveA!


snippet PhysicsJointGroove\getGrooveB! "csxV3: PhysicsJointGroove::getGrooveB "
	PhysicsJointGroove\getGrooveB!


snippet PhysicsJointGroove\getAnchr2! "csxV3: PhysicsJointGroove::getAnchr2 "
	PhysicsJointGroove\getAnchr2!


snippet PhysicsJointLimit\setAnchr2(vec2) "csxV3: PhysicsJointLimit::setAnchr2 "
	PhysicsJointLimit\setAnchr2(${1:vec2})


snippet PhysicsJointLimit\setAnchr1(vec2) "csxV3: PhysicsJointLimit::setAnchr1 "
	PhysicsJointLimit\setAnchr1(${1:vec2})


snippet PhysicsJointLimit\setMax(float) "csxV3: PhysicsJointLimit::setMax "
	PhysicsJointLimit\setMax(${1:float})


snippet PhysicsJointLimit\getAnchr2! "csxV3: PhysicsJointLimit::getAnchr2 "
	PhysicsJointLimit\getAnchr2!


snippet PhysicsJointLimit\getAnchr1! "csxV3: PhysicsJointLimit::getAnchr1 "
	PhysicsJointLimit\getAnchr1!


snippet PhysicsJointLimit\getMin! "csxV3: PhysicsJointLimit::getMin "
	PhysicsJointLimit\getMin!


snippet PhysicsJointLimit\getMax! "csxV3: PhysicsJointLimit::getMax "
	PhysicsJointLimit\getMax!


snippet PhysicsJointLimit\setMin(float) "csxV3: PhysicsJointLimit::setMin "
	PhysicsJointLimit\setMin(${1:float})


snippet PhysicsJointMotor\setRate(float) "csxV3: PhysicsJointMotor::setRate "
	PhysicsJointMotor\setRate(${1:float})


snippet PhysicsJointMotor\getRate! "csxV3: PhysicsJointMotor::getRate "
	PhysicsJointMotor\getRate!


snippet PhysicsJointRatchet\getAngle! "csxV3: PhysicsJointRatchet::getAngle "
	PhysicsJointRatchet\getAngle!


snippet PhysicsJointRatchet\setAngle(float) "csxV3: PhysicsJointRatchet::setAngle "
	PhysicsJointRatchet\setAngle(${1:float})


snippet PhysicsJointRatchet\setPhase(float) "csxV3: PhysicsJointRatchet::setPhase "
	PhysicsJointRatchet\setPhase(${1:float})


snippet PhysicsJointRatchet\getPhase! "csxV3: PhysicsJointRatchet::getPhase "
	PhysicsJointRatchet\getPhase!


snippet PhysicsJointRatchet\setRatchet(float) "csxV3: PhysicsJointRatchet::setRatchet "
	PhysicsJointRatchet\setRatchet(${1:float})


snippet PhysicsJointRatchet\getRatchet! "csxV3: PhysicsJointRatchet::getRatchet "
	PhysicsJointRatchet\getRatchet!


snippet PhysicsJointRotaryLimit\getMax! "csxV3: PhysicsJointRotaryLimit::getMax "
	PhysicsJointRotaryLimit\getMax!


snippet PhysicsJointRotaryLimit\setMin(float) "csxV3: PhysicsJointRotaryLimit::setMin "
	PhysicsJointRotaryLimit\setMin(${1:float})


snippet PhysicsJointRotaryLimit\setMax(float) "csxV3: PhysicsJointRotaryLimit::setMax "
	PhysicsJointRotaryLimit\setMax(${1:float})


snippet PhysicsJointRotaryLimit\getMin! "csxV3: PhysicsJointRotaryLimit::getMin "
	PhysicsJointRotaryLimit\getMin!


snippet PhysicsJointRotarySpring\getDamping! "csxV3: PhysicsJointRotarySpring::getDamping "
	PhysicsJointRotarySpring\getDamping!


snippet PhysicsJointRotarySpring\setRestAngle(float) "csxV3: PhysicsJointRotarySpring::setRestAngle "
	PhysicsJointRotarySpring\setRestAngle(${1:float})


snippet PhysicsJointRotarySpring\getStiffness! "csxV3: PhysicsJointRotarySpring::getStiffness "
	PhysicsJointRotarySpring\getStiffness!


snippet PhysicsJointRotarySpring\setStiffness(float) "csxV3: PhysicsJointRotarySpring::setStiffness "
	PhysicsJointRotarySpring\setStiffness(${1:float})


snippet PhysicsJointRotarySpring\setDamping(float) "csxV3: PhysicsJointRotarySpring::setDamping "
	PhysicsJointRotarySpring\setDamping(${1:float})


snippet PhysicsJointRotarySpring\getRestAngle! "csxV3: PhysicsJointRotarySpring::getRestAngle "
	PhysicsJointRotarySpring\getRestAngle!


snippet PhysicsJointSpring\setAnchr2(vec2) "csxV3: PhysicsJointSpring::setAnchr2 "
	PhysicsJointSpring\setAnchr2(${1:vec2})


snippet PhysicsJointSpring\setAnchr1(vec2) "csxV3: PhysicsJointSpring::setAnchr1 "
	PhysicsJointSpring\setAnchr1(${1:vec2})


snippet PhysicsJointSpring\getDamping! "csxV3: PhysicsJointSpring::getDamping "
	PhysicsJointSpring\getDamping!


snippet PhysicsJointSpring\setStiffness(float) "csxV3: PhysicsJointSpring::setStiffness "
	PhysicsJointSpring\setStiffness(${1:float})


snippet PhysicsJointSpring\getRestLength! "csxV3: PhysicsJointSpring::getRestLength "
	PhysicsJointSpring\getRestLength!


snippet PhysicsJointSpring\getAnchr2! "csxV3: PhysicsJointSpring::getAnchr2 "
	PhysicsJointSpring\getAnchr2!


snippet PhysicsJointSpring\getAnchr1! "csxV3: PhysicsJointSpring::getAnchr1 "
	PhysicsJointSpring\getAnchr1!


snippet PhysicsJointSpring\getStiffness! "csxV3: PhysicsJointSpring::getStiffness "
	PhysicsJointSpring\getStiffness!


snippet PhysicsJointSpring\setRestLength(float) "csxV3: PhysicsJointSpring::setRestLength "
	PhysicsJointSpring\setRestLength(${1:float})


snippet PhysicsJointSpring\setDamping(float) "csxV3: PhysicsJointSpring::setDamping "
	PhysicsJointSpring\setDamping(${1:float})


snippet PhysicsShape\getFriction! "csxV3: PhysicsShape::getFriction "
	PhysicsShape\getFriction!


snippet PhysicsShape\setGroup(int) "csxV3: PhysicsShape::setGroup "
	PhysicsShape\setGroup(${1:int})


snippet PhysicsShape\setDensity(float) "csxV3: PhysicsShape::setDensity "
	PhysicsShape\setDensity(${1:float})


snippet PhysicsShape\getMass! "csxV3: PhysicsShape::getMass "
	PhysicsShape\getMass!


snippet PhysicsShape\getMaterial! "csxV3: PhysicsShape::getMaterial "
	PhysicsShape\getMaterial!


snippet PhysicsShape\getCollisionBitmask! "csxV3: PhysicsShape::getCollisionBitmask "
	PhysicsShape\getCollisionBitmask!


snippet PhysicsShape\getArea! "csxV3: PhysicsShape::getArea "
	PhysicsShape\getArea!


snippet PhysicsShape\setCategoryBitmask(int) "csxV3: PhysicsShape::setCategoryBitmask "
	PhysicsShape\setCategoryBitmask(${1:int})


snippet PhysicsShape\getGroup! "csxV3: PhysicsShape::getGroup "
	PhysicsShape\getGroup!


snippet PhysicsShape\setMoment(float) "csxV3: PhysicsShape::setMoment "
	PhysicsShape\setMoment(${1:float})


snippet PhysicsShape\containsPoint(vec2) "csxV3: PhysicsShape::containsPoint "
	PhysicsShape\containsPoint(${1:vec2})


snippet PhysicsShape\getCategoryBitmask! "csxV3: PhysicsShape::getCategoryBitmask "
	PhysicsShape\getCategoryBitmask!


snippet PhysicsShape\getType! "csxV3: PhysicsShape::getType "
	PhysicsShape\getType!


snippet PhysicsShape\getContactTestBitmask! "csxV3: PhysicsShape::getContactTestBitmask "
	PhysicsShape\getContactTestBitmask!


snippet PhysicsShape\getCenter! "csxV3: PhysicsShape::getCenter "
	PhysicsShape\getCenter!


snippet PhysicsShape\getDensity! "csxV3: PhysicsShape::getDensity "
	PhysicsShape\getDensity!


snippet PhysicsShape\setMass(float) "csxV3: PhysicsShape::setMass "
	PhysicsShape\setMass(${1:float})


snippet PhysicsShape\getTag! "csxV3: PhysicsShape::getTag "
	PhysicsShape\getTag!


snippet PhysicsShape\calculateDefaultMoment! "csxV3: PhysicsShape::calculateDefaultMoment "
	PhysicsShape\calculateDefaultMoment!


snippet PhysicsShape\setCollisionBitmask(int) "csxV3: PhysicsShape::setCollisionBitmask "
	PhysicsShape\setCollisionBitmask(${1:int})


snippet PhysicsShape\getMoment! "csxV3: PhysicsShape::getMoment "
	PhysicsShape\getMoment!


snippet PhysicsShape\getOffset! "csxV3: PhysicsShape::getOffset "
	PhysicsShape\getOffset!


snippet PhysicsShape\getRestitution! "csxV3: PhysicsShape::getRestitution "
	PhysicsShape\getRestitution!


snippet PhysicsShape\setFriction(float) "csxV3: PhysicsShape::setFriction "
	PhysicsShape\setFriction(${1:float})


snippet PhysicsShape\setMaterial(physicsmaterial) "csxV3: PhysicsShape::setMaterial "
	PhysicsShape\setMaterial(${1:physicsmaterial})


snippet PhysicsShape\setTag(int) "csxV3: PhysicsShape::setTag "
	PhysicsShape\setTag(${1:int})


snippet PhysicsShape\setContactTestBitmask(int) "csxV3: PhysicsShape::setContactTestBitmask "
	PhysicsShape\setContactTestBitmask(${1:int})


snippet PhysicsShape\setRestitution(float) "csxV3: PhysicsShape::setRestitution "
	PhysicsShape\setRestitution(${1:float})


snippet PhysicsShapeBox\getPointsCount! "csxV3: PhysicsShapeBox::getPointsCount "
	PhysicsShapeBox\getPointsCount!


snippet PhysicsShapeBox\getSize! "csxV3: PhysicsShapeBox::getSize "
	PhysicsShapeBox\getSize!


snippet PhysicsShapeBox\create(size\,physicsmaterial\,vec2) "csxV3: PhysicsShapeBox::create "
	PhysicsShapeBox\create(${1:size}, ${2:physicsmaterial}, ${3:vec2})


snippet PhysicsShapeBox\calculateArea(size) "csxV3: PhysicsShapeBox::calculateArea "
	PhysicsShapeBox\calculateArea(${1:size})


snippet PhysicsShapeBox\calculateMoment(float\,size\,vec2) "csxV3: PhysicsShapeBox::calculateMoment "
	PhysicsShapeBox\calculateMoment(${1:float}, ${2:size}, ${3:vec2})


snippet PhysicsShapeBox\getOffset! "csxV3: PhysicsShapeBox::getOffset "
	PhysicsShapeBox\getOffset!


snippet PhysicsShapeCircle\getRadius! "csxV3: PhysicsShapeCircle::getRadius "
	PhysicsShapeCircle\getRadius!


snippet PhysicsShapeCircle\create(float\,physicsmaterial\,vec2) "csxV3: PhysicsShapeCircle::create "
	PhysicsShapeCircle\create(${1:float}, ${2:physicsmaterial}, ${3:vec2})


snippet PhysicsShapeCircle\calculateArea(float) "csxV3: PhysicsShapeCircle::calculateArea "
	PhysicsShapeCircle\calculateArea(${1:float})


snippet PhysicsShapeCircle\calculateMoment(float\,float\,vec2) "csxV3: PhysicsShapeCircle::calculateMoment "
	PhysicsShapeCircle\calculateMoment(${1:float}, ${2:float}, ${3:vec2})


snippet PhysicsShapeCircle\getOffset! "csxV3: PhysicsShapeCircle::getOffset "
	PhysicsShapeCircle\getOffset!


snippet PhysicsShapeEdgeBox\getPointsCount! "csxV3: PhysicsShapeEdgeBox::getPointsCount "
	PhysicsShapeEdgeBox\getPointsCount!


snippet PhysicsShapeEdgeBox\create(size\,physicsmaterial\,float\,vec2) "csxV3: PhysicsShapeEdgeBox::create "
	PhysicsShapeEdgeBox\create(${1:size}, ${2:physicsmaterial}, ${3:float}, ${4:vec2})


snippet PhysicsShapeEdgeChain\getPointsCount! "csxV3: PhysicsShapeEdgeChain::getPointsCount "
	PhysicsShapeEdgeChain\getPointsCount!


snippet PhysicsShapeEdgePolygon\getPointsCount! "csxV3: PhysicsShapeEdgePolygon::getPointsCount "
	PhysicsShapeEdgePolygon\getPointsCount!


snippet PhysicsShapeEdgeSegment\getPointB! "csxV3: PhysicsShapeEdgeSegment::getPointB "
	PhysicsShapeEdgeSegment\getPointB!


snippet PhysicsShapeEdgeSegment\getPointA! "csxV3: PhysicsShapeEdgeSegment::getPointA "
	PhysicsShapeEdgeSegment\getPointA!


snippet PhysicsShapeEdgeSegment\create(vec2\,vec2\,physicsmaterial\,float) "csxV3: PhysicsShapeEdgeSegment::create "
	PhysicsShapeEdgeSegment\create(${1:vec2}, ${2:vec2}, ${3:physicsmaterial}, ${4:float})


snippet PhysicsShapePolygon\getPointsCount! "csxV3: PhysicsShapePolygon::getPointsCount "
	PhysicsShapePolygon\getPointsCount!


snippet PhysicsShapePolygon\getPoint(int) "csxV3: PhysicsShapePolygon::getPoint "
	PhysicsShapePolygon\getPoint(${1:int})


snippet PhysicsShapePolygon\calculateDefaultMoment! "csxV3: PhysicsShapePolygon::calculateDefaultMoment "
	PhysicsShapePolygon\calculateDefaultMoment!


snippet PhysicsWorld\getGravity! "csxV3: PhysicsWorld::getGravity "
	PhysicsWorld\getGravity!


snippet PhysicsWorld\getAllBodies! "csxV3: PhysicsWorld::getAllBodies "
	PhysicsWorld\getAllBodies!


snippet PhysicsWorld\setGravity(vec2) "csxV3: PhysicsWorld::setGravity "
	PhysicsWorld\setGravity(${1:vec2})


snippet PhysicsWorld\getSpeed! "csxV3: PhysicsWorld::getSpeed "
	PhysicsWorld\getSpeed!


snippet PhysicsWorld\removeBody(physicsbody) "csxV3: PhysicsWorld::removeBody "
	PhysicsWorld\removeBody(${1:physicsbody})


snippet PhysicsWorld\removeJoint(physicsjoint\,bool) "csxV3: PhysicsWorld::removeJoint "
	PhysicsWorld\removeJoint(${1:physicsjoint}, ${2:bool})


snippet PhysicsWorld\getUpdateRate! "csxV3: PhysicsWorld::getUpdateRate "
	PhysicsWorld\getUpdateRate!


snippet PhysicsWorld\setSpeed(float) "csxV3: PhysicsWorld::setSpeed "
	PhysicsWorld\setSpeed(${1:float})


snippet PhysicsWorld\getShapes(vec2) "csxV3: PhysicsWorld::getShapes "
	PhysicsWorld\getShapes(${1:vec2})


snippet PhysicsWorld\removeAllJoints! "csxV3: PhysicsWorld::removeAllJoints "
	PhysicsWorld\removeAllJoints!


snippet PhysicsWorld\getShape(vec2) "csxV3: PhysicsWorld::getShape "
	PhysicsWorld\getShape(${1:vec2})


snippet PhysicsWorld\removeAllBodies! "csxV3: PhysicsWorld::removeAllBodies "
	PhysicsWorld\removeAllBodies!


snippet PhysicsWorld\getDebugDrawMask! "csxV3: PhysicsWorld::getDebugDrawMask "
	PhysicsWorld\getDebugDrawMask!


snippet PhysicsWorld\setDebugDrawMask(int) "csxV3: PhysicsWorld::setDebugDrawMask "
	PhysicsWorld\setDebugDrawMask(${1:int})


snippet PhysicsWorld\getBody(int) "csxV3: PhysicsWorld::getBody "
	PhysicsWorld\getBody(${1:int})


snippet PhysicsWorld\setUpdateRate(int) "csxV3: PhysicsWorld::setUpdateRate "
	PhysicsWorld\setUpdateRate(${1:int})


snippet Place\create(vec2) "csxV3: Place::create "
	Place\create(${1:vec2})


snippet Place\clone! "csxV3: Place::clone "
	Place\clone!


snippet Place\update(float) "csxV3: Place::update "
	Place\update(${1:float})


snippet ProgressFromTo\create(float\,float\,float) "csxV3: ProgressFromTo::create "
	ProgressFromTo\create(${1:float}, ${2:float}, ${3:float})


snippet ProgressFromTo\startWithTarget(node) "csxV3: ProgressFromTo::startWithTarget "
	ProgressFromTo\startWithTarget(${1:node})


snippet ProgressFromTo\clone! "csxV3: ProgressFromTo::clone "
	ProgressFromTo\clone!


snippet ProgressFromTo\reverse! "csxV3: ProgressFromTo::reverse "
	ProgressFromTo\reverse!


snippet ProgressTimer\isReverseDirection! "csxV3: ProgressTimer::isReverseDirection "
	ProgressTimer\isReverseDirection!


snippet ProgressTimer\setBarChangeRate(vec2) "csxV3: ProgressTimer::setBarChangeRate "
	ProgressTimer\setBarChangeRate(${1:vec2})


snippet ProgressTimer\getPercentage! "csxV3: ProgressTimer::getPercentage "
	ProgressTimer\getPercentage!


snippet ProgressTimer\setSprite(sprite) "csxV3: ProgressTimer::setSprite "
	ProgressTimer\setSprite(${1:sprite})


snippet ProgressTimer\getType! "csxV3: ProgressTimer::getType "
	ProgressTimer\getType!


snippet ProgressTimer\getSprite! "csxV3: ProgressTimer::getSprite "
	ProgressTimer\getSprite!


snippet ProgressTimer\setMidpoint(vec2) "csxV3: ProgressTimer::setMidpoint "
	ProgressTimer\setMidpoint(${1:vec2})


snippet ProgressTimer\getBarChangeRate! "csxV3: ProgressTimer::getBarChangeRate "
	ProgressTimer\getBarChangeRate!


snippet ProgressTimer\setReverseDirection(bool) "csxV3: ProgressTimer::setReverseDirection "
	ProgressTimer\setReverseDirection(${1:bool})


snippet ProgressTimer\getMidpoint! "csxV3: ProgressTimer::getMidpoint "
	ProgressTimer\getMidpoint!


snippet ProgressTimer\setPercentage(float) "csxV3: ProgressTimer::setPercentage "
	ProgressTimer\setPercentage(${1:float})


snippet ProgressTimer\setType(type) "csxV3: ProgressTimer::setType "
	ProgressTimer\setType(${1:type})


snippet ProgressTimer\create(sprite) "csxV3: ProgressTimer::create "
	ProgressTimer\create(${1:sprite})


snippet ProgressTimer\setAnchorPoint(vec2) "csxV3: ProgressTimer::setAnchorPoint "
	ProgressTimer\setAnchorPoint(${1:vec2})


snippet ProgressTimer\draw(renderer\,mat4\,bool) "csxV3: ProgressTimer::draw "
	ProgressTimer\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet ProgressTimer\setColor(color3b) "csxV3: ProgressTimer::setColor "
	ProgressTimer\setColor(${1:color3b})


snippet ProgressTimer\getColor! "csxV3: ProgressTimer::getColor "
	ProgressTimer\getColor!


snippet ProgressTimer\setOpacity(char) "csxV3: ProgressTimer::setOpacity "
	ProgressTimer\setOpacity(${1:char})


snippet ProgressTo\create(float\,float) "csxV3: ProgressTo::create "
	ProgressTo\create(${1:float}, ${2:float})


snippet ProgressTo\startWithTarget(node) "csxV3: ProgressTo::startWithTarget "
	ProgressTo\startWithTarget(${1:node})


snippet ProgressTo\clone! "csxV3: ProgressTo::clone "
	ProgressTo\clone!


snippet ProgressTo\reverse! "csxV3: ProgressTo::reverse "
	ProgressTo\reverse!


snippet ProtectedNode\addProtectedChild(node\,int\,int) "csxV3: ProtectedNode::addProtectedChild "
	ProtectedNode\addProtectedChild(${1:node}, ${2:int}, ${3:int})


snippet ProtectedNode\disableCascadeColor! "csxV3: ProtectedNode::disableCascadeColor "
	ProtectedNode\disableCascadeColor!


snippet ProtectedNode\removeProtectedChildByTag(int\,bool) "csxV3: ProtectedNode::removeProtectedChildByTag "
	ProtectedNode\removeProtectedChildByTag(${1:int}, ${2:bool})


snippet ProtectedNode\reorderProtectedChild(node\,int) "csxV3: ProtectedNode::reorderProtectedChild "
	ProtectedNode\reorderProtectedChild(${1:node}, ${2:int})


snippet ProtectedNode\removeAllProtectedChildrenWithCleanup(bool) "csxV3: ProtectedNode::removeAllProtectedChildrenWithCleanup "
	ProtectedNode\removeAllProtectedChildrenWithCleanup(${1:bool})


snippet ProtectedNode\sortAllProtectedChildren! "csxV3: ProtectedNode::sortAllProtectedChildren "
	ProtectedNode\sortAllProtectedChildren!


snippet ProtectedNode\getProtectedChildByTag(int) "csxV3: ProtectedNode::getProtectedChildByTag "
	ProtectedNode\getProtectedChildByTag(${1:int})


snippet ProtectedNode\removeProtectedChild(node\,bool) "csxV3: ProtectedNode::removeProtectedChild "
	ProtectedNode\removeProtectedChild(${1:node}, ${2:bool})


snippet ProtectedNode\removeAllProtectedChildren! "csxV3: ProtectedNode::removeAllProtectedChildren "
	ProtectedNode\removeAllProtectedChildren!


snippet ProtectedNode\create! "csxV3: ProtectedNode::create "
	ProtectedNode\create!


snippet ProtectedNode\updateDisplayedOpacity(char) "csxV3: ProtectedNode::updateDisplayedOpacity "
	ProtectedNode\updateDisplayedOpacity(${1:char})


snippet ProtectedNode\updateDisplayedColor(color3b) "csxV3: ProtectedNode::updateDisplayedColor "
	ProtectedNode\updateDisplayedColor(${1:color3b})


snippet Ref\release! "csxV3: Ref::release "
	Ref\release!


snippet Ref\retain! "csxV3: Ref::retain "
	Ref\retain!


snippet RelativeLayoutParameter\setAlign(relativealign) "csxV3: RelativeLayoutParameter::setAlign "
	RelativeLayoutParameter\setAlign(${1:relativealign})


snippet RelativeLayoutParameter\setRelativeToWidgetName(str) "csxV3: RelativeLayoutParameter::setRelativeToWidgetName "
	RelativeLayoutParameter\setRelativeToWidgetName(${1:str})


snippet RelativeLayoutParameter\getRelativeName! "csxV3: RelativeLayoutParameter::getRelativeName "
	RelativeLayoutParameter\getRelativeName!


snippet RelativeLayoutParameter\getRelativeToWidgetName! "csxV3: RelativeLayoutParameter::getRelativeToWidgetName "
	RelativeLayoutParameter\getRelativeToWidgetName!


snippet RelativeLayoutParameter\setRelativeName(str) "csxV3: RelativeLayoutParameter::setRelativeName "
	RelativeLayoutParameter\setRelativeName(${1:str})


snippet RelativeLayoutParameter\getAlign! "csxV3: RelativeLayoutParameter::getAlign "
	RelativeLayoutParameter\getAlign!


snippet RelativeLayoutParameter\create! "csxV3: RelativeLayoutParameter::create "
	RelativeLayoutParameter\create!


snippet RelativeLayoutParameter\createCloneInstance! "csxV3: RelativeLayoutParameter::createCloneInstance "
	RelativeLayoutParameter\createCloneInstance!


snippet RelativeLayoutParameter\copyProperties(layoutparameter) "csxV3: RelativeLayoutParameter::copyProperties "
	RelativeLayoutParameter\copyProperties(${1:layoutparameter})


snippet RemoveSelf\create! "csxV3: RemoveSelf::create "
	RemoveSelf\create!


snippet RemoveSelf\clone! "csxV3: RemoveSelf::clone "
	RemoveSelf\clone!


snippet RemoveSelf\update(float) "csxV3: RemoveSelf::update "
	RemoveSelf\update(${1:float})


snippet RenderTexture\setVirtualViewport(vec2\,rect\,rect) "csxV3: RenderTexture::setVirtualViewport "
	RenderTexture\setVirtualViewport(${1:vec2}, ${2:rect}, ${3:rect})


snippet RenderTexture\clearStencil(int) "csxV3: RenderTexture::clearStencil "
	RenderTexture\clearStencil(${1:int})


snippet RenderTexture\getClearDepth! "csxV3: RenderTexture::getClearDepth "
	RenderTexture\getClearDepth!


snippet RenderTexture\getClearStencil! "csxV3: RenderTexture::getClearStencil "
	RenderTexture\getClearStencil!


snippet RenderTexture\end! "csxV3: RenderTexture::end "
	RenderTexture\end!


snippet RenderTexture\setClearStencil(int) "csxV3: RenderTexture::setClearStencil "
	RenderTexture\setClearStencil(${1:int})


snippet RenderTexture\setSprite(sprite) "csxV3: RenderTexture::setSprite "
	RenderTexture\setSprite(${1:sprite})


snippet RenderTexture\getSprite! "csxV3: RenderTexture::getSprite "
	RenderTexture\getSprite!


snippet RenderTexture\isAutoDraw! "csxV3: RenderTexture::isAutoDraw "
	RenderTexture\isAutoDraw!


snippet RenderTexture\setKeepMatrix(bool) "csxV3: RenderTexture::setKeepMatrix "
	RenderTexture\setKeepMatrix(${1:bool})


snippet RenderTexture\setClearFlags(int) "csxV3: RenderTexture::setClearFlags "
	RenderTexture\setClearFlags(${1:int})


snippet RenderTexture\begin! "csxV3: RenderTexture::begin "
	RenderTexture\begin!


snippet RenderTexture\saveToFile(str\,format) "csxV3: RenderTexture::saveToFile "
	RenderTexture\saveToFile(${1:str}, ${2:format})


snippet RenderTexture\setAutoDraw(bool) "csxV3: RenderTexture::setAutoDraw "
	RenderTexture\setAutoDraw(${1:bool})


snippet RenderTexture\setClearColor(color4f) "csxV3: RenderTexture::setClearColor "
	RenderTexture\setClearColor(${1:color4f})


snippet RenderTexture\endToLua! "csxV3: RenderTexture::endToLua "
	RenderTexture\endToLua!


snippet RenderTexture\beginWithClear(float\,float\,float\,float\,float\,int) "csxV3: RenderTexture::beginWithClear "
	RenderTexture\beginWithClear(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:int})


snippet RenderTexture\clearDepth(float) "csxV3: RenderTexture::clearDepth "
	RenderTexture\clearDepth(${1:float})


snippet RenderTexture\getClearColor! "csxV3: RenderTexture::getClearColor "
	RenderTexture\getClearColor!


snippet RenderTexture\clear(float\,float\,float\,float) "csxV3: RenderTexture::clear "
	RenderTexture\clear(${1:float}, ${2:float}, ${3:float}, ${4:float})


snippet RenderTexture\getClearFlags! "csxV3: RenderTexture::getClearFlags "
	RenderTexture\getClearFlags!


snippet RenderTexture\newImage! "csxV3: RenderTexture::newImage "
	RenderTexture\newImage!


snippet RenderTexture\setClearDepth(float) "csxV3: RenderTexture::setClearDepth "
	RenderTexture\setClearDepth(${1:float})


snippet RenderTexture\initWithWidthAndHeight(int\,int\,pixelformat\,int) "csxV3: RenderTexture::initWithWidthAndHeight "
	RenderTexture\initWithWidthAndHeight(${1:int}, ${2:int}, ${3:pixelformat}, ${4:int})


snippet RenderTexture\create(int\,int\,pixelformat\,int) "csxV3: RenderTexture::create "
	RenderTexture\create(${1:int}, ${2:int}, ${3:pixelformat}, ${4:int})


snippet RenderTexture\draw(renderer\,mat4\,bool) "csxV3: RenderTexture::draw "
	RenderTexture\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet Repeat\setInnerAction(finitetimeaction) "csxV3: Repeat::setInnerAction "
	Repeat\setInnerAction(${1:finitetimeaction})


snippet Repeat\getInnerAction! "csxV3: Repeat::getInnerAction "
	Repeat\getInnerAction!


snippet Repeat\create(finitetimeaction\,int) "csxV3: Repeat::create "
	Repeat\create(${1:finitetimeaction}, ${2:int})


snippet Repeat\startWithTarget(node) "csxV3: Repeat::startWithTarget "
	Repeat\startWithTarget(${1:node})


snippet Repeat\reverse! "csxV3: Repeat::reverse "
	Repeat\reverse!


snippet Repeat\clone! "csxV3: Repeat::clone "
	Repeat\clone!


snippet Repeat\stop! "csxV3: Repeat::stop "
	Repeat\stop!


snippet Repeat\update(float) "csxV3: Repeat::update "
	Repeat\update(${1:float})


snippet RepeatForever\setInnerAction(actioninterval) "csxV3: RepeatForever::setInnerAction "
	RepeatForever\setInnerAction(${1:actioninterval})


snippet RepeatForever\getInnerAction! "csxV3: RepeatForever::getInnerAction "
	RepeatForever\getInnerAction!


snippet RepeatForever\create(actioninterval) "csxV3: RepeatForever::create "
	RepeatForever\create(${1:actioninterval})


snippet RepeatForever\startWithTarget(node) "csxV3: RepeatForever::startWithTarget "
	RepeatForever\startWithTarget(${1:node})


snippet RepeatForever\clone! "csxV3: RepeatForever::clone "
	RepeatForever\clone!


snippet RepeatForever\isDone! "csxV3: RepeatForever::isDone "
	RepeatForever\isDone!


snippet RepeatForever\reverse! "csxV3: RepeatForever::reverse "
	RepeatForever\reverse!


snippet ReuseGrid\create(int) "csxV3: ReuseGrid::create "
	ReuseGrid\create(${1:int})


snippet ReuseGrid\startWithTarget(node) "csxV3: ReuseGrid::startWithTarget "
	ReuseGrid\startWithTarget(${1:node})


snippet ReuseGrid\clone! "csxV3: ReuseGrid::clone "
	ReuseGrid\clone!


snippet RichElement\init(int\,color3b\,char) "csxV3: RichElement::init "
	RichElement\init(${1:int}, ${2:color3b}, ${3:char})


snippet RichElementCustomNode\init(int\,color3b\,char\,node) "csxV3: RichElementCustomNode::init "
	RichElementCustomNode\init(${1:int}, ${2:color3b}, ${3:char}, ${4:node})


snippet RichElementCustomNode\create(int\,color3b\,char\,node) "csxV3: RichElementCustomNode::create "
	RichElementCustomNode\create(${1:int}, ${2:color3b}, ${3:char}, ${4:node})


snippet RichElementImage\init(int\,color3b\,char\,str) "csxV3: RichElementImage::init "
	RichElementImage\init(${1:int}, ${2:color3b}, ${3:char}, ${4:str})


snippet RichElementImage\create(int\,color3b\,char\,str) "csxV3: RichElementImage::create "
	RichElementImage\create(${1:int}, ${2:color3b}, ${3:char}, ${4:str})


snippet RichElementText\init(int\,color3b\,char\,str\,str\,float) "csxV3: RichElementText::init "
	RichElementText\init(${1:int}, ${2:color3b}, ${3:char}, ${4:str}, ${5:str}, ${6:float})


snippet RichElementText\create(int\,color3b\,char\,str\,str\,float) "csxV3: RichElementText::create "
	RichElementText\create(${1:int}, ${2:color3b}, ${3:char}, ${4:str}, ${5:str}, ${6:float})


snippet RichText\insertElement(richelement\,int) "csxV3: RichText::insertElement "
	RichText\insertElement(${1:richelement}, ${2:int})


snippet RichText\setAnchorPoint(vec2) "csxV3: RichText::setAnchorPoint "
	RichText\setAnchorPoint(${1:vec2})


snippet RichText\pushBackElement(richelement) "csxV3: RichText::pushBackElement "
	RichText\pushBackElement(${1:richelement})


snippet RichText\ignoreContentAdaptWithSize(bool) "csxV3: RichText::ignoreContentAdaptWithSize "
	RichText\ignoreContentAdaptWithSize(${1:bool})


snippet RichText\setVerticalSpace(float) "csxV3: RichText::setVerticalSpace "
	RichText\setVerticalSpace(${1:float})


snippet RichText\formatText! "csxV3: RichText::formatText "
	RichText\formatText!


snippet RichText\removeElement(int) "csxV3: RichText::removeElement "
	RichText\removeElement(${1:int})


snippet RichText\create! "csxV3: RichText::create "
	RichText\create!


snippet RichText\getDescription! "csxV3: RichText::getDescription "
	RichText\getDescription!


snippet RichText\getVirtualRendererSize! "csxV3: RichText::getVirtualRendererSize "
	RichText\getVirtualRendererSize!


snippet Ripple3D\setAmplitudeRate(float) "csxV3: Ripple3D::setAmplitudeRate "
	Ripple3D\setAmplitudeRate(${1:float})


snippet Ripple3D\getAmplitudeRate! "csxV3: Ripple3D::getAmplitudeRate "
	Ripple3D\getAmplitudeRate!


snippet Ripple3D\setAmplitude(float) "csxV3: Ripple3D::setAmplitude "
	Ripple3D\setAmplitude(${1:float})


snippet Ripple3D\getAmplitude! "csxV3: Ripple3D::getAmplitude "
	Ripple3D\getAmplitude!


snippet Ripple3D\setPosition(vec2) "csxV3: Ripple3D::setPosition "
	Ripple3D\setPosition(${1:vec2})


snippet Ripple3D\getPosition! "csxV3: Ripple3D::getPosition "
	Ripple3D\getPosition!


snippet Ripple3D\create(float\,size\,vec2\,float\,int\,float) "csxV3: Ripple3D::create "
	Ripple3D\create(${1:float}, ${2:size}, ${3:vec2}, ${4:float}, ${5:int}, ${6:float})


snippet Ripple3D\clone! "csxV3: Ripple3D::clone "
	Ripple3D\clone!


snippet RotateBy\create(float\,float\,float) "csxV3: RotateBy::create "
	RotateBy\create(${1:float}, ${2:float}, ${3:float})


snippet RotateBy\startWithTarget(node) "csxV3: RotateBy::startWithTarget "
	RotateBy\startWithTarget(${1:node})


snippet RotateBy\clone! "csxV3: RotateBy::clone "
	RotateBy\clone!


snippet RotateBy\reverse! "csxV3: RotateBy::reverse "
	RotateBy\reverse!


snippet RotateTo\create(float\,float\,float) "csxV3: RotateTo::create "
	RotateTo\create(${1:float}, ${2:float}, ${3:float})


snippet RotateTo\startWithTarget(node) "csxV3: RotateTo::startWithTarget "
	RotateTo\startWithTarget(${1:node})


snippet RotateTo\clone! "csxV3: RotateTo::clone "
	RotateTo\clone!


snippet RotateTo\reverse! "csxV3: RotateTo::reverse "
	RotateTo\reverse!


snippet Scale9Sprite\resizableSpriteWithCapInsets(rect) "csxV3: Scale9Sprite::resizableSpriteWithCapInsets "
	Scale9Sprite\resizableSpriteWithCapInsets(${1:rect})


snippet Scale9Sprite\setInsetBottom(float) "csxV3: Scale9Sprite::setInsetBottom "
	Scale9Sprite\setInsetBottom(${1:float})


snippet Scale9Sprite\initWithSpriteFrameName(str\,rect) "csxV3: Scale9Sprite::initWithSpriteFrameName "
	Scale9Sprite\initWithSpriteFrameName(${1:str}, ${2:rect})


snippet Scale9Sprite\setInsetTop(float) "csxV3: Scale9Sprite::setInsetTop "
	Scale9Sprite\setInsetTop(${1:float})


snippet Scale9Sprite\init! "csxV3: Scale9Sprite::init "
	Scale9Sprite\init!


snippet Scale9Sprite\setPreferredSize(size) "csxV3: Scale9Sprite::setPreferredSize "
	Scale9Sprite\setPreferredSize(${1:size})


snippet Scale9Sprite\setSpriteFrame(spriteframe) "csxV3: Scale9Sprite::setSpriteFrame "
	Scale9Sprite\setSpriteFrame(${1:spriteframe})


snippet Scale9Sprite\initWithBatchNode(spritebatchnode\,rect\,bool\,rect) "csxV3: Scale9Sprite::initWithBatchNode "
	Scale9Sprite\initWithBatchNode(${1:spritebatchnode}, ${2:rect}, ${3:bool}, ${4:rect})


snippet Scale9Sprite\getInsetBottom! "csxV3: Scale9Sprite::getInsetBottom "
	Scale9Sprite\getInsetBottom!


snippet Scale9Sprite\getCapInsets! "csxV3: Scale9Sprite::getCapInsets "
	Scale9Sprite\getCapInsets!


snippet Scale9Sprite\updateWithBatchNode(spritebatchnode\,rect\,bool\,rect) "csxV3: Scale9Sprite::updateWithBatchNode "
	Scale9Sprite\updateWithBatchNode(${1:spritebatchnode}, ${2:rect}, ${3:bool}, ${4:rect})


snippet Scale9Sprite\getInsetRight! "csxV3: Scale9Sprite::getInsetRight "
	Scale9Sprite\getInsetRight!


snippet Scale9Sprite\getOriginalSize! "csxV3: Scale9Sprite::getOriginalSize "
	Scale9Sprite\getOriginalSize!


snippet Scale9Sprite\initWithFile(str\,rect\,rect) "csxV3: Scale9Sprite::initWithFile "
	Scale9Sprite\initWithFile(${1:str}, ${2:rect}, ${3:rect})


snippet Scale9Sprite\getInsetTop! "csxV3: Scale9Sprite::getInsetTop "
	Scale9Sprite\getInsetTop!


snippet Scale9Sprite\setInsetLeft(float) "csxV3: Scale9Sprite::setInsetLeft "
	Scale9Sprite\setInsetLeft(${1:float})


snippet Scale9Sprite\initWithSpriteFrame(spriteframe\,rect) "csxV3: Scale9Sprite::initWithSpriteFrame "
	Scale9Sprite\initWithSpriteFrame(${1:spriteframe}, ${2:rect})


snippet Scale9Sprite\getPreferredSize! "csxV3: Scale9Sprite::getPreferredSize "
	Scale9Sprite\getPreferredSize!


snippet Scale9Sprite\setCapInsets(rect) "csxV3: Scale9Sprite::setCapInsets "
	Scale9Sprite\setCapInsets(${1:rect})


snippet Scale9Sprite\getInsetLeft! "csxV3: Scale9Sprite::getInsetLeft "
	Scale9Sprite\getInsetLeft!


snippet Scale9Sprite\setInsetRight(float) "csxV3: Scale9Sprite::setInsetRight "
	Scale9Sprite\setInsetRight(${1:float})


snippet Scale9Sprite\create(str\,rect\,rect) "csxV3: Scale9Sprite::create "
	Scale9Sprite\create(${1:str}, ${2:rect}, ${3:rect})


snippet Scale9Sprite\createWithSpriteFrameName(str\,rect) "csxV3: Scale9Sprite::createWithSpriteFrameName "
	Scale9Sprite\createWithSpriteFrameName(${1:str}, ${2:rect})


snippet Scale9Sprite\createWithSpriteFrame(spriteframe\,rect) "csxV3: Scale9Sprite::createWithSpriteFrame "
	Scale9Sprite\createWithSpriteFrame(${1:spriteframe}, ${2:rect})


snippet Scale9Sprite\isOpacityModifyRGB! "csxV3: Scale9Sprite::isOpacityModifyRGB "
	Scale9Sprite\isOpacityModifyRGB!


snippet Scale9Sprite\setColor(color3b) "csxV3: Scale9Sprite::setColor "
	Scale9Sprite\setColor(${1:color3b})


snippet Scale9Sprite\setOpacityModifyRGB(bool) "csxV3: Scale9Sprite::setOpacityModifyRGB "
	Scale9Sprite\setOpacityModifyRGB(${1:bool})


snippet Scale9Sprite\setOpacity(char) "csxV3: Scale9Sprite::setOpacity "
	Scale9Sprite\setOpacity(${1:char})


snippet Scale9Sprite\updateDisplayedOpacity(char) "csxV3: Scale9Sprite::updateDisplayedOpacity "
	Scale9Sprite\updateDisplayedOpacity(${1:char})


snippet Scale9Sprite\updateDisplayedColor(color3b) "csxV3: Scale9Sprite::updateDisplayedColor "
	Scale9Sprite\updateDisplayedColor(${1:color3b})


snippet Scale9Sprite\setContentSize(size) "csxV3: Scale9Sprite::setContentSize "
	Scale9Sprite\setContentSize(${1:size})


snippet ScaleBy\create(float\,float\,float\,float) "csxV3: ScaleBy::create "
	ScaleBy\create(${1:float}, ${2:float}, ${3:float}, ${4:float})


snippet ScaleBy\startWithTarget(node) "csxV3: ScaleBy::startWithTarget "
	ScaleBy\startWithTarget(${1:node})


snippet ScaleBy\clone! "csxV3: ScaleBy::clone "
	ScaleBy\clone!


snippet ScaleTo\create(float\,float\,float\,float) "csxV3: ScaleTo::create "
	ScaleTo\create(${1:float}, ${2:float}, ${3:float}, ${4:float})


snippet ScaleTo\startWithTarget(node) "csxV3: ScaleTo::startWithTarget "
	ScaleTo\startWithTarget(${1:node})


snippet ScaleTo\clone! "csxV3: ScaleTo::clone "
	ScaleTo\clone!


snippet ScaleTo\reverse! "csxV3: ScaleTo::reverse "
	ScaleTo\reverse!


snippet Scene\getPhysicsWorld! "csxV3: Scene::getPhysicsWorld "
	Scene\getPhysicsWorld!


snippet Scene\create! "csxV3: Scene::create "
	Scene\create!


snippet Scene\createWithPhysics! "csxV3: Scene::createWithPhysics "
	Scene\createWithPhysics!


snippet Scene\getDescription! "csxV3: Scene::getDescription "
	Scene\getDescription!


snippet Scene\getScene! "csxV3: Scene::getScene "
	Scene\getScene!


snippet Scene\update(float) "csxV3: Scene::update "
	Scene\update(${1:float})


snippet SceneReader\setTarget(func) "csxV3: SceneReader::setTarget "
	SceneReader\setTarget(${1:func})


snippet SceneReader\createNodeWithSceneFile(str\,attachcomponenttype) "csxV3: SceneReader::createNodeWithSceneFile "
	SceneReader\createNodeWithSceneFile(${1:str}, ${2:attachcomponenttype})


snippet SceneReader\getAttachComponentType! "csxV3: SceneReader::getAttachComponentType "
	SceneReader\getAttachComponentType!


snippet SceneReader\getNodeByTag(int) "csxV3: SceneReader::getNodeByTag "
	SceneReader\getNodeByTag(${1:int})


snippet SceneReader\destroyInstance! "csxV3: SceneReader::destroyInstance "
	SceneReader\destroyInstance!


snippet SceneReader\sceneReaderVersion! "csxV3: SceneReader::sceneReaderVersion "
	SceneReader\sceneReaderVersion!


snippet Scheduler\setTimeScale(float) "csxV3: Scheduler::setTimeScale "
	Scheduler\setTimeScale(${1:float})


snippet Scheduler\getTimeScale! "csxV3: Scheduler::getTimeScale "
	Scheduler\getTimeScale!


snippet ScrollView\scrollToTop(float\,bool) "csxV3: ScrollView::scrollToTop "
	ScrollView\scrollToTop(${1:float}, ${2:bool})


snippet ScrollView\scrollToPercentHorizontal(float\,float\,bool) "csxV3: ScrollView::scrollToPercentHorizontal "
	ScrollView\scrollToPercentHorizontal(${1:float}, ${2:float}, ${3:bool})


snippet ScrollView\isInertiaScrollEnabled! "csxV3: ScrollView::isInertiaScrollEnabled "
	ScrollView\isInertiaScrollEnabled!


snippet ScrollView\scrollToPercentBothDirection(vec2\,float\,bool) "csxV3: ScrollView::scrollToPercentBothDirection "
	ScrollView\scrollToPercentBothDirection(${1:vec2}, ${2:float}, ${3:bool})


snippet ScrollView\getDirection! "csxV3: ScrollView::getDirection "
	ScrollView\getDirection!


snippet ScrollView\scrollToBottomLeft(float\,bool) "csxV3: ScrollView::scrollToBottomLeft "
	ScrollView\scrollToBottomLeft(${1:float}, ${2:bool})


snippet ScrollView\getInnerContainer! "csxV3: ScrollView::getInnerContainer "
	ScrollView\getInnerContainer!


snippet ScrollView\jumpToBottom! "csxV3: ScrollView::jumpToBottom "
	ScrollView\jumpToBottom!


snippet ScrollView\setDirection(direction) "csxV3: ScrollView::setDirection "
	ScrollView\setDirection(${1:direction})


snippet ScrollView\scrollToTopLeft(float\,bool) "csxV3: ScrollView::scrollToTopLeft "
	ScrollView\scrollToTopLeft(${1:float}, ${2:bool})


snippet ScrollView\jumpToTopRight! "csxV3: ScrollView::jumpToTopRight "
	ScrollView\jumpToTopRight!


snippet ScrollView\jumpToBottomLeft! "csxV3: ScrollView::jumpToBottomLeft "
	ScrollView\jumpToBottomLeft!


snippet ScrollView\setInnerContainerSize(size) "csxV3: ScrollView::setInnerContainerSize "
	ScrollView\setInnerContainerSize(${1:size})


snippet ScrollView\getInnerContainerSize! "csxV3: ScrollView::getInnerContainerSize "
	ScrollView\getInnerContainerSize!


snippet ScrollView\isBounceEnabled! "csxV3: ScrollView::isBounceEnabled "
	ScrollView\isBounceEnabled!


snippet ScrollView\jumpToPercentVertical(float) "csxV3: ScrollView::jumpToPercentVertical "
	ScrollView\jumpToPercentVertical(${1:float})


snippet ScrollView\addEventListener(func) "csxV3: ScrollView::addEventListener "
	ScrollView\addEventListener(${1:func})


snippet ScrollView\setInertiaScrollEnabled(bool) "csxV3: ScrollView::setInertiaScrollEnabled "
	ScrollView\setInertiaScrollEnabled(${1:bool})


snippet ScrollView\jumpToTopLeft! "csxV3: ScrollView::jumpToTopLeft "
	ScrollView\jumpToTopLeft!


snippet ScrollView\jumpToPercentHorizontal(float) "csxV3: ScrollView::jumpToPercentHorizontal "
	ScrollView\jumpToPercentHorizontal(${1:float})


snippet ScrollView\jumpToBottomRight! "csxV3: ScrollView::jumpToBottomRight "
	ScrollView\jumpToBottomRight!


snippet ScrollView\setBounceEnabled(bool) "csxV3: ScrollView::setBounceEnabled "
	ScrollView\setBounceEnabled(${1:bool})


snippet ScrollView\jumpToTop! "csxV3: ScrollView::jumpToTop "
	ScrollView\jumpToTop!


snippet ScrollView\scrollToLeft(float\,bool) "csxV3: ScrollView::scrollToLeft "
	ScrollView\scrollToLeft(${1:float}, ${2:bool})


snippet ScrollView\jumpToPercentBothDirection(vec2) "csxV3: ScrollView::jumpToPercentBothDirection "
	ScrollView\jumpToPercentBothDirection(${1:vec2})


snippet ScrollView\scrollToPercentVertical(float\,float\,bool) "csxV3: ScrollView::scrollToPercentVertical "
	ScrollView\scrollToPercentVertical(${1:float}, ${2:float}, ${3:bool})


snippet ScrollView\scrollToBottom(float\,bool) "csxV3: ScrollView::scrollToBottom "
	ScrollView\scrollToBottom(${1:float}, ${2:bool})


snippet ScrollView\scrollToBottomRight(float\,bool) "csxV3: ScrollView::scrollToBottomRight "
	ScrollView\scrollToBottomRight(${1:float}, ${2:bool})


snippet ScrollView\jumpToLeft! "csxV3: ScrollView::jumpToLeft "
	ScrollView\jumpToLeft!


snippet ScrollView\scrollToRight(float\,bool) "csxV3: ScrollView::scrollToRight "
	ScrollView\scrollToRight(${1:float}, ${2:bool})


snippet ScrollView\jumpToRight! "csxV3: ScrollView::jumpToRight "
	ScrollView\jumpToRight!


snippet ScrollView\scrollToTopRight(float\,bool) "csxV3: ScrollView::scrollToTopRight "
	ScrollView\scrollToTopRight(${1:float}, ${2:bool})


snippet ScrollView\create! "csxV3: ScrollView::create "
	ScrollView\create!


snippet ScrollView\createInstance! "csxV3: ScrollView::createInstance "
	ScrollView\createInstance!


snippet ScrollView\addChild(node\,int\,int) "csxV3: ScrollView::addChild "
	ScrollView\addChild(${1:node}, ${2:int}, ${3:int})


snippet ScrollView\getChildByName(str) "csxV3: ScrollView::getChildByName "
	ScrollView\getChildByName(${1:str})


snippet ScrollView\getDescription! "csxV3: ScrollView::getDescription "
	ScrollView\getDescription!


snippet ScrollView\update(float) "csxV3: ScrollView::update "
	ScrollView\update(${1:float})


snippet ScrollView\getLayoutType! "csxV3: ScrollView::getLayoutType "
	ScrollView\getLayoutType!


snippet ScrollView\removeAllChildrenWithCleanup(bool) "csxV3: ScrollView::removeAllChildrenWithCleanup "
	ScrollView\removeAllChildrenWithCleanup(${1:bool})


snippet ScrollView\removeAllChildren! "csxV3: ScrollView::removeAllChildren "
	ScrollView\removeAllChildren!


snippet ScrollView\removeChild(node\,bool) "csxV3: ScrollView::removeChild "
	ScrollView\removeChild(${1:node}, ${2:bool})


snippet ScrollView\getChildren! "csxV3: ScrollView::getChildren "
	ScrollView\getChildren!


snippet ScrollView\getChildByTag(int) "csxV3: ScrollView::getChildByTag "
	ScrollView\getChildByTag(${1:int})


snippet ScrollView\getChildrenCount! "csxV3: ScrollView::getChildrenCount "
	ScrollView\getChildrenCount!


snippet ScrollView\setLayoutType(type) "csxV3: ScrollView::setLayoutType "
	ScrollView\setLayoutType(${1:type})


snippet Sequence\startWithTarget(node) "csxV3: Sequence::startWithTarget "
	Sequence\startWithTarget(${1:node})


snippet Sequence\clone! "csxV3: Sequence::clone "
	Sequence\clone!


snippet Sequence\stop! "csxV3: Sequence::stop "
	Sequence\stop!


snippet Sequence\reverse! "csxV3: Sequence::reverse "
	Sequence\reverse!


snippet Shaky3D\create(float\,size\,int\,bool) "csxV3: Shaky3D::create "
	Shaky3D\create(${1:float}, ${2:size}, ${3:int}, ${4:bool})


snippet Shaky3D\clone! "csxV3: Shaky3D::clone "
	Shaky3D\clone!


snippet ShakyTiles3D\create(float\,size\,int\,bool) "csxV3: ShakyTiles3D::create "
	ShakyTiles3D\create(${1:float}, ${2:size}, ${3:int}, ${4:bool})


snippet ShakyTiles3D\clone! "csxV3: ShakyTiles3D::clone "
	ShakyTiles3D\clone!


snippet ShatteredTiles3D\create(float\,size\,int\,bool) "csxV3: ShatteredTiles3D::create "
	ShatteredTiles3D\create(${1:float}, ${2:size}, ${3:int}, ${4:bool})


snippet ShatteredTiles3D\clone! "csxV3: ShatteredTiles3D::clone "
	ShatteredTiles3D\clone!


snippet Show\create! "csxV3: Show::create "
	Show\create!


snippet Show\clone! "csxV3: Show::clone "
	Show\clone!


snippet Show\update(float) "csxV3: Show::update "
	Show\update(${1:float})


snippet ShuffleTiles\placeTile(vec2\,tile) "csxV3: ShuffleTiles::placeTile "
	ShuffleTiles\placeTile(${1:vec2}, ${2:tile})


snippet ShuffleTiles\shuffle(int\,int) "csxV3: ShuffleTiles::shuffle "
	ShuffleTiles\shuffle(${1:int}, ${2:int})


snippet ShuffleTiles\getDelta(size) "csxV3: ShuffleTiles::getDelta "
	ShuffleTiles\getDelta(${1:size})


snippet ShuffleTiles\create(float\,size\,int) "csxV3: ShuffleTiles::create "
	ShuffleTiles\create(${1:float}, ${2:size}, ${3:int})


snippet ShuffleTiles\startWithTarget(node) "csxV3: ShuffleTiles::startWithTarget "
	ShuffleTiles\startWithTarget(${1:node})


snippet ShuffleTiles\clone! "csxV3: ShuffleTiles::clone "
	ShuffleTiles\clone!


snippet SimpleAudioEngine\preloadBackgroundMusic(char) "csxV3: SimpleAudioEngine::preloadBackgroundMusic "
	SimpleAudioEngine\preloadBackgroundMusic(${1:char})


snippet SimpleAudioEngine\stopBackgroundMusic! "csxV3: SimpleAudioEngine::stopBackgroundMusic "
	SimpleAudioEngine\stopBackgroundMusic!


snippet SimpleAudioEngine\stopAllEffects! "csxV3: SimpleAudioEngine::stopAllEffects "
	SimpleAudioEngine\stopAllEffects!


snippet SimpleAudioEngine\getBackgroundMusicVolume! "csxV3: SimpleAudioEngine::getBackgroundMusicVolume "
	SimpleAudioEngine\getBackgroundMusicVolume!


snippet SimpleAudioEngine\resumeBackgroundMusic! "csxV3: SimpleAudioEngine::resumeBackgroundMusic "
	SimpleAudioEngine\resumeBackgroundMusic!


snippet SimpleAudioEngine\setBackgroundMusicVolume(float) "csxV3: SimpleAudioEngine::setBackgroundMusicVolume "
	SimpleAudioEngine\setBackgroundMusicVolume(${1:float})


snippet SimpleAudioEngine\preloadEffect(char) "csxV3: SimpleAudioEngine::preloadEffect "
	SimpleAudioEngine\preloadEffect(${1:char})


snippet SimpleAudioEngine\isBackgroundMusicPlaying! "csxV3: SimpleAudioEngine::isBackgroundMusicPlaying "
	SimpleAudioEngine\isBackgroundMusicPlaying!


snippet SimpleAudioEngine\getEffectsVolume! "csxV3: SimpleAudioEngine::getEffectsVolume "
	SimpleAudioEngine\getEffectsVolume!


snippet SimpleAudioEngine\willPlayBackgroundMusic! "csxV3: SimpleAudioEngine::willPlayBackgroundMusic "
	SimpleAudioEngine\willPlayBackgroundMusic!


snippet SimpleAudioEngine\pauseEffect(int) "csxV3: SimpleAudioEngine::pauseEffect "
	SimpleAudioEngine\pauseEffect(${1:int})


snippet SimpleAudioEngine\playEffect(char\,bool\,float\,float\,float) "csxV3: SimpleAudioEngine::playEffect "
	SimpleAudioEngine\playEffect(${1:char}, ${2:bool}, ${3:float}, ${4:float}, ${5:float})


snippet SimpleAudioEngine\rewindBackgroundMusic! "csxV3: SimpleAudioEngine::rewindBackgroundMusic "
	SimpleAudioEngine\rewindBackgroundMusic!


snippet SimpleAudioEngine\playBackgroundMusic(char\,bool) "csxV3: SimpleAudioEngine::playBackgroundMusic "
	SimpleAudioEngine\playBackgroundMusic(${1:char}, ${2:bool})


snippet SimpleAudioEngine\resumeAllEffects! "csxV3: SimpleAudioEngine::resumeAllEffects "
	SimpleAudioEngine\resumeAllEffects!


snippet SimpleAudioEngine\setEffectsVolume(float) "csxV3: SimpleAudioEngine::setEffectsVolume "
	SimpleAudioEngine\setEffectsVolume(${1:float})


snippet SimpleAudioEngine\stopEffect(int) "csxV3: SimpleAudioEngine::stopEffect "
	SimpleAudioEngine\stopEffect(${1:int})


snippet SimpleAudioEngine\pauseBackgroundMusic! "csxV3: SimpleAudioEngine::pauseBackgroundMusic "
	SimpleAudioEngine\pauseBackgroundMusic!


snippet SimpleAudioEngine\pauseAllEffects! "csxV3: SimpleAudioEngine::pauseAllEffects "
	SimpleAudioEngine\pauseAllEffects!


snippet SimpleAudioEngine\unloadEffect(char) "csxV3: SimpleAudioEngine::unloadEffect "
	SimpleAudioEngine\unloadEffect(${1:char})


snippet SimpleAudioEngine\resumeEffect(int) "csxV3: SimpleAudioEngine::resumeEffect "
	SimpleAudioEngine\resumeEffect(${1:int})


snippet SimpleAudioEngine\end! "csxV3: SimpleAudioEngine::end "
	SimpleAudioEngine\end!


snippet Skeleton\setToSetupPose! "csxV3: Skeleton::setToSetupPose "
	Skeleton\setToSetupPose!


snippet Skeleton\setBlendFunc(blendfunc) "csxV3: Skeleton::setBlendFunc "
	Skeleton\setBlendFunc(${1:blendfunc})


snippet Skeleton\onDraw(mat4\,bool) "csxV3: Skeleton::onDraw "
	Skeleton\onDraw(${1:mat4}, ${2:bool})


snippet Skeleton\setSlotsToSetupPose! "csxV3: Skeleton::setSlotsToSetupPose "
	Skeleton\setSlotsToSetupPose!


snippet Skeleton\getBlendFunc! "csxV3: Skeleton::getBlendFunc "
	Skeleton\getBlendFunc!


snippet Skeleton\setSkin(char) "csxV3: Skeleton::setSkin "
	Skeleton\setSkin(${1:char})


snippet Skeleton\setBonesToSetupPose! "csxV3: Skeleton::setBonesToSetupPose "
	Skeleton\setBonesToSetupPose!


snippet Skeleton\getBoundingBox! "csxV3: Skeleton::getBoundingBox "
	Skeleton\getBoundingBox!


snippet Skeleton\onEnter! "csxV3: Skeleton::onEnter "
	Skeleton\onEnter!


snippet SkeletonAnimation\setMix(char\,char\,float) "csxV3: SkeletonAnimation::setMix "
	SkeletonAnimation\setMix(${1:char}, ${2:char}, ${3:float})


snippet SkeletonAnimation\clearTracks! "csxV3: SkeletonAnimation::clearTracks "
	SkeletonAnimation\clearTracks!


snippet SkeletonAnimation\clearTrack! "csxV3: SkeletonAnimation::clearTrack "
	SkeletonAnimation\clearTrack!


snippet SkewBy\create(float\,float\,float) "csxV3: SkewBy::create "
	SkewBy\create(${1:float}, ${2:float}, ${3:float})


snippet SkewBy\startWithTarget(node) "csxV3: SkewBy::startWithTarget "
	SkewBy\startWithTarget(${1:node})


snippet SkewBy\clone! "csxV3: SkewBy::clone "
	SkewBy\clone!


snippet SkewTo\create(float\,float\,float) "csxV3: SkewTo::create "
	SkewTo\create(${1:float}, ${2:float}, ${3:float})


snippet SkewTo\startWithTarget(node) "csxV3: SkewTo::startWithTarget "
	SkewTo\startWithTarget(${1:node})


snippet SkewTo\clone! "csxV3: SkewTo::clone "
	SkewTo\clone!


snippet SkewTo\reverse! "csxV3: SkewTo::reverse "
	SkewTo\reverse!


snippet Skin\getBone! "csxV3: Skin::getBone "
	Skin\getBone!


snippet Skin\getNodeToWorldTransformAR! "csxV3: Skin::getNodeToWorldTransformAR "
	Skin\getNodeToWorldTransformAR!


snippet Skin\initWithFile(str) "csxV3: Skin::initWithFile "
	Skin\initWithFile(${1:str})


snippet Skin\getDisplayName! "csxV3: Skin::getDisplayName "
	Skin\getDisplayName!


snippet Skin\updateArmatureTransform! "csxV3: Skin::updateArmatureTransform "
	Skin\updateArmatureTransform!


snippet Skin\initWithSpriteFrameName(str) "csxV3: Skin::initWithSpriteFrameName "
	Skin\initWithSpriteFrameName(${1:str})


snippet Skin\setBone(bone) "csxV3: Skin::setBone "
	Skin\setBone(${1:bone})


snippet Skin\create(str) "csxV3: Skin::create "
	Skin\create(${1:str})


snippet Skin\createWithSpriteFrameName(str) "csxV3: Skin::createWithSpriteFrameName "
	Skin\createWithSpriteFrameName(${1:str})


snippet Skin\updateTransform! "csxV3: Skin::updateTransform "
	Skin\updateTransform!


snippet Skin\getNodeToWorldTransform! "csxV3: Skin::getNodeToWorldTransform "
	Skin\getNodeToWorldTransform!


snippet Skin\draw(renderer\,mat4\,bool) "csxV3: Skin::draw "
	Skin\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet Slider\setPercent(int) "csxV3: Slider::setPercent "
	Slider\setPercent(${1:int})


snippet Slider\loadSlidBallTextureDisabled(str\,texturerestype) "csxV3: Slider::loadSlidBallTextureDisabled "
	Slider\loadSlidBallTextureDisabled(${1:str}, ${2:texturerestype})


snippet Slider\loadSlidBallTextureNormal(str\,texturerestype) "csxV3: Slider::loadSlidBallTextureNormal "
	Slider\loadSlidBallTextureNormal(${1:str}, ${2:texturerestype})


snippet Slider\loadBarTexture(str\,texturerestype) "csxV3: Slider::loadBarTexture "
	Slider\loadBarTexture(${1:str}, ${2:texturerestype})


snippet Slider\loadProgressBarTexture(str\,texturerestype) "csxV3: Slider::loadProgressBarTexture "
	Slider\loadProgressBarTexture(${1:str}, ${2:texturerestype})


snippet Slider\loadSlidBallTextures(str\,str\,str\,texturerestype) "csxV3: Slider::loadSlidBallTextures "
	Slider\loadSlidBallTextures(${1:str}, ${2:str}, ${3:str}, ${4:texturerestype})


snippet Slider\setCapInsetProgressBarRebderer(rect) "csxV3: Slider::setCapInsetProgressBarRebderer "
	Slider\setCapInsetProgressBarRebderer(${1:rect})


snippet Slider\setCapInsetsBarRenderer(rect) "csxV3: Slider::setCapInsetsBarRenderer "
	Slider\setCapInsetsBarRenderer(${1:rect})


snippet Slider\getCapInsetsProgressBarRebderer! "csxV3: Slider::getCapInsetsProgressBarRebderer "
	Slider\getCapInsetsProgressBarRebderer!


snippet Slider\setScale9Enabled(bool) "csxV3: Slider::setScale9Enabled "
	Slider\setScale9Enabled(${1:bool})


snippet Slider\setCapInsets(rect) "csxV3: Slider::setCapInsets "
	Slider\setCapInsets(${1:rect})


snippet Slider\addEventListener(func) "csxV3: Slider::addEventListener "
	Slider\addEventListener(${1:func})


snippet Slider\loadSlidBallTexturePressed(str\,texturerestype) "csxV3: Slider::loadSlidBallTexturePressed "
	Slider\loadSlidBallTexturePressed(${1:str}, ${2:texturerestype})


snippet Slider\isScale9Enabled! "csxV3: Slider::isScale9Enabled "
	Slider\isScale9Enabled!


snippet Slider\getCapInsetsBarRenderer! "csxV3: Slider::getCapInsetsBarRenderer "
	Slider\getCapInsetsBarRenderer!


snippet Slider\getPercent! "csxV3: Slider::getPercent "
	Slider\getPercent!


snippet Slider\create! "csxV3: Slider::create "
	Slider\create!


snippet Slider\createInstance! "csxV3: Slider::createInstance "
	Slider\createInstance!


snippet Slider\getVirtualRenderer! "csxV3: Slider::getVirtualRenderer "
	Slider\getVirtualRenderer!


snippet Slider\ignoreContentAdaptWithSize(bool) "csxV3: Slider::ignoreContentAdaptWithSize "
	Slider\ignoreContentAdaptWithSize(${1:bool})


snippet Slider\getDescription! "csxV3: Slider::getDescription "
	Slider\getDescription!


snippet Slider\hitTest(vec2) "csxV3: Slider::hitTest "
	Slider\hitTest(${1:vec2})


snippet Slider\getVirtualRendererSize! "csxV3: Slider::getVirtualRendererSize "
	Slider\getVirtualRendererSize!


snippet Spawn\startWithTarget(node) "csxV3: Spawn::startWithTarget "
	Spawn\startWithTarget(${1:node})


snippet Spawn\clone! "csxV3: Spawn::clone "
	Spawn\clone!


snippet Spawn\stop! "csxV3: Spawn::stop "
	Spawn\stop!


snippet Spawn\reverse! "csxV3: Spawn::reverse "
	Spawn\reverse!


snippet Speed\setInnerAction(actioninterval) "csxV3: Speed::setInnerAction "
	Speed\setInnerAction(${1:actioninterval})


snippet Speed\setSpeed(float) "csxV3: Speed::setSpeed "
	Speed\setSpeed(${1:float})


snippet Speed\getInnerAction! "csxV3: Speed::getInnerAction "
	Speed\getInnerAction!


snippet Speed\getSpeed! "csxV3: Speed::getSpeed "
	Speed\getSpeed!


snippet Speed\create(actioninterval\,float) "csxV3: Speed::create "
	Speed\create(${1:actioninterval}, ${2:float})


snippet Speed\startWithTarget(node) "csxV3: Speed::startWithTarget "
	Speed\startWithTarget(${1:node})


snippet Speed\reverse! "csxV3: Speed::reverse "
	Speed\reverse!


snippet Speed\clone! "csxV3: Speed::clone "
	Speed\clone!


snippet Speed\stop! "csxV3: Speed::stop "
	Speed\stop!


snippet Speed\step(float) "csxV3: Speed::step "
	Speed\step(${1:float})


snippet SplitCols\create(float\,int) "csxV3: SplitCols::create "
	SplitCols\create(${1:float}, ${2:int})


snippet SplitCols\startWithTarget(node) "csxV3: SplitCols::startWithTarget "
	SplitCols\startWithTarget(${1:node})


snippet SplitCols\clone! "csxV3: SplitCols::clone "
	SplitCols\clone!


snippet SplitRows\create(float\,int) "csxV3: SplitRows::create "
	SplitRows\create(${1:float}, ${2:int})


snippet SplitRows\startWithTarget(node) "csxV3: SplitRows::startWithTarget "
	SplitRows\startWithTarget(${1:node})


snippet SplitRows\clone! "csxV3: SplitRows::clone "
	SplitRows\clone!


snippet Sprite\setSpriteFrame(str) "csxV3: Sprite::setSpriteFrame "
	Sprite\setSpriteFrame(${1:str})


snippet Sprite\setTexture(str) "csxV3: Sprite::setTexture "
	Sprite\setTexture(${1:str})


snippet Sprite\getTexture! "csxV3: Sprite::getTexture "
	Sprite\getTexture!


snippet Sprite\setFlippedY(bool) "csxV3: Sprite::setFlippedY "
	Sprite\setFlippedY(${1:bool})


snippet Sprite\setFlippedX(bool) "csxV3: Sprite::setFlippedX "
	Sprite\setFlippedX(${1:bool})


snippet Sprite\getBatchNode! "csxV3: Sprite::getBatchNode "
	Sprite\getBatchNode!


snippet Sprite\getOffsetPosition! "csxV3: Sprite::getOffsetPosition "
	Sprite\getOffsetPosition!


snippet Sprite\removeAllChildrenWithCleanup(bool) "csxV3: Sprite::removeAllChildrenWithCleanup "
	Sprite\removeAllChildrenWithCleanup(${1:bool})


snippet Sprite\updateTransform! "csxV3: Sprite::updateTransform "
	Sprite\updateTransform!


snippet Sprite\setTextureRect(rect\,bool\,size) "csxV3: Sprite::setTextureRect "
	Sprite\setTextureRect(${1:rect}, ${2:bool}, ${3:size})


snippet Sprite\isFrameDisplayed(spriteframe) "csxV3: Sprite::isFrameDisplayed "
	Sprite\isFrameDisplayed(${1:spriteframe})


snippet Sprite\getAtlasIndex! "csxV3: Sprite::getAtlasIndex "
	Sprite\getAtlasIndex!


snippet Sprite\setBatchNode(spritebatchnode) "csxV3: Sprite::setBatchNode "
	Sprite\setBatchNode(${1:spritebatchnode})


snippet Sprite\setDisplayFrameWithAnimationName(str\,long) "csxV3: Sprite::setDisplayFrameWithAnimationName "
	Sprite\setDisplayFrameWithAnimationName(${1:str}, ${2:long})


snippet Sprite\setTextureAtlas(textureatlas) "csxV3: Sprite::setTextureAtlas "
	Sprite\setTextureAtlas(${1:textureatlas})


snippet Sprite\getSpriteFrame! "csxV3: Sprite::getSpriteFrame "
	Sprite\getSpriteFrame!


snippet Sprite\isDirty! "csxV3: Sprite::isDirty "
	Sprite\isDirty!


snippet Sprite\setAtlasIndex(long) "csxV3: Sprite::setAtlasIndex "
	Sprite\setAtlasIndex(${1:long})


snippet Sprite\setDirty(bool) "csxV3: Sprite::setDirty "
	Sprite\setDirty(${1:bool})


snippet Sprite\isTextureRectRotated! "csxV3: Sprite::isTextureRectRotated "
	Sprite\isTextureRectRotated!


snippet Sprite\getTextureRect! "csxV3: Sprite::getTextureRect "
	Sprite\getTextureRect!


snippet Sprite\getTextureAtlas! "csxV3: Sprite::getTextureAtlas "
	Sprite\getTextureAtlas!


snippet Sprite\isFlippedX! "csxV3: Sprite::isFlippedX "
	Sprite\isFlippedX!


snippet Sprite\isFlippedY! "csxV3: Sprite::isFlippedY "
	Sprite\isFlippedY!


snippet Sprite\setVertexRect(rect) "csxV3: Sprite::setVertexRect "
	Sprite\setVertexRect(${1:rect})


snippet Sprite\create(str\,rect) "csxV3: Sprite::create "
	Sprite\create(${1:str}, ${2:rect})


snippet Sprite\createWithTexture(texture2d\,rect\,bool) "csxV3: Sprite::createWithTexture "
	Sprite\createWithTexture(${1:texture2d}, ${2:rect}, ${3:bool})


snippet Sprite\createWithSpriteFrameName(str) "csxV3: Sprite::createWithSpriteFrameName "
	Sprite\createWithSpriteFrameName(${1:str})


snippet Sprite\createWithSpriteFrame(spriteframe) "csxV3: Sprite::createWithSpriteFrame "
	Sprite\createWithSpriteFrame(${1:spriteframe})


snippet Sprite\draw(renderer\,mat4\,bool) "csxV3: Sprite::draw "
	Sprite\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet Sprite\addChild(node\,int\,int) "csxV3: Sprite::addChild "
	Sprite\addChild(${1:node}, ${2:int}, ${3:int})


snippet Sprite\setScaleY(float) "csxV3: Sprite::setScaleY "
	Sprite\setScaleY(${1:float})


snippet Sprite\setScaleX(float) "csxV3: Sprite::setScaleX "
	Sprite\setScaleX(${1:float})


snippet Sprite\isOpacityModifyRGB! "csxV3: Sprite::isOpacityModifyRGB "
	Sprite\isOpacityModifyRGB!


snippet Sprite\setPositionZ(float) "csxV3: Sprite::setPositionZ "
	Sprite\setPositionZ(${1:float})


snippet Sprite\setAnchorPoint(vec2) "csxV3: Sprite::setAnchorPoint "
	Sprite\setAnchorPoint(${1:vec2})


snippet Sprite\setRotationSkewX(float) "csxV3: Sprite::setRotationSkewX "
	Sprite\setRotationSkewX(${1:float})


snippet Sprite\getDescription! "csxV3: Sprite::getDescription "
	Sprite\getDescription!


snippet Sprite\setRotationSkewY(float) "csxV3: Sprite::setRotationSkewY "
	Sprite\setRotationSkewY(${1:float})


snippet Sprite\setScale(float\,float) "csxV3: Sprite::setScale "
	Sprite\setScale(${1:float}, ${2:float})


snippet Sprite\reorderChild(node\,int) "csxV3: Sprite::reorderChild "
	Sprite\reorderChild(${1:node}, ${2:int})


snippet Sprite\removeChild(node\,bool) "csxV3: Sprite::removeChild "
	Sprite\removeChild(${1:node}, ${2:bool})


snippet Sprite\sortAllChildren! "csxV3: Sprite::sortAllChildren "
	Sprite\sortAllChildren!


snippet Sprite\setOpacityModifyRGB(bool) "csxV3: Sprite::setOpacityModifyRGB "
	Sprite\setOpacityModifyRGB(${1:bool})


snippet Sprite\setRotation(float) "csxV3: Sprite::setRotation "
	Sprite\setRotation(${1:float})


snippet Sprite\setSkewY(float) "csxV3: Sprite::setSkewY "
	Sprite\setSkewY(${1:float})


snippet Sprite\setVisible(bool) "csxV3: Sprite::setVisible "
	Sprite\setVisible(${1:bool})


snippet Sprite\setSkewX(float) "csxV3: Sprite::setSkewX "
	Sprite\setSkewX(${1:float})


snippet Sprite3D\setTexture(str) "csxV3: Sprite3D::setTexture "
	Sprite3D\setTexture(${1:str})


snippet Sprite3D\getBlendFunc! "csxV3: Sprite3D::getBlendFunc "
	Sprite3D\getBlendFunc!


snippet Sprite3D\setBlendFunc(blendfunc) "csxV3: Sprite3D::setBlendFunc "
	Sprite3D\setBlendFunc(${1:blendfunc})


snippet SpriteBatchNode\appendChild(sprite) "csxV3: SpriteBatchNode::appendChild "
	SpriteBatchNode\appendChild(${1:sprite})


snippet SpriteBatchNode\addSpriteWithoutQuad(sprite\,int\,int) "csxV3: SpriteBatchNode::addSpriteWithoutQuad "
	SpriteBatchNode\addSpriteWithoutQuad(${1:sprite}, ${2:int}, ${3:int})


snippet SpriteBatchNode\reorderBatch(bool) "csxV3: SpriteBatchNode::reorderBatch "
	SpriteBatchNode\reorderBatch(${1:bool})


snippet SpriteBatchNode\removeAllChildrenWithCleanup(bool) "csxV3: SpriteBatchNode::removeAllChildrenWithCleanup "
	SpriteBatchNode\removeAllChildrenWithCleanup(${1:bool})


snippet SpriteBatchNode\lowestAtlasIndexInChild(sprite) "csxV3: SpriteBatchNode::lowestAtlasIndexInChild "
	SpriteBatchNode\lowestAtlasIndexInChild(${1:sprite})


snippet SpriteBatchNode\atlasIndexForChild(sprite\,int) "csxV3: SpriteBatchNode::atlasIndexForChild "
	SpriteBatchNode\atlasIndexForChild(${1:sprite}, ${2:int})


snippet SpriteBatchNode\setTextureAtlas(textureatlas) "csxV3: SpriteBatchNode::setTextureAtlas "
	SpriteBatchNode\setTextureAtlas(${1:textureatlas})


snippet SpriteBatchNode\getTexture! "csxV3: SpriteBatchNode::getTexture "
	SpriteBatchNode\getTexture!


snippet SpriteBatchNode\increaseAtlasCapacity! "csxV3: SpriteBatchNode::increaseAtlasCapacity "
	SpriteBatchNode\increaseAtlasCapacity!


snippet SpriteBatchNode\getTextureAtlas! "csxV3: SpriteBatchNode::getTextureAtlas "
	SpriteBatchNode\getTextureAtlas!


snippet SpriteBatchNode\insertQuadFromSprite(sprite\,long) "csxV3: SpriteBatchNode::insertQuadFromSprite "
	SpriteBatchNode\insertQuadFromSprite(${1:sprite}, ${2:long})


snippet SpriteBatchNode\setTexture(texture2d) "csxV3: SpriteBatchNode::setTexture "
	SpriteBatchNode\setTexture(${1:texture2d})


snippet SpriteBatchNode\rebuildIndexInOrder(sprite\,long) "csxV3: SpriteBatchNode::rebuildIndexInOrder "
	SpriteBatchNode\rebuildIndexInOrder(${1:sprite}, ${2:long})


snippet SpriteBatchNode\highestAtlasIndexInChild(sprite) "csxV3: SpriteBatchNode::highestAtlasIndexInChild "
	SpriteBatchNode\highestAtlasIndexInChild(${1:sprite})


snippet SpriteBatchNode\removeChildAtIndex(long\,bool) "csxV3: SpriteBatchNode::removeChildAtIndex "
	SpriteBatchNode\removeChildAtIndex(${1:long}, ${2:bool})


snippet SpriteBatchNode\removeSpriteFromAtlas(sprite) "csxV3: SpriteBatchNode::removeSpriteFromAtlas "
	SpriteBatchNode\removeSpriteFromAtlas(${1:sprite})


snippet SpriteBatchNode\create(str\,long) "csxV3: SpriteBatchNode::create "
	SpriteBatchNode\create(${1:str}, ${2:long})


snippet SpriteBatchNode\createWithTexture(texture2d\,long) "csxV3: SpriteBatchNode::createWithTexture "
	SpriteBatchNode\createWithTexture(${1:texture2d}, ${2:long})


snippet SpriteBatchNode\addChild(node\,int\,int) "csxV3: SpriteBatchNode::addChild "
	SpriteBatchNode\addChild(${1:node}, ${2:int}, ${3:int})


snippet SpriteBatchNode\draw(renderer\,mat4\,bool) "csxV3: SpriteBatchNode::draw "
	SpriteBatchNode\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet SpriteBatchNode\getDescription! "csxV3: SpriteBatchNode::getDescription "
	SpriteBatchNode\getDescription!


snippet SpriteBatchNode\sortAllChildren! "csxV3: SpriteBatchNode::sortAllChildren "
	SpriteBatchNode\sortAllChildren!


snippet SpriteBatchNode\removeChild(node\,bool) "csxV3: SpriteBatchNode::removeChild "
	SpriteBatchNode\removeChild(${1:node}, ${2:bool})


snippet SpriteDisplayData\copy(displaydata) "csxV3: SpriteDisplayData::copy "
	SpriteDisplayData\copy(${1:displaydata})


snippet SpriteDisplayData\create! "csxV3: SpriteDisplayData::create "
	SpriteDisplayData\create!


snippet SpriteFrame\clone! "csxV3: SpriteFrame::clone "
	SpriteFrame\clone!


snippet SpriteFrame\setRotated(bool) "csxV3: SpriteFrame::setRotated "
	SpriteFrame\setRotated(${1:bool})


snippet SpriteFrame\setTexture(texture2d) "csxV3: SpriteFrame::setTexture "
	SpriteFrame\setTexture(${1:texture2d})


snippet SpriteFrame\initWithTexture(texture2d\,rect\,bool\,vec2\,size) "csxV3: SpriteFrame::initWithTexture "
	SpriteFrame\initWithTexture(${1:texture2d}, ${2:rect}, ${3:bool}, ${4:vec2}, ${5:size})


snippet SpriteFrame\setRectInPixels(rect) "csxV3: SpriteFrame::setRectInPixels "
	SpriteFrame\setRectInPixels(${1:rect})


snippet SpriteFrame\getTexture! "csxV3: SpriteFrame::getTexture "
	SpriteFrame\getTexture!


snippet SpriteFrame\getRect! "csxV3: SpriteFrame::getRect "
	SpriteFrame\getRect!


snippet SpriteFrame\setOffsetInPixels(vec2) "csxV3: SpriteFrame::setOffsetInPixels "
	SpriteFrame\setOffsetInPixels(${1:vec2})


snippet SpriteFrame\getRectInPixels! "csxV3: SpriteFrame::getRectInPixels "
	SpriteFrame\getRectInPixels!


snippet SpriteFrame\setOriginalSize(size) "csxV3: SpriteFrame::setOriginalSize "
	SpriteFrame\setOriginalSize(${1:size})


snippet SpriteFrame\getOriginalSizeInPixels! "csxV3: SpriteFrame::getOriginalSizeInPixels "
	SpriteFrame\getOriginalSizeInPixels!


snippet SpriteFrame\setOriginalSizeInPixels(size) "csxV3: SpriteFrame::setOriginalSizeInPixels "
	SpriteFrame\setOriginalSizeInPixels(${1:size})


snippet SpriteFrame\setOffset(vec2) "csxV3: SpriteFrame::setOffset "
	SpriteFrame\setOffset(${1:vec2})


snippet SpriteFrame\getOffset! "csxV3: SpriteFrame::getOffset "
	SpriteFrame\getOffset!


snippet SpriteFrame\isRotated! "csxV3: SpriteFrame::isRotated "
	SpriteFrame\isRotated!


snippet SpriteFrame\initWithTextureFilename(str\,rect\,bool\,vec2\,size) "csxV3: SpriteFrame::initWithTextureFilename "
	SpriteFrame\initWithTextureFilename(${1:str}, ${2:rect}, ${3:bool}, ${4:vec2}, ${5:size})


snippet SpriteFrame\setRect(rect) "csxV3: SpriteFrame::setRect "
	SpriteFrame\setRect(${1:rect})


snippet SpriteFrame\getOffsetInPixels! "csxV3: SpriteFrame::getOffsetInPixels "
	SpriteFrame\getOffsetInPixels!


snippet SpriteFrame\getOriginalSize! "csxV3: SpriteFrame::getOriginalSize "
	SpriteFrame\getOriginalSize!


snippet SpriteFrame\create(str\,rect\,bool\,vec2\,size) "csxV3: SpriteFrame::create "
	SpriteFrame\create(${1:str}, ${2:rect}, ${3:bool}, ${4:vec2}, ${5:size})


snippet SpriteFrameCache\addSpriteFramesWithFile(str\,texture2d) "csxV3: SpriteFrameCache::addSpriteFramesWithFile "
	SpriteFrameCache\addSpriteFramesWithFile(${1:str}, ${2:texture2d})


snippet SpriteFrameCache\addSpriteFrame(spriteframe\,str) "csxV3: SpriteFrameCache::addSpriteFrame "
	SpriteFrameCache\addSpriteFrame(${1:spriteframe}, ${2:str})


snippet SpriteFrameCache\removeUnusedSpriteFrames! "csxV3: SpriteFrameCache::removeUnusedSpriteFrames "
	SpriteFrameCache\removeUnusedSpriteFrames!


snippet SpriteFrameCache\getSpriteFrameByName(str) "csxV3: SpriteFrameCache::getSpriteFrameByName "
	SpriteFrameCache\getSpriteFrameByName(${1:str})


snippet SpriteFrameCache\removeSpriteFramesFromFile(str) "csxV3: SpriteFrameCache::removeSpriteFramesFromFile "
	SpriteFrameCache\removeSpriteFramesFromFile(${1:str})


snippet SpriteFrameCache\init! "csxV3: SpriteFrameCache::init "
	SpriteFrameCache\init!


snippet SpriteFrameCache\removeSpriteFrames! "csxV3: SpriteFrameCache::removeSpriteFrames "
	SpriteFrameCache\removeSpriteFrames!


snippet SpriteFrameCache\removeSpriteFramesFromTexture(texture2d) "csxV3: SpriteFrameCache::removeSpriteFramesFromTexture "
	SpriteFrameCache\removeSpriteFramesFromTexture(${1:texture2d})


snippet SpriteFrameCache\removeSpriteFrameByName(str) "csxV3: SpriteFrameCache::removeSpriteFrameByName "
	SpriteFrameCache\removeSpriteFrameByName(${1:str})


snippet SpriteFrameCache\destroyInstance! "csxV3: SpriteFrameCache::destroyInstance "
	SpriteFrameCache\destroyInstance!


snippet StopGrid\create! "csxV3: StopGrid::create "
	StopGrid\create!


snippet StopGrid\startWithTarget(node) "csxV3: StopGrid::startWithTarget "
	StopGrid\startWithTarget(${1:node})


snippet StopGrid\clone! "csxV3: StopGrid::clone "
	StopGrid\clone!


snippet TMXLayer\getTileGIDAt(vec2\,tmxtileflags_) "csxV3: TMXLayer::getTileGIDAt "
	TMXLayer\getTileGIDAt(${1:vec2}, ${2:tmxtileflags_})


snippet TMXLayer\getPositionAt(vec2) "csxV3: TMXLayer::getPositionAt "
	TMXLayer\getPositionAt(${1:vec2})


snippet TMXLayer\setLayerOrientation(int) "csxV3: TMXLayer::setLayerOrientation "
	TMXLayer\setLayerOrientation(${1:int})


snippet TMXLayer\releaseMap! "csxV3: TMXLayer::releaseMap "
	TMXLayer\releaseMap!


snippet TMXLayer\setTiles(int) "csxV3: TMXLayer::setTiles "
	TMXLayer\setTiles(${1:int})


snippet TMXLayer\getLayerSize! "csxV3: TMXLayer::getLayerSize "
	TMXLayer\getLayerSize!


snippet TMXLayer\setMapTileSize(size) "csxV3: TMXLayer::setMapTileSize "
	TMXLayer\setMapTileSize(${1:size})


snippet TMXLayer\getLayerOrientation! "csxV3: TMXLayer::getLayerOrientation "
	TMXLayer\getLayerOrientation!


snippet TMXLayer\setProperties(map) "csxV3: TMXLayer::setProperties "
	TMXLayer\setProperties(${1:map})


snippet TMXLayer\setLayerName(str) "csxV3: TMXLayer::setLayerName "
	TMXLayer\setLayerName(${1:str})


snippet TMXLayer\removeTileAt(vec2) "csxV3: TMXLayer::removeTileAt "
	TMXLayer\removeTileAt(${1:vec2})


snippet TMXLayer\initWithTilesetInfo(tmxtilesetinfo\,tmxlayerinfo\,map) "csxV3: TMXLayer::initWithTilesetInfo "
	TMXLayer\initWithTilesetInfo(${1:tmxtilesetinfo}, ${2:tmxlayerinfo}, ${3:map})


snippet TMXLayer\setupTiles! "csxV3: TMXLayer::setupTiles "
	TMXLayer\setupTiles!


snippet TMXLayer\setTileGID(int\,vec2\,tmxtileflags_) "csxV3: TMXLayer::setTileGID "
	TMXLayer\setTileGID(${1:int}, ${2:vec2}, ${3:tmxtileflags_})


snippet TMXLayer\getMapTileSize! "csxV3: TMXLayer::getMapTileSize "
	TMXLayer\getMapTileSize!


snippet TMXLayer\getProperty(str) "csxV3: TMXLayer::getProperty "
	TMXLayer\getProperty(${1:str})


snippet TMXLayer\setLayerSize(size) "csxV3: TMXLayer::setLayerSize "
	TMXLayer\setLayerSize(${1:size})


snippet TMXLayer\getLayerName! "csxV3: TMXLayer::getLayerName "
	TMXLayer\getLayerName!


snippet TMXLayer\setTileSet(tmxtilesetinfo) "csxV3: TMXLayer::setTileSet "
	TMXLayer\setTileSet(${1:tmxtilesetinfo})


snippet TMXLayer\getTileSet! "csxV3: TMXLayer::getTileSet "
	TMXLayer\getTileSet!


snippet TMXLayer\getProperties! "csxV3: TMXLayer::getProperties "
	TMXLayer\getProperties!


snippet TMXLayer\getTileAt(vec2) "csxV3: TMXLayer::getTileAt "
	TMXLayer\getTileAt(${1:vec2})


snippet TMXLayer\create(tmxtilesetinfo\,tmxlayerinfo\,map) "csxV3: TMXLayer::create "
	TMXLayer\create(${1:tmxtilesetinfo}, ${2:tmxlayerinfo}, ${3:map})


snippet TMXLayer\addChild(node\,int\,int) "csxV3: TMXLayer::addChild "
	TMXLayer\addChild(${1:node}, ${2:int}, ${3:int})


snippet TMXLayer\getDescription! "csxV3: TMXLayer::getDescription "
	TMXLayer\getDescription!


snippet TMXLayer\removeChild(node\,bool) "csxV3: TMXLayer::removeChild "
	TMXLayer\removeChild(${1:node}, ${2:bool})


snippet TMXLayerInfo\setProperties(map) "csxV3: TMXLayerInfo::setProperties "
	TMXLayerInfo\setProperties(${1:map})


snippet TMXLayerInfo\getProperties! "csxV3: TMXLayerInfo::getProperties "
	TMXLayerInfo\getProperties!


snippet TMXMapInfo\setObjectGroups(array) "csxV3: TMXMapInfo::setObjectGroups "
	TMXMapInfo\setObjectGroups(${1:array})


snippet TMXMapInfo\setTileSize(size) "csxV3: TMXMapInfo::setTileSize "
	TMXMapInfo\setTileSize(${1:size})


snippet TMXMapInfo\initWithTMXFile(str) "csxV3: TMXMapInfo::initWithTMXFile "
	TMXMapInfo\initWithTMXFile(${1:str})


snippet TMXMapInfo\getOrientation! "csxV3: TMXMapInfo::getOrientation "
	TMXMapInfo\getOrientation!


snippet TMXMapInfo\isStoringCharacters! "csxV3: TMXMapInfo::isStoringCharacters "
	TMXMapInfo\isStoringCharacters!


snippet TMXMapInfo\setLayers(array) "csxV3: TMXMapInfo::setLayers "
	TMXMapInfo\setLayers(${1:array})


snippet TMXMapInfo\parseXMLFile(str) "csxV3: TMXMapInfo::parseXMLFile "
	TMXMapInfo\parseXMLFile(${1:str})


snippet TMXMapInfo\getParentElement! "csxV3: TMXMapInfo::getParentElement "
	TMXMapInfo\getParentElement!


snippet TMXMapInfo\setTMXFileName(str) "csxV3: TMXMapInfo::setTMXFileName "
	TMXMapInfo\setTMXFileName(${1:str})


snippet TMXMapInfo\parseXMLString(str) "csxV3: TMXMapInfo::parseXMLString "
	TMXMapInfo\parseXMLString(${1:str})


snippet TMXMapInfo\getLayers! "csxV3: TMXMapInfo::getLayers "
	TMXMapInfo\getLayers!


snippet TMXMapInfo\getTilesets! "csxV3: TMXMapInfo::getTilesets "
	TMXMapInfo\getTilesets!


snippet TMXMapInfo\getParentGID! "csxV3: TMXMapInfo::getParentGID "
	TMXMapInfo\getParentGID!


snippet TMXMapInfo\setParentElement(int) "csxV3: TMXMapInfo::setParentElement "
	TMXMapInfo\setParentElement(${1:int})


snippet TMXMapInfo\initWithXML(str\,str) "csxV3: TMXMapInfo::initWithXML "
	TMXMapInfo\initWithXML(${1:str}, ${2:str})


snippet TMXMapInfo\setParentGID(int) "csxV3: TMXMapInfo::setParentGID "
	TMXMapInfo\setParentGID(${1:int})


snippet TMXMapInfo\getLayerAttribs! "csxV3: TMXMapInfo::getLayerAttribs "
	TMXMapInfo\getLayerAttribs!


snippet TMXMapInfo\getTileSize! "csxV3: TMXMapInfo::getTileSize "
	TMXMapInfo\getTileSize!


snippet TMXMapInfo\getTileProperties! "csxV3: TMXMapInfo::getTileProperties "
	TMXMapInfo\getTileProperties!


snippet TMXMapInfo\getObjectGroups! "csxV3: TMXMapInfo::getObjectGroups "
	TMXMapInfo\getObjectGroups!


snippet TMXMapInfo\getTMXFileName! "csxV3: TMXMapInfo::getTMXFileName "
	TMXMapInfo\getTMXFileName!


snippet TMXMapInfo\setCurrentString(str) "csxV3: TMXMapInfo::setCurrentString "
	TMXMapInfo\setCurrentString(${1:str})


snippet TMXMapInfo\setProperties(map) "csxV3: TMXMapInfo::setProperties "
	TMXMapInfo\setProperties(${1:map})


snippet TMXMapInfo\setOrientation(int) "csxV3: TMXMapInfo::setOrientation "
	TMXMapInfo\setOrientation(${1:int})


snippet TMXMapInfo\setTileProperties(map) "csxV3: TMXMapInfo::setTileProperties "
	TMXMapInfo\setTileProperties(${1:map})


snippet TMXMapInfo\setMapSize(size) "csxV3: TMXMapInfo::setMapSize "
	TMXMapInfo\setMapSize(${1:size})


snippet TMXMapInfo\setStoringCharacters(bool) "csxV3: TMXMapInfo::setStoringCharacters "
	TMXMapInfo\setStoringCharacters(${1:bool})


snippet TMXMapInfo\getMapSize! "csxV3: TMXMapInfo::getMapSize "
	TMXMapInfo\getMapSize!


snippet TMXMapInfo\setTilesets(array) "csxV3: TMXMapInfo::setTilesets "
	TMXMapInfo\setTilesets(${1:array})


snippet TMXMapInfo\getProperties! "csxV3: TMXMapInfo::getProperties "
	TMXMapInfo\getProperties!


snippet TMXMapInfo\getCurrentString! "csxV3: TMXMapInfo::getCurrentString "
	TMXMapInfo\getCurrentString!


snippet TMXMapInfo\setLayerAttribs(int) "csxV3: TMXMapInfo::setLayerAttribs "
	TMXMapInfo\setLayerAttribs(${1:int})


snippet TMXMapInfo\create(str) "csxV3: TMXMapInfo::create "
	TMXMapInfo\create(${1:str})


snippet TMXMapInfo\createWithXML(str\,str) "csxV3: TMXMapInfo::createWithXML "
	TMXMapInfo\createWithXML(${1:str}, ${2:str})


snippet TMXObjectGroup\setPositionOffset(vec2) "csxV3: TMXObjectGroup::setPositionOffset "
	TMXObjectGroup\setPositionOffset(${1:vec2})


snippet TMXObjectGroup\getProperty(str) "csxV3: TMXObjectGroup::getProperty "
	TMXObjectGroup\getProperty(${1:str})


snippet TMXObjectGroup\getPositionOffset! "csxV3: TMXObjectGroup::getPositionOffset "
	TMXObjectGroup\getPositionOffset!


snippet TMXObjectGroup\getObject(str) "csxV3: TMXObjectGroup::getObject "
	TMXObjectGroup\getObject(${1:str})


snippet TMXObjectGroup\getObjects! "csxV3: TMXObjectGroup::getObjects "
	TMXObjectGroup\getObjects!


snippet TMXObjectGroup\setGroupName(str) "csxV3: TMXObjectGroup::setGroupName "
	TMXObjectGroup\setGroupName(${1:str})


snippet TMXObjectGroup\getProperties! "csxV3: TMXObjectGroup::getProperties "
	TMXObjectGroup\getProperties!


snippet TMXObjectGroup\getGroupName! "csxV3: TMXObjectGroup::getGroupName "
	TMXObjectGroup\getGroupName!


snippet TMXObjectGroup\setProperties(map) "csxV3: TMXObjectGroup::setProperties "
	TMXObjectGroup\setProperties(${1:map})


snippet TMXObjectGroup\setObjects(array) "csxV3: TMXObjectGroup::setObjects "
	TMXObjectGroup\setObjects(${1:array})


snippet TMXTiledMap\setObjectGroups(array) "csxV3: TMXTiledMap::setObjectGroups "
	TMXTiledMap\setObjectGroups(${1:array})


snippet TMXTiledMap\getProperty(str) "csxV3: TMXTiledMap::getProperty "
	TMXTiledMap\getProperty(${1:str})


snippet TMXTiledMap\setMapSize(size) "csxV3: TMXTiledMap::setMapSize "
	TMXTiledMap\setMapSize(${1:size})


snippet TMXTiledMap\getObjectGroup(str) "csxV3: TMXTiledMap::getObjectGroup "
	TMXTiledMap\getObjectGroup(${1:str})


snippet TMXTiledMap\getObjectGroups! "csxV3: TMXTiledMap::getObjectGroups "
	TMXTiledMap\getObjectGroups!


snippet TMXTiledMap\getTileSize! "csxV3: TMXTiledMap::getTileSize "
	TMXTiledMap\getTileSize!


snippet TMXTiledMap\getMapSize! "csxV3: TMXTiledMap::getMapSize "
	TMXTiledMap\getMapSize!


snippet TMXTiledMap\getProperties! "csxV3: TMXTiledMap::getProperties "
	TMXTiledMap\getProperties!


snippet TMXTiledMap\setTileSize(size) "csxV3: TMXTiledMap::setTileSize "
	TMXTiledMap\setTileSize(${1:size})


snippet TMXTiledMap\setProperties(map) "csxV3: TMXTiledMap::setProperties "
	TMXTiledMap\setProperties(${1:map})


snippet TMXTiledMap\getLayer(str) "csxV3: TMXTiledMap::getLayer "
	TMXTiledMap\getLayer(${1:str})


snippet TMXTiledMap\getMapOrientation! "csxV3: TMXTiledMap::getMapOrientation "
	TMXTiledMap\getMapOrientation!


snippet TMXTiledMap\setMapOrientation(int) "csxV3: TMXTiledMap::setMapOrientation "
	TMXTiledMap\setMapOrientation(${1:int})


snippet TMXTiledMap\create(str) "csxV3: TMXTiledMap::create "
	TMXTiledMap\create(${1:str})


snippet TMXTiledMap\createWithXML(str\,str) "csxV3: TMXTiledMap::createWithXML "
	TMXTiledMap\createWithXML(${1:str}, ${2:str})


snippet TMXTilesetInfo\getRectForGID(int) "csxV3: TMXTilesetInfo::getRectForGID "
	TMXTilesetInfo\getRectForGID(${1:int})


snippet TableView\updateCellAtIndex(long) "csxV3: TableView::updateCellAtIndex "
	TableView\updateCellAtIndex(${1:long})


snippet TableView\setVerticalFillOrder(verticalfillorder) "csxV3: TableView::setVerticalFillOrder "
	TableView\setVerticalFillOrder(${1:verticalfillorder})


snippet TableView\scrollViewDidZoom(scrollview) "csxV3: TableView::scrollViewDidZoom "
	TableView\scrollViewDidZoom(${1:scrollview})


snippet TableView\_updateContentSize! "csxV3: TableView::_updateContentSize "
	TableView\_updateContentSize!


snippet TableView\getVerticalFillOrder! "csxV3: TableView::getVerticalFillOrder "
	TableView\getVerticalFillOrder!


snippet TableView\removeCellAtIndex(long) "csxV3: TableView::removeCellAtIndex "
	TableView\removeCellAtIndex(${1:long})


snippet TableView\initWithViewSize(size\,node) "csxV3: TableView::initWithViewSize "
	TableView\initWithViewSize(${1:size}, ${2:node})


snippet TableView\scrollViewDidScroll(scrollview) "csxV3: TableView::scrollViewDidScroll "
	TableView\scrollViewDidScroll(${1:scrollview})


snippet TableView\reloadData! "csxV3: TableView::reloadData "
	TableView\reloadData!


snippet TableView\insertCellAtIndex(long) "csxV3: TableView::insertCellAtIndex "
	TableView\insertCellAtIndex(${1:long})


snippet TableView\cellAtIndex(long) "csxV3: TableView::cellAtIndex "
	TableView\cellAtIndex(${1:long})


snippet TableView\dequeueCell! "csxV3: TableView::dequeueCell "
	TableView\dequeueCell!


snippet TableView\onTouchMoved(touch\,event) "csxV3: TableView::onTouchMoved "
	TableView\onTouchMoved(${1:touch}, ${2:event})


snippet TableView\onTouchEnded(touch\,event) "csxV3: TableView::onTouchEnded "
	TableView\onTouchEnded(${1:touch}, ${2:event})


snippet TableView\onTouchCancelled(touch\,event) "csxV3: TableView::onTouchCancelled "
	TableView\onTouchCancelled(${1:touch}, ${2:event})


snippet TableView\onTouchBegan(touch\,event) "csxV3: TableView::onTouchBegan "
	TableView\onTouchBegan(${1:touch}, ${2:event})


snippet TableViewCell\reset! "csxV3: TableViewCell::reset "
	TableViewCell\reset!


snippet TableViewCell\getIdx! "csxV3: TableViewCell::getIdx "
	TableViewCell\getIdx!


snippet TableViewCell\setIdx(long) "csxV3: TableViewCell::setIdx "
	TableViewCell\setIdx(${1:long})


snippet TableViewCell\create! "csxV3: TableViewCell::create "
	TableViewCell\create!


snippet TargetedAction\getForcedTarget! "csxV3: TargetedAction::getForcedTarget "
	TargetedAction\getForcedTarget!


snippet TargetedAction\setForcedTarget(node) "csxV3: TargetedAction::setForcedTarget "
	TargetedAction\setForcedTarget(${1:node})


snippet TargetedAction\create(node\,finitetimeaction) "csxV3: TargetedAction::create "
	TargetedAction\create(${1:node}, ${2:finitetimeaction})


snippet TargetedAction\startWithTarget(node) "csxV3: TargetedAction::startWithTarget "
	TargetedAction\startWithTarget(${1:node})


snippet TargetedAction\clone! "csxV3: TargetedAction::clone "
	TargetedAction\clone!


snippet TargetedAction\stop! "csxV3: TargetedAction::stop "
	TargetedAction\stop!


snippet TargetedAction\reverse! "csxV3: TargetedAction::reverse "
	TargetedAction\reverse!


snippet Text\getStringLength! "csxV3: Text::getStringLength "
	Text\getStringLength!


snippet Text\setFontName(str) "csxV3: Text::setFontName "
	Text\setFontName(${1:str})


snippet Text\setTouchScaleChangeEnabled(bool) "csxV3: Text::setTouchScaleChangeEnabled "
	Text\setTouchScaleChangeEnabled(${1:bool})


snippet Text\getFontSize! "csxV3: Text::getFontSize "
	Text\getFontSize!


snippet Text\getTextVerticalAlignment! "csxV3: Text::getTextVerticalAlignment "
	Text\getTextVerticalAlignment!


snippet Text\getString! "csxV3: Text::getString "
	Text\getString!


snippet Text\setString(str) "csxV3: Text::setString "
	Text\setString(${1:str})


snippet Text\getTextHorizontalAlignment! "csxV3: Text::getTextHorizontalAlignment "
	Text\getTextHorizontalAlignment!


snippet Text\setTextVerticalAlignment(textvalignment) "csxV3: Text::setTextVerticalAlignment "
	Text\setTextVerticalAlignment(${1:textvalignment})


snippet Text\getTextAreaSize! "csxV3: Text::getTextAreaSize "
	Text\getTextAreaSize!


snippet Text\setTextHorizontalAlignment(texthalignment) "csxV3: Text::setTextHorizontalAlignment "
	Text\setTextHorizontalAlignment(${1:texthalignment})


snippet Text\setFontSize(int) "csxV3: Text::setFontSize "
	Text\setFontSize(${1:int})


snippet Text\isTouchScaleChangeEnabled! "csxV3: Text::isTouchScaleChangeEnabled "
	Text\isTouchScaleChangeEnabled!


snippet Text\getType! "csxV3: Text::getType "
	Text\getType!


snippet Text\getFontName! "csxV3: Text::getFontName "
	Text\getFontName!


snippet Text\setTextAreaSize(size) "csxV3: Text::setTextAreaSize "
	Text\setTextAreaSize(${1:size})


snippet Text\create(str\,str\,int) "csxV3: Text::create "
	Text\create(${1:str}, ${2:str}, ${3:int})


snippet Text\createInstance! "csxV3: Text::createInstance "
	Text\createInstance!


snippet Text\getVirtualRenderer! "csxV3: Text::getVirtualRenderer "
	Text\getVirtualRenderer!


snippet Text\getDescription! "csxV3: Text::getDescription "
	Text\getDescription!


snippet Text\getVirtualRendererSize! "csxV3: Text::getVirtualRendererSize "
	Text\getVirtualRendererSize!


snippet TextAtlas\getStringLength! "csxV3: TextAtlas::getStringLength "
	TextAtlas\getStringLength!


snippet TextAtlas\getString! "csxV3: TextAtlas::getString "
	TextAtlas\getString!


snippet TextAtlas\setString(str) "csxV3: TextAtlas::setString "
	TextAtlas\setString(${1:str})


snippet TextAtlas\setProperty(str\,str\,int\,int\,str) "csxV3: TextAtlas::setProperty "
	TextAtlas\setProperty(${1:str}, ${2:str}, ${3:int}, ${4:int}, ${5:str})


snippet TextAtlas\adaptRenderers! "csxV3: TextAtlas::adaptRenderers "
	TextAtlas\adaptRenderers!


snippet TextAtlas\create(str\,str\,int\,int\,str) "csxV3: TextAtlas::create "
	TextAtlas\create(${1:str}, ${2:str}, ${3:int}, ${4:int}, ${5:str})


snippet TextAtlas\createInstance! "csxV3: TextAtlas::createInstance "
	TextAtlas\createInstance!


snippet TextAtlas\getVirtualRenderer! "csxV3: TextAtlas::getVirtualRenderer "
	TextAtlas\getVirtualRenderer!


snippet TextAtlas\getDescription! "csxV3: TextAtlas::getDescription "
	TextAtlas\getDescription!


snippet TextAtlas\getVirtualRendererSize! "csxV3: TextAtlas::getVirtualRendererSize "
	TextAtlas\getVirtualRendererSize!


snippet TextBMFont\setFntFile(str) "csxV3: TextBMFont::setFntFile "
	TextBMFont\setFntFile(${1:str})


snippet TextBMFont\getStringLength! "csxV3: TextBMFont::getStringLength "
	TextBMFont\getStringLength!


snippet TextBMFont\setString(str) "csxV3: TextBMFont::setString "
	TextBMFont\setString(${1:str})


snippet TextBMFont\getString! "csxV3: TextBMFont::getString "
	TextBMFont\getString!


snippet TextBMFont\create(str\,str) "csxV3: TextBMFont::create "
	TextBMFont\create(${1:str}, ${2:str})


snippet TextBMFont\createInstance! "csxV3: TextBMFont::createInstance "
	TextBMFont\createInstance!


snippet TextBMFont\getVirtualRenderer! "csxV3: TextBMFont::getVirtualRenderer "
	TextBMFont\getVirtualRenderer!


snippet TextBMFont\getDescription! "csxV3: TextBMFont::getDescription "
	TextBMFont\getDescription!


snippet TextBMFont\getVirtualRendererSize! "csxV3: TextBMFont::getVirtualRendererSize "
	TextBMFont\getVirtualRendererSize!


snippet TextField\setAttachWithIME(bool) "csxV3: TextField::setAttachWithIME "
	TextField\setAttachWithIME(${1:bool})


snippet TextField\getFontSize! "csxV3: TextField::getFontSize "
	TextField\getFontSize!


snippet TextField\getStringValue! "csxV3: TextField::getStringValue "
	TextField\getStringValue!


snippet TextField\getDeleteBackward! "csxV3: TextField::getDeleteBackward "
	TextField\getDeleteBackward!


snippet TextField\getPlaceHolder! "csxV3: TextField::getPlaceHolder "
	TextField\getPlaceHolder!


snippet TextField\getAttachWithIME! "csxV3: TextField::getAttachWithIME "
	TextField\getAttachWithIME!


snippet TextField\setFontName(str) "csxV3: TextField::setFontName "
	TextField\setFontName(${1:str})


snippet TextField\getInsertText! "csxV3: TextField::getInsertText "
	TextField\getInsertText!


snippet TextField\setInsertText(bool) "csxV3: TextField::setInsertText "
	TextField\setInsertText(${1:bool})


snippet TextField\getDetachWithIME! "csxV3: TextField::getDetachWithIME "
	TextField\getDetachWithIME!


snippet TextField\setTextVerticalAlignment(textvalignment) "csxV3: TextField::setTextVerticalAlignment "
	TextField\setTextVerticalAlignment(${1:textvalignment})


snippet TextField\addEventListener(func) "csxV3: TextField::addEventListener "
	TextField\addEventListener(${1:func})


snippet TextField\didNotSelectSelf! "csxV3: TextField::didNotSelectSelf "
	TextField\didNotSelectSelf!


snippet TextField\getFontName! "csxV3: TextField::getFontName "
	TextField\getFontName!


snippet TextField\setTextAreaSize(size) "csxV3: TextField::setTextAreaSize "
	TextField\setTextAreaSize(${1:size})


snippet TextField\attachWithIME! "csxV3: TextField::attachWithIME "
	TextField\attachWithIME!


snippet TextField\setPasswordEnabled(bool) "csxV3: TextField::setPasswordEnabled "
	TextField\setPasswordEnabled(${1:bool})


snippet TextField\getPasswordStyleText! "csxV3: TextField::getPasswordStyleText "
	TextField\getPasswordStyleText!


snippet TextField\setMaxLengthEnabled(bool) "csxV3: TextField::setMaxLengthEnabled "
	TextField\setMaxLengthEnabled(${1:bool})


snippet TextField\setPasswordStyleText(char) "csxV3: TextField::setPasswordStyleText "
	TextField\setPasswordStyleText(${1:char})


snippet TextField\setDeleteBackward(bool) "csxV3: TextField::setDeleteBackward "
	TextField\setDeleteBackward(${1:bool})


snippet TextField\setFontSize(int) "csxV3: TextField::setFontSize "
	TextField\setFontSize(${1:int})


snippet TextField\setPlaceHolder(str) "csxV3: TextField::setPlaceHolder "
	TextField\setPlaceHolder(${1:str})


snippet TextField\isPasswordEnabled! "csxV3: TextField::isPasswordEnabled "
	TextField\isPasswordEnabled!


snippet TextField\setTextHorizontalAlignment(texthalignment) "csxV3: TextField::setTextHorizontalAlignment "
	TextField\setTextHorizontalAlignment(${1:texthalignment})


snippet TextField\getMaxLength! "csxV3: TextField::getMaxLength "
	TextField\getMaxLength!


snippet TextField\isMaxLengthEnabled! "csxV3: TextField::isMaxLengthEnabled "
	TextField\isMaxLengthEnabled!


snippet TextField\setDetachWithIME(bool) "csxV3: TextField::setDetachWithIME "
	TextField\setDetachWithIME(${1:bool})


snippet TextField\setText(str) "csxV3: TextField::setText "
	TextField\setText(${1:str})


snippet TextField\setTouchAreaEnabled(bool) "csxV3: TextField::setTouchAreaEnabled "
	TextField\setTouchAreaEnabled(${1:bool})


snippet TextField\hitTest(vec2) "csxV3: TextField::hitTest "
	TextField\hitTest(${1:vec2})


snippet TextField\setMaxLength(int) "csxV3: TextField::setMaxLength "
	TextField\setMaxLength(${1:int})


snippet TextField\setTouchSize(size) "csxV3: TextField::setTouchSize "
	TextField\setTouchSize(${1:size})


snippet TextField\getTouchSize! "csxV3: TextField::getTouchSize "
	TextField\getTouchSize!


snippet TextField\create(str\,str\,int) "csxV3: TextField::create "
	TextField\create(${1:str}, ${2:str}, ${3:int})


snippet TextField\createInstance! "csxV3: TextField::createInstance "
	TextField\createInstance!


snippet TextField\getVirtualRenderer! "csxV3: TextField::getVirtualRenderer "
	TextField\getVirtualRenderer!


snippet TextField\getDescription! "csxV3: TextField::getDescription "
	TextField\getDescription!


snippet TextField\update(float) "csxV3: TextField::update "
	TextField\update(${1:float})


snippet TextField\getVirtualRendererSize! "csxV3: TextField::getVirtualRendererSize "
	TextField\getVirtualRendererSize!


snippet Texture2D\getMaxT! "csxV3: Texture2D::getMaxT "
	Texture2D\getMaxT!


snippet Texture2D\getStringForFormat! "csxV3: Texture2D::getStringForFormat "
	Texture2D\getStringForFormat!


snippet Texture2D\initWithImage(image\,pixelformat) "csxV3: Texture2D::initWithImage "
	Texture2D\initWithImage(${1:image}, ${2:pixelformat})


snippet Texture2D\getMaxS! "csxV3: Texture2D::getMaxS "
	Texture2D\getMaxS!


snippet Texture2D\updateWithData(void\,int\,int\,int\,int) "csxV3: Texture2D::updateWithData "
	Texture2D\updateWithData(${1:void}, ${2:int}, ${3:int}, ${4:int}, ${5:int})


snippet Texture2D\hasPremultipliedAlpha! "csxV3: Texture2D::hasPremultipliedAlpha "
	Texture2D\hasPremultipliedAlpha!


snippet Texture2D\initWithMipmaps(map\,int\,pixelformat\,int\,int) "csxV3: Texture2D::initWithMipmaps "
	Texture2D\initWithMipmaps(${1:map}, ${2:int}, ${3:pixelformat}, ${4:int}, ${5:int})


snippet Texture2D\getPixelsHigh! "csxV3: Texture2D::getPixelsHigh "
	Texture2D\getPixelsHigh!


snippet Texture2D\getBitsPerPixelForFormat(pixelformat) "csxV3: Texture2D::getBitsPerPixelForFormat "
	Texture2D\getBitsPerPixelForFormat(${1:pixelformat})


snippet Texture2D\getName! "csxV3: Texture2D::getName "
	Texture2D\getName!


snippet Texture2D\initWithString(char\,str\,float\,size\,texthalignment\,textvalignment) "csxV3: Texture2D::initWithString "
	Texture2D\initWithString(${1:char}, ${2:str}, ${3:float}, ${4:size}, ${5:texthalignment}, ${6:textvalignment})


snippet Texture2D\setMaxT(float) "csxV3: Texture2D::setMaxT "
	Texture2D\setMaxT(${1:float})


snippet Texture2D\drawInRect(rect) "csxV3: Texture2D::drawInRect "
	Texture2D\drawInRect(${1:rect})


snippet Texture2D\getContentSize! "csxV3: Texture2D::getContentSize "
	Texture2D\getContentSize!


snippet Texture2D\setAliasTexParameters! "csxV3: Texture2D::setAliasTexParameters "
	Texture2D\setAliasTexParameters!


snippet Texture2D\setAntiAliasTexParameters! "csxV3: Texture2D::setAntiAliasTexParameters "
	Texture2D\setAntiAliasTexParameters!


snippet Texture2D\generateMipmap! "csxV3: Texture2D::generateMipmap "
	Texture2D\generateMipmap!


snippet Texture2D\getDescription! "csxV3: Texture2D::getDescription "
	Texture2D\getDescription!


snippet Texture2D\getPixelFormat! "csxV3: Texture2D::getPixelFormat "
	Texture2D\getPixelFormat!


snippet Texture2D\setGLProgram(glprogram) "csxV3: Texture2D::setGLProgram "
	Texture2D\setGLProgram(${1:glprogram})


snippet Texture2D\getContentSizeInPixels! "csxV3: Texture2D::getContentSizeInPixels "
	Texture2D\getContentSizeInPixels!


snippet Texture2D\getPixelsWide! "csxV3: Texture2D::getPixelsWide "
	Texture2D\getPixelsWide!


snippet Texture2D\drawAtPoint(vec2) "csxV3: Texture2D::drawAtPoint "
	Texture2D\drawAtPoint(${1:vec2})


snippet Texture2D\getGLProgram! "csxV3: Texture2D::getGLProgram "
	Texture2D\getGLProgram!


snippet Texture2D\hasMipmaps! "csxV3: Texture2D::hasMipmaps "
	Texture2D\hasMipmaps!


snippet Texture2D\setMaxS(float) "csxV3: Texture2D::setMaxS "
	Texture2D\setMaxS(${1:float})


snippet Texture2D\setDefaultAlphaPixelFormat(pixelformat) "csxV3: Texture2D::setDefaultAlphaPixelFormat "
	Texture2D\setDefaultAlphaPixelFormat(${1:pixelformat})


snippet Texture2D\getDefaultAlphaPixelFormat! "csxV3: Texture2D::getDefaultAlphaPixelFormat "
	Texture2D\getDefaultAlphaPixelFormat!


snippet Texture2D\PVRImagesHavePremultipliedAlpha(bool) "csxV3: Texture2D::PVRImagesHavePremultipliedAlpha "
	Texture2D\PVRImagesHavePremultipliedAlpha(${1:bool})


snippet TextureCache\reloadTexture(str) "csxV3: TextureCache::reloadTexture "
	TextureCache\reloadTexture(${1:str})


snippet TextureCache\removeTextureForKey(str) "csxV3: TextureCache::removeTextureForKey "
	TextureCache\removeTextureForKey(${1:str})


snippet TextureCache\removeAllTextures! "csxV3: TextureCache::removeAllTextures "
	TextureCache\removeAllTextures!


snippet TextureCache\getDescription! "csxV3: TextureCache::getDescription "
	TextureCache\getDescription!


snippet TextureCache\getCachedTextureInfo! "csxV3: TextureCache::getCachedTextureInfo "
	TextureCache\getCachedTextureInfo!


snippet TextureCache\addImage(image\,str) "csxV3: TextureCache::addImage "
	TextureCache\addImage(${1:image}, ${2:str})


snippet TextureCache\getTextureForKey(str) "csxV3: TextureCache::getTextureForKey "
	TextureCache\getTextureForKey(${1:str})


snippet TextureCache\removeUnusedTextures! "csxV3: TextureCache::removeUnusedTextures "
	TextureCache\removeUnusedTextures!


snippet TextureCache\removeTexture(texture2d) "csxV3: TextureCache::removeTexture "
	TextureCache\removeTexture(${1:texture2d})


snippet TextureCache\waitForQuit! "csxV3: TextureCache::waitForQuit "
	TextureCache\waitForQuit!


snippet TextureData\getContourData(int) "csxV3: TextureData::getContourData "
	TextureData\getContourData(${1:int})


snippet TextureData\init! "csxV3: TextureData::init "
	TextureData\init!


snippet TextureData\addContourData(contourdata) "csxV3: TextureData::addContourData "
	TextureData\addContourData(${1:contourdata})


snippet TextureData\create! "csxV3: TextureData::create "
	TextureData\create!


snippet TileMapAtlas\initWithTileFile(str\,str\,int\,int) "csxV3: TileMapAtlas::initWithTileFile "
	TileMapAtlas\initWithTileFile(${1:str}, ${2:str}, ${3:int}, ${4:int})


snippet TileMapAtlas\releaseMap! "csxV3: TileMapAtlas::releaseMap "
	TileMapAtlas\releaseMap!


snippet TileMapAtlas\getTileAt(vec2) "csxV3: TileMapAtlas::getTileAt "
	TileMapAtlas\getTileAt(${1:vec2})


snippet TileMapAtlas\setTile(color3b\,vec2) "csxV3: TileMapAtlas::setTile "
	TileMapAtlas\setTile(${1:color3b}, ${2:vec2})


snippet TileMapAtlas\setTGAInfo(simagetga) "csxV3: TileMapAtlas::setTGAInfo "
	TileMapAtlas\setTGAInfo(${1:simagetga})


snippet TileMapAtlas\create(str\,str\,int\,int) "csxV3: TileMapAtlas::create "
	TileMapAtlas\create(${1:str}, ${2:str}, ${3:int}, ${4:int})


snippet TiledGrid3D\create(size\,texture2d\,bool) "csxV3: TiledGrid3D::create "
	TiledGrid3D\create(${1:size}, ${2:texture2d}, ${3:bool})


snippet TiledGrid3D\calculateVertexPoints! "csxV3: TiledGrid3D::calculateVertexPoints "
	TiledGrid3D\calculateVertexPoints!


snippet TiledGrid3D\blit! "csxV3: TiledGrid3D::blit "
	TiledGrid3D\blit!


snippet TiledGrid3D\reuse! "csxV3: TiledGrid3D::reuse "
	TiledGrid3D\reuse!


snippet TiledGrid3DAction\getGrid! "csxV3: TiledGrid3DAction::getGrid "
	TiledGrid3DAction\getGrid!


snippet Timer\getInterval! "csxV3: Timer::getInterval "
	Timer\getInterval!


snippet Timer\setupTimerWithInterval(float\,int\,float) "csxV3: Timer::setupTimerWithInterval "
	Timer\setupTimerWithInterval(${1:float}, ${2:int}, ${3:float})


snippet Timer\setInterval(float) "csxV3: Timer::setInterval "
	Timer\setInterval(${1:float})


snippet Timer\update(float) "csxV3: Timer::update "
	Timer\update(${1:float})


snippet Timer\trigger! "csxV3: Timer::trigger "
	Timer\trigger!


snippet TintBy\create(float\,short\,short\,short) "csxV3: TintBy::create "
	TintBy\create(${1:float}, ${2:short}, ${3:short}, ${4:short})


snippet TintBy\startWithTarget(node) "csxV3: TintBy::startWithTarget "
	TintBy\startWithTarget(${1:node})


snippet TintBy\clone! "csxV3: TintBy::clone "
	TintBy\clone!


snippet TintBy\reverse! "csxV3: TintBy::reverse "
	TintBy\reverse!


snippet TintTo\create(float\,char\,char\,char) "csxV3: TintTo::create "
	TintTo\create(${1:float}, ${2:char}, ${3:char}, ${4:char})


snippet TintTo\startWithTarget(node) "csxV3: TintTo::startWithTarget "
	TintTo\startWithTarget(${1:node})


snippet TintTo\clone! "csxV3: TintTo::clone "
	TintTo\clone!


snippet TintTo\reverse! "csxV3: TintTo::reverse "
	TintTo\reverse!


snippet ToggleVisibility\create! "csxV3: ToggleVisibility::create "
	ToggleVisibility\create!


snippet ToggleVisibility\clone! "csxV3: ToggleVisibility::clone "
	ToggleVisibility\clone!


snippet ToggleVisibility\update(float) "csxV3: ToggleVisibility::update "
	ToggleVisibility\update(${1:float})


snippet Touch\getPreviousLocationInView! "csxV3: Touch::getPreviousLocationInView "
	Touch\getPreviousLocationInView!


snippet Touch\getLocation! "csxV3: Touch::getLocation "
	Touch\getLocation!


snippet Touch\getDelta! "csxV3: Touch::getDelta "
	Touch\getDelta!


snippet Touch\getStartLocationInView! "csxV3: Touch::getStartLocationInView "
	Touch\getStartLocationInView!


snippet Touch\getStartLocation! "csxV3: Touch::getStartLocation "
	Touch\getStartLocation!


snippet Touch\getID! "csxV3: Touch::getID "
	Touch\getID!


snippet Touch\setTouchInfo(int\,float\,float) "csxV3: Touch::setTouchInfo "
	Touch\setTouchInfo(${1:int}, ${2:float}, ${3:float})


snippet Touch\getLocationInView! "csxV3: Touch::getLocationInView "
	Touch\getLocationInView!


snippet Touch\getPreviousLocation! "csxV3: Touch::getPreviousLocation "
	Touch\getPreviousLocation!


snippet TransitionCrossFade\create(float\,scene) "csxV3: TransitionCrossFade::create "
	TransitionCrossFade\create(${1:float}, ${2:scene})


snippet TransitionFadeBL\create(float\,scene) "csxV3: TransitionFadeBL::create "
	TransitionFadeBL\create(${1:float}, ${2:scene})


snippet TransitionFadeDown\create(float\,scene) "csxV3: TransitionFadeDown::create "
	TransitionFadeDown\create(${1:float}, ${2:scene})


snippet TransitionFadeTR\easeActionWithAction(actioninterval) "csxV3: TransitionFadeTR::easeActionWithAction "
	TransitionFadeTR\easeActionWithAction(${1:actioninterval})


snippet TransitionFadeTR\actionWithSize(size) "csxV3: TransitionFadeTR::actionWithSize "
	TransitionFadeTR\actionWithSize(${1:size})


snippet TransitionFadeTR\create(float\,scene) "csxV3: TransitionFadeTR::create "
	TransitionFadeTR\create(${1:float}, ${2:scene})


snippet TransitionFadeUp\create(float\,scene) "csxV3: TransitionFadeUp::create "
	TransitionFadeUp\create(${1:float}, ${2:scene})


snippet TransitionMoveInL\action! "csxV3: TransitionMoveInL::action "
	TransitionMoveInL\action!


snippet TransitionMoveInL\easeActionWithAction(actioninterval) "csxV3: TransitionMoveInL::easeActionWithAction "
	TransitionMoveInL\easeActionWithAction(${1:actioninterval})


snippet TransitionPageTurn\actionWithSize(size) "csxV3: TransitionPageTurn::actionWithSize "
	TransitionPageTurn\actionWithSize(${1:size})


snippet TransitionPageTurn\initWithDuration(float\,scene\,bool) "csxV3: TransitionPageTurn::initWithDuration "
	TransitionPageTurn\initWithDuration(${1:float}, ${2:scene}, ${3:bool})


snippet TransitionPageTurn\create(float\,scene\,bool) "csxV3: TransitionPageTurn::create "
	TransitionPageTurn\create(${1:float}, ${2:scene}, ${3:bool})


snippet TransitionPageTurn\draw(renderer\,mat4\,bool) "csxV3: TransitionPageTurn::draw "
	TransitionPageTurn\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet TransitionProgress\create(float\,scene) "csxV3: TransitionProgress::create "
	TransitionProgress\create(${1:float}, ${2:scene})


snippet TransitionScene\finish! "csxV3: TransitionScene::finish "
	TransitionScene\finish!


snippet TransitionScene\hideOutShowIn! "csxV3: TransitionScene::hideOutShowIn "
	TransitionScene\hideOutShowIn!


snippet TransitionScene\create(float\,scene) "csxV3: TransitionScene::create "
	TransitionScene\create(${1:float}, ${2:scene})


snippet TransitionScene\draw(renderer\,mat4\,bool) "csxV3: TransitionScene::draw "
	TransitionScene\draw(${1:renderer}, ${2:mat4}, ${3:bool})


snippet TransitionShrinkGrow\easeActionWithAction(actioninterval) "csxV3: TransitionShrinkGrow::easeActionWithAction "
	TransitionShrinkGrow\easeActionWithAction(${1:actioninterval})


snippet TransitionSlideInB\action! "csxV3: TransitionSlideInB::action "
	TransitionSlideInB\action!


snippet TransitionSlideInL\action! "csxV3: TransitionSlideInL::action "
	TransitionSlideInL\action!


snippet TransitionSlideInL\easeActionWithAction(actioninterval) "csxV3: TransitionSlideInL::easeActionWithAction "
	TransitionSlideInL\easeActionWithAction(${1:actioninterval})


snippet TransitionSlideInR\action! "csxV3: TransitionSlideInR::action "
	TransitionSlideInR\action!


snippet TransitionSlideInT\action! "csxV3: TransitionSlideInT::action "
	TransitionSlideInT\action!


snippet TransitionSplitCols\action! "csxV3: TransitionSplitCols::action "
	TransitionSplitCols\action!


snippet TransitionSplitCols\easeActionWithAction(actioninterval) "csxV3: TransitionSplitCols::easeActionWithAction "
	TransitionSplitCols\easeActionWithAction(${1:actioninterval})


snippet TransitionSplitCols\create(float\,scene) "csxV3: TransitionSplitCols::create "
	TransitionSplitCols\create(${1:float}, ${2:scene})


snippet TransitionSplitRows\create(float\,scene) "csxV3: TransitionSplitRows::create "
	TransitionSplitRows\create(${1:float}, ${2:scene})


snippet TransitionTurnOffTiles\easeActionWithAction(actioninterval) "csxV3: TransitionTurnOffTiles::easeActionWithAction "
	TransitionTurnOffTiles\easeActionWithAction(${1:actioninterval})


snippet TransitionTurnOffTiles\create(float\,scene) "csxV3: TransitionTurnOffTiles::create "
	TransitionTurnOffTiles\create(${1:float}, ${2:scene})


snippet TurnOffTiles\turnOnTile(vec2) "csxV3: TurnOffTiles::turnOnTile "
	TurnOffTiles\turnOnTile(${1:vec2})


snippet TurnOffTiles\turnOffTile(vec2) "csxV3: TurnOffTiles::turnOffTile "
	TurnOffTiles\turnOffTile(${1:vec2})


snippet TurnOffTiles\shuffle(int\,int) "csxV3: TurnOffTiles::shuffle "
	TurnOffTiles\shuffle(${1:int}, ${2:int})


snippet TurnOffTiles\create(float\,size\,int) "csxV3: TurnOffTiles::create "
	TurnOffTiles\create(${1:float}, ${2:size}, ${3:int})


snippet TurnOffTiles\startWithTarget(node) "csxV3: TurnOffTiles::startWithTarget "
	TurnOffTiles\startWithTarget(${1:node})


snippet TurnOffTiles\clone! "csxV3: TurnOffTiles::clone "
	TurnOffTiles\clone!


snippet Tween\getAnimation! "csxV3: Tween::getAnimation "
	Tween\getAnimation!


snippet Tween\gotoAndPause(int) "csxV3: Tween::gotoAndPause "
	Tween\gotoAndPause(${1:int})


snippet Tween\play(movementbonedata\,int\,int\,int\,int) "csxV3: Tween::play "
	Tween\play(${1:movementbonedata}, ${2:int}, ${3:int}, ${4:int}, ${5:int})


snippet Tween\gotoAndPlay(int) "csxV3: Tween::gotoAndPlay "
	Tween\gotoAndPlay(${1:int})


snippet Tween\init(bone) "csxV3: Tween::init "
	Tween\init(${1:bone})


snippet Tween\setAnimation(armatureanimation) "csxV3: Tween::setAnimation "
	Tween\setAnimation(${1:armatureanimation})


snippet Tween\create(bone) "csxV3: Tween::create "
	Tween\create(${1:bone})


snippet Twirl\setAmplitudeRate(float) "csxV3: Twirl::setAmplitudeRate "
	Twirl\setAmplitudeRate(${1:float})


snippet Twirl\getAmplitudeRate! "csxV3: Twirl::getAmplitudeRate "
	Twirl\getAmplitudeRate!


snippet Twirl\setAmplitude(float) "csxV3: Twirl::setAmplitude "
	Twirl\setAmplitude(${1:float})


snippet Twirl\getAmplitude! "csxV3: Twirl::getAmplitude "
	Twirl\getAmplitude!


snippet Twirl\setPosition(vec2) "csxV3: Twirl::setPosition "
	Twirl\setPosition(${1:vec2})


snippet Twirl\getPosition! "csxV3: Twirl::getPosition "
	Twirl\getPosition!


snippet Twirl\create(float\,size\,vec2\,int\,float) "csxV3: Twirl::create "
	Twirl\create(${1:float}, ${2:size}, ${3:vec2}, ${4:int}, ${5:float})


snippet Twirl\clone! "csxV3: Twirl::clone "
	Twirl\clone!


snippet UserDefault\setIntegerForKey(char\,int) "csxV3: UserDefault::setIntegerForKey "
	UserDefault\setIntegerForKey(${1:char}, ${2:int})


snippet UserDefault\getFloatForKey(char\,float) "csxV3: UserDefault::getFloatForKey "
	UserDefault\getFloatForKey(${1:char}, ${2:float})


snippet UserDefault\getBoolForKey(char\,bool) "csxV3: UserDefault::getBoolForKey "
	UserDefault\getBoolForKey(${1:char}, ${2:bool})


snippet UserDefault\setDoubleForKey(char\,double) "csxV3: UserDefault::setDoubleForKey "
	UserDefault\setDoubleForKey(${1:char}, ${2:double})


snippet UserDefault\setFloatForKey(char\,float) "csxV3: UserDefault::setFloatForKey "
	UserDefault\setFloatForKey(${1:char}, ${2:float})


snippet UserDefault\getStringForKey(char\,str) "csxV3: UserDefault::getStringForKey "
	UserDefault\getStringForKey(${1:char}, ${2:str})


snippet UserDefault\setStringForKey(char\,str) "csxV3: UserDefault::setStringForKey "
	UserDefault\setStringForKey(${1:char}, ${2:str})


snippet UserDefault\flush! "csxV3: UserDefault::flush "
	UserDefault\flush!


snippet UserDefault\getIntegerForKey(char\,int) "csxV3: UserDefault::getIntegerForKey "
	UserDefault\getIntegerForKey(${1:char}, ${2:int})


snippet UserDefault\getDoubleForKey(char\,double) "csxV3: UserDefault::getDoubleForKey "
	UserDefault\getDoubleForKey(${1:char}, ${2:double})


snippet UserDefault\setBoolForKey(char\,bool) "csxV3: UserDefault::setBoolForKey "
	UserDefault\setBoolForKey(${1:char}, ${2:bool})


snippet UserDefault\destroyInstance! "csxV3: UserDefault::destroyInstance "
	UserDefault\destroyInstance!


snippet UserDefault\getXMLFilePath! "csxV3: UserDefault::getXMLFilePath "
	UserDefault\getXMLFilePath!


snippet Waves\getAmplitudeRate! "csxV3: Waves::getAmplitudeRate "
	Waves\getAmplitudeRate!


snippet Waves\setAmplitude(float) "csxV3: Waves::setAmplitude "
	Waves\setAmplitude(${1:float})


snippet Waves\setAmplitudeRate(float) "csxV3: Waves::setAmplitudeRate "
	Waves\setAmplitudeRate(${1:float})


snippet Waves\getAmplitude! "csxV3: Waves::getAmplitude "
	Waves\getAmplitude!


snippet Waves\create(float\,size\,int\,float\,bool\,bool) "csxV3: Waves::create "
	Waves\create(${1:float}, ${2:size}, ${3:int}, ${4:float}, ${5:bool}, ${6:bool})


snippet Waves\clone! "csxV3: Waves::clone "
	Waves\clone!


snippet Waves3D\getAmplitudeRate! "csxV3: Waves3D::getAmplitudeRate "
	Waves3D\getAmplitudeRate!


snippet Waves3D\setAmplitude(float) "csxV3: Waves3D::setAmplitude "
	Waves3D\setAmplitude(${1:float})


snippet Waves3D\setAmplitudeRate(float) "csxV3: Waves3D::setAmplitudeRate "
	Waves3D\setAmplitudeRate(${1:float})


snippet Waves3D\getAmplitude! "csxV3: Waves3D::getAmplitude "
	Waves3D\getAmplitude!


snippet Waves3D\create(float\,size\,int\,float) "csxV3: Waves3D::create "
	Waves3D\create(${1:float}, ${2:size}, ${3:int}, ${4:float})


snippet Waves3D\clone! "csxV3: Waves3D::clone "
	Waves3D\clone!


snippet WavesTiles3D\getAmplitudeRate! "csxV3: WavesTiles3D::getAmplitudeRate "
	WavesTiles3D\getAmplitudeRate!


snippet WavesTiles3D\setAmplitude(float) "csxV3: WavesTiles3D::setAmplitude "
	WavesTiles3D\setAmplitude(${1:float})


snippet WavesTiles3D\setAmplitudeRate(float) "csxV3: WavesTiles3D::setAmplitudeRate "
	WavesTiles3D\setAmplitudeRate(${1:float})


snippet WavesTiles3D\getAmplitude! "csxV3: WavesTiles3D::getAmplitude "
	WavesTiles3D\getAmplitude!


snippet WavesTiles3D\create(float\,size\,int\,float) "csxV3: WavesTiles3D::create "
	WavesTiles3D\create(${1:float}, ${2:size}, ${3:int}, ${4:float})


snippet WavesTiles3D\clone! "csxV3: WavesTiles3D::clone "
	WavesTiles3D\clone!


snippet Widget\setSizePercent(vec2) "csxV3: Widget::setSizePercent "
	Widget\setSizePercent(${1:vec2})


snippet Widget\getCustomSize! "csxV3: Widget::getCustomSize "
	Widget\getCustomSize!


snippet Widget\setFlippedY(bool) "csxV3: Widget::setFlippedY "
	Widget\setFlippedY(${1:bool})


snippet Widget\setFlippedX(bool) "csxV3: Widget::setFlippedX "
	Widget\setFlippedX(${1:bool})


snippet Widget\getLeftInParent! "csxV3: Widget::getLeftInParent "
	Widget\getLeftInParent!


snippet Widget\getTouchEndPos! "csxV3: Widget::getTouchEndPos "
	Widget\getTouchEndPos!


snippet Widget\setPositionPercent(vec2) "csxV3: Widget::setPositionPercent "
	Widget\setPositionPercent(${1:vec2})


snippet Widget\getLayoutSize! "csxV3: Widget::getLayoutSize "
	Widget\getLayoutSize!


snippet Widget\setHighlighted(bool) "csxV3: Widget::setHighlighted "
	Widget\setHighlighted(${1:bool})


snippet Widget\setPositionType(positiontype) "csxV3: Widget::setPositionType "
	Widget\setPositionType(${1:positiontype})


snippet Widget\getName! "csxV3: Widget::getName "
	Widget\getName!


snippet Widget\isIgnoreContentAdaptWithSize! "csxV3: Widget::isIgnoreContentAdaptWithSize "
	Widget\isIgnoreContentAdaptWithSize!


snippet Widget\getBottomInParent! "csxV3: Widget::getBottomInParent "
	Widget\getBottomInParent!


snippet Widget\isHighlighted! "csxV3: Widget::isHighlighted "
	Widget\isHighlighted!


snippet Widget\getLayoutParameter(type) "csxV3: Widget::getLayoutParameter "
	Widget\getLayoutParameter(${1:type})


snippet Widget\getPositionType! "csxV3: Widget::getPositionType "
	Widget\getPositionType!


snippet Widget\getChildByName(str) "csxV3: Widget::getChildByName "
	Widget\getChildByName(${1:str})


snippet Widget\isEnabled! "csxV3: Widget::isEnabled "
	Widget\isEnabled!


snippet Widget\isFocused! "csxV3: Widget::isFocused "
	Widget\isFocused!


snippet Widget\getVirtualRendererSize! "csxV3: Widget::getVirtualRendererSize "
	Widget\getVirtualRendererSize!


snippet Widget\findNextFocusedWidget(focusdirection\,widget) "csxV3: Widget::findNextFocusedWidget "
	Widget\findNextFocusedWidget(${1:focusdirection}, ${2:widget})


snippet Widget\isTouchEnabled! "csxV3: Widget::isTouchEnabled "
	Widget\isTouchEnabled!


snippet Widget\getActionTag! "csxV3: Widget::getActionTag "
	Widget\getActionTag!


snippet Widget\getWorldPosition! "csxV3: Widget::getWorldPosition "
	Widget\getWorldPosition!


snippet Widget\setFocused(bool) "csxV3: Widget::setFocused "
	Widget\setFocused(${1:bool})


snippet Widget\setTouchEnabled(bool) "csxV3: Widget::setTouchEnabled "
	Widget\setTouchEnabled(${1:bool})


snippet Widget\clone! "csxV3: Widget::clone "
	Widget\clone!


snippet Widget\getTouchMovePos! "csxV3: Widget::getTouchMovePos "
	Widget\getTouchMovePos!


snippet Widget\setEnabled(bool) "csxV3: Widget::setEnabled "
	Widget\setEnabled(${1:bool})


snippet Widget\getVirtualRenderer! "csxV3: Widget::getVirtualRenderer "
	Widget\getVirtualRenderer!


snippet Widget\setBrightStyle(brightstyle) "csxV3: Widget::setBrightStyle "
	Widget\setBrightStyle(${1:brightstyle})


snippet Widget\setName(str) "csxV3: Widget::setName "
	Widget\setName(${1:str})


snippet Widget\setLayoutParameter(layoutparameter) "csxV3: Widget::setLayoutParameter "
	Widget\setLayoutParameter(${1:layoutparameter})


snippet Widget\getSizePercent! "csxV3: Widget::getSizePercent "
	Widget\getSizePercent!


snippet Widget\getTouchStartPos! "csxV3: Widget::getTouchStartPos "
	Widget\getTouchStartPos!


snippet Widget\setFocusEnabled(bool) "csxV3: Widget::setFocusEnabled "
	Widget\setFocusEnabled(${1:bool})


snippet Widget\setActionTag(int) "csxV3: Widget::setActionTag "
	Widget\setActionTag(${1:int})


snippet Widget\isBright! "csxV3: Widget::isBright "
	Widget\isBright!


snippet Widget\clippingParentAreaContainPoint(vec2) "csxV3: Widget::clippingParentAreaContainPoint "
	Widget\clippingParentAreaContainPoint(${1:vec2})


snippet Widget\getCurrentFocusedWidget(bool) "csxV3: Widget::getCurrentFocusedWidget "
	Widget\getCurrentFocusedWidget(${1:bool})


snippet Widget\getTopInParent! "csxV3: Widget::getTopInParent "
	Widget\getTopInParent!


snippet Widget\requestFocus! "csxV3: Widget::requestFocus "
	Widget\requestFocus!


snippet Widget\updateSizeAndPosition(size) "csxV3: Widget::updateSizeAndPosition "
	Widget\updateSizeAndPosition(${1:size})


snippet Widget\getSize! "csxV3: Widget::getSize "
	Widget\getSize!


snippet Widget\getRightInParent! "csxV3: Widget::getRightInParent "
	Widget\getRightInParent!


snippet Widget\getSizeType! "csxV3: Widget::getSizeType "
	Widget\getSizeType!


snippet Widget\ignoreContentAdaptWithSize(bool) "csxV3: Widget::ignoreContentAdaptWithSize "
	Widget\ignoreContentAdaptWithSize(${1:bool})


snippet Widget\addTouchEventListener(func) "csxV3: Widget::addTouchEventListener "
	Widget\addTouchEventListener(${1:func})


snippet Widget\getPositionPercent! "csxV3: Widget::getPositionPercent "
	Widget\getPositionPercent!


snippet Widget\hitTest(vec2) "csxV3: Widget::hitTest "
	Widget\hitTest(${1:vec2})


snippet Widget\isFlippedX! "csxV3: Widget::isFlippedX "
	Widget\isFlippedX!


snippet Widget\isFlippedY! "csxV3: Widget::isFlippedY "
	Widget\isFlippedY!


snippet Widget\setSizeType(sizetype) "csxV3: Widget::setSizeType "
	Widget\setSizeType(${1:sizetype})


snippet Widget\checkChildInfo(int\,widget\,vec2) "csxV3: Widget::checkChildInfo "
	Widget\checkChildInfo(${1:int}, ${2:widget}, ${3:vec2})


snippet Widget\setSize(size) "csxV3: Widget::setSize "
	Widget\setSize(${1:size})


snippet Widget\setBright(bool) "csxV3: Widget::setBright "
	Widget\setBright(${1:bool})


snippet Widget\isFocusEnabled! "csxV3: Widget::isFocusEnabled "
	Widget\isFocusEnabled!


snippet Widget\create! "csxV3: Widget::create "
	Widget\create!


snippet Widget\setColor(color3b) "csxV3: Widget::setColor "
	Widget\setColor(${1:color3b})


snippet Widget\getColor! "csxV3: Widget::getColor "
	Widget\getColor!


snippet Widget\setOpacity(char) "csxV3: Widget::setOpacity "
	Widget\setOpacity(${1:char})


snippet Widget\getOpacity! "csxV3: Widget::getOpacity "
	Widget\getOpacity!


snippet Widget\setPosition(vec2) "csxV3: Widget::setPosition "
	Widget\setPosition(${1:vec2})


snippet Widget\getDescription! "csxV3: Widget::getDescription "
	Widget\getDescription!


######### Cocos2d-x v3 MoonScript Snippets : END ########################